
LittleVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c670  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034b4  0800c81c  0800c81c  0001c81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcd0  0800fcd0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcd0  0800fcd0  0001fcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcd8  0800fcd8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcd8  0800fcd8  0001fcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcdc  0800fcdc  0001fcdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800fce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009cf8  200000b8  0800fd98  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009db0  0800fd98  00029db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044360  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f1c  00000000  00000000  00064448  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028f8  00000000  00000000  0006c368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002738  00000000  00000000  0006ec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ec86  00000000  00000000  00071398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b8cd  00000000  00000000  000a001e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0b38  00000000  00000000  000cb8eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bc423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae80  00000000  00000000  001bc4a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000b8 	.word	0x200000b8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800c804 	.word	0x0800c804

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000bc 	.word	0x200000bc
 80001e8:	0800c804 	.word	0x0800c804

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f001 f852 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f826 	bl	8000568 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  lv_init();
 800051c:	f008 fa72 	bl	8008a04 <lv_init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 faac 	bl	8000a7c <MX_GPIO_Init>
  MX_CRC_Init();
 8000524:	f000 f8a4 	bl	8000670 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000528:	f000 f8b6 	bl	8000698 <MX_DMA2D_Init>
  MX_FMC_Init();
 800052c:	f000 fa56 	bl	80009dc <MX_FMC_Init>
  MX_I2C3_Init();
 8000530:	f000 f8e4 	bl	80006fc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000534:	f000 f922 	bl	800077c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000538:	f000 f9a0 	bl	800087c <MX_SPI5_Init>
  MX_TIM1_Init();
 800053c:	f000 f9d4 	bl	80008e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fa22 	bl	8000988 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000544:	f00b fd48 	bl	800bfd8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  /*Initialize `disp_buf` with the buffer(s) */
  lv_disp_buf_init(&disp_buf, buf_1, buf_2, 100*10);
 8000548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <main+0x4c>)
 800054e:	4904      	ldr	r1, [pc, #16]	; (8000560 <main+0x50>)
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x54>)
 8000552:	f00a fcb4 	bl	800aebe <lv_disp_buf_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000556:	f00b fd65 	bl	800c024 <MX_USB_HOST_Process>
 800055a:	e7fc      	b.n	8000556 <main+0x46>
 800055c:	200008c0 	.word	0x200008c0
 8000560:	200000f0 	.word	0x200000f0
 8000564:	200000d4 	.word	0x200000d4

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0a0      	sub	sp, #128	; 0x80
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f00c f881 	bl	800c67e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2230      	movs	r2, #48	; 0x30
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f00c f872 	bl	800c67e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <SystemClock_Config+0x100>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	4a31      	ldr	r2, [pc, #196]	; (8000668 <SystemClock_Config+0x100>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6413      	str	r3, [r2, #64]	; 0x40
 80005aa:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <SystemClock_Config+0x100>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <SystemClock_Config+0x104>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c2:	4a2a      	ldr	r2, [pc, #168]	; (800066c <SystemClock_Config+0x104>)
 80005c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0x104>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d6:	2301      	movs	r3, #1
 80005d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005ee:	2348      	movs	r3, #72	; 0x48
 80005f0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f6:	2303      	movs	r3, #3
 80005f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fe62 	bl	80042c8 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060a:	f000 fb59 	bl	8000cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f004 f88e 	bl	800474c <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000636:	f000 fb43 	bl	8000cc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800063a:	2308      	movs	r3, #8
 800063c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800063e:	2332      	movs	r3, #50	; 0x32
 8000640:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000646:	2300      	movs	r3, #0
 8000648:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fa9c 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800065a:	f000 fb31 	bl	8000cc0 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3780      	adds	r7, #128	; 0x80
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_CRC_Init+0x20>)
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <MX_CRC_Init+0x24>)
 8000678:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_CRC_Init+0x20>)
 800067c:	f001 f8e4 	bl	8001848 <HAL_CRC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000686:	f000 fb1b 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20009188 	.word	0x20009188
 8000694:	40023000 	.word	0x40023000

08000698 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 800069e:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_DMA2D_Init+0x60>)
 80006a0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006ce:	f001 f8da 	bl	8001886 <HAL_DMA2D_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006d8:	f000 faf2 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006dc:	2101      	movs	r1, #1
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_DMA2D_Init+0x5c>)
 80006e0:	f001 fa2a 	bl	8001b38 <HAL_DMA2D_ConfigLayer>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006ea:	f000 fae9 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200092b8 	.word	0x200092b8
 80006f8:	4002b000 	.word	0x4002b000

080006fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_I2C3_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_I2C3_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_I2C3_Init+0x74>)
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <MX_I2C3_Init+0x7c>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_I2C3_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_I2C3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_I2C3_Init+0x74>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_I2C3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_I2C3_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_I2C3_Init+0x74>)
 800073a:	f003 f8b9 	bl	80038b0 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 fabc 	bl	8000cc0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <MX_I2C3_Init+0x74>)
 800074c:	f003 f9d8 	bl	8003b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000756:	f000 fab3 	bl	8000cc0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_I2C3_Init+0x74>)
 800075e:	f003 fa0b 	bl	8003b78 <HAL_I2CEx_ConfigDigitalFilter>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 faaa 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200090dc 	.word	0x200090dc
 8000774:	40005c00 	.word	0x40005c00
 8000778:	000186a0 	.word	0x000186a0

0800077c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2234      	movs	r2, #52	; 0x34
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f00b ff78 	bl	800c67e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800078e:	4b39      	ldr	r3, [pc, #228]	; (8000874 <MX_LTDC_Init+0xf8>)
 8000790:	4a39      	ldr	r2, [pc, #228]	; (8000878 <MX_LTDC_Init+0xfc>)
 8000792:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_LTDC_Init+0xf8>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800079a:	4b36      	ldr	r3, [pc, #216]	; (8000874 <MX_LTDC_Init+0xf8>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007a0:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007ac:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007ae:	2209      	movs	r2, #9
 80007b0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007ba:	221d      	movs	r2, #29
 80007bc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007c0:	2203      	movs	r2, #3
 80007c2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007c6:	f240 120d 	movw	r2, #269	; 0x10d
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007ce:	f240 1243 	movw	r2, #323	; 0x143
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007d6:	f240 1217 	movw	r2, #279	; 0x117
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007de:	f240 1247 	movw	r2, #327	; 0x147
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007fc:	481d      	ldr	r0, [pc, #116]	; (8000874 <MX_LTDC_Init+0xf8>)
 80007fe:	f003 f9fb 	bl	8003bf8 <HAL_LTDC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 fa5a 	bl	8000cc0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000810:	23f0      	movs	r3, #240	; 0xf0
 8000812:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000818:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800081c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800081e:	2302      	movs	r3, #2
 8000820:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800082a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800082e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000830:	2307      	movs	r3, #7
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000834:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800083a:	23f0      	movs	r3, #240	; 0xf0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800083e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_LTDC_Init+0xf8>)
 800085e:	f003 fb5d 	bl	8003f1c <HAL_LTDC_ConfigLayer>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000868:	f000 fa2a 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3738      	adds	r7, #56	; 0x38
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20009190 	.word	0x20009190
 8000878:	40016800 	.word	0x40016800

0800087c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_SPI5_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_SPI5_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI5_Init+0x64>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI5_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_SPI5_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI5_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008b0:	2218      	movs	r2, #24
 80008b2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_SPI5_Init+0x64>)
 80008ce:	f004 fb35 	bl	8004f3c <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 f9f2 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20009130 	.word	0x20009130
 80008e4:	40015000 	.word	0x40015000

080008e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_TIM1_Init+0x98>)
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <MX_TIM1_Init+0x9c>)
 8000908:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_TIM1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_TIM1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_TIM1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_TIM1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_TIM1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_TIM1_Init+0x98>)
 8000930:	f004 fb68 	bl	8005004 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800093a:	f000 f9c1 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_TIM1_Init+0x98>)
 800094c:	f004 fcb1 	bl	80052b2 <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000956:	f000 f9b3 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_TIM1_Init+0x98>)
 8000968:	f004 febc 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000972:	f000 f9a5 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20009278 	.word	0x20009278
 8000984:	40010000 	.word	0x40010000

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART1_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009c0:	f004 fee9 	bl	8005796 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f979 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20009238 	.word	0x20009238
 80009d8:	40011000 	.word	0x40011000

080009dc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_FMC_Init+0x98>)
 80009f6:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <MX_FMC_Init+0x9c>)
 80009f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_FMC_Init+0x98>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a0e:	2210      	movs	r2, #16
 8000a10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a14:	2240      	movs	r2, #64	; 0x40
 8000a16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a1a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_FMC_Init+0x98>)
 8000a5e:	f004 fa39 	bl	8004ed4 <HAL_SDRAM_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a68:	f000 f92a 	bl	8000cc0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200092f8 	.word	0x200092f8
 8000a78:	a0000140 	.word	0xa0000140

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
 8000a96:	4b7a      	ldr	r3, [pc, #488]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a79      	ldr	r2, [pc, #484]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b77      	ldr	r3, [pc, #476]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	623b      	str	r3, [r7, #32]
 8000aac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	4b73      	ldr	r3, [pc, #460]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a72      	ldr	r2, [pc, #456]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b70      	ldr	r3, [pc, #448]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0320 	and.w	r3, r3, #32
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	4b6c      	ldr	r3, [pc, #432]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a6b      	ldr	r2, [pc, #428]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b69      	ldr	r3, [pc, #420]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	4b65      	ldr	r3, [pc, #404]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a64      	ldr	r2, [pc, #400]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b62      	ldr	r3, [pc, #392]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b5e      	ldr	r3, [pc, #376]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a5d      	ldr	r2, [pc, #372]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a56      	ldr	r2, [pc, #344]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a4f      	ldr	r2, [pc, #316]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2116      	movs	r1, #22
 8000b76:	4843      	ldr	r0, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x208>)
 8000b78:	f001 fa1a 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	4841      	ldr	r0, [pc, #260]	; (8000c88 <MX_GPIO_Init+0x20c>)
 8000b82:	f001 fa15 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b8c:	483f      	ldr	r0, [pc, #252]	; (8000c8c <MX_GPIO_Init+0x210>)
 8000b8e:	f001 fa0f 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b98:	483d      	ldr	r0, [pc, #244]	; (8000c90 <MX_GPIO_Init+0x214>)
 8000b9a:	f001 fa09 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b9e:	2316      	movs	r3, #22
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4833      	ldr	r0, [pc, #204]	; (8000c84 <MX_GPIO_Init+0x208>)
 8000bb6:	f001 f851 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bba:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	482e      	ldr	r0, [pc, #184]	; (8000c88 <MX_GPIO_Init+0x20c>)
 8000bd0:	f001 f844 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4827      	ldr	r0, [pc, #156]	; (8000c88 <MX_GPIO_Init+0x20c>)
 8000bec:	f001 f836 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4820      	ldr	r0, [pc, #128]	; (8000c84 <MX_GPIO_Init+0x208>)
 8000c04:	f001 f82a 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481f      	ldr	r0, [pc, #124]	; (8000c98 <MX_GPIO_Init+0x21c>)
 8000c1c:	f001 f81e 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <MX_GPIO_Init+0x210>)
 8000c36:	f001 f811 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <MX_GPIO_Init+0x210>)
 8000c54:	f001 f802 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c58:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <MX_GPIO_Init+0x214>)
 8000c72:	f000 fff3 	bl	8001c5c <HAL_GPIO_Init>

}
 8000c76:	bf00      	nop
 8000c78:	3738      	adds	r7, #56	; 0x38
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	40021800 	.word	0x40021800
 8000c94:	10120000 	.word	0x10120000
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cae:	f000 fca7 	bl	8001600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_CRC_MspInit+0x3c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10d      	bne.n	8000d4e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_CRC_MspInit+0x40>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <HAL_CRC_MspInit+0x40>)
 8000d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <HAL_CRC_MspInit+0x40>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023000 	.word	0x40023000
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_DMA2D_MspInit+0x48>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d115      	bne.n	8000da2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_DMA2D_MspInit+0x4c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <HAL_DMA2D_MspInit+0x4c>)
 8000d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_DMA2D_MspInit+0x4c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2105      	movs	r1, #5
 8000d96:	205a      	movs	r0, #90	; 0x5a
 8000d98:	f000 fd2c 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d9c:	205a      	movs	r0, #90	; 0x5a
 8000d9e:	f000 fd45 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	4002b000 	.word	0x4002b000
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_I2C_MspInit+0xc4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d14b      	bne.n	8000e6e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e20:	2304      	movs	r3, #4
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <HAL_I2C_MspInit+0xcc>)
 8000e2c:	f000 ff16 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e36:	2312      	movs	r3, #18
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e42:	2304      	movs	r3, #4
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <HAL_I2C_MspInit+0xd0>)
 8000e4e:	f000 ff05 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40005c00 	.word	0x40005c00
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a7b      	ldr	r2, [pc, #492]	; (8001094 <HAL_LTDC_MspInit+0x20c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	f040 80f0 	bne.w	800108c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	4b79      	ldr	r3, [pc, #484]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	4a78      	ldr	r2, [pc, #480]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eba:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebc:	4b76      	ldr	r3, [pc, #472]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ec4:	623b      	str	r3, [r7, #32]
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	4b72      	ldr	r3, [pc, #456]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a71      	ldr	r2, [pc, #452]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b6f      	ldr	r3, [pc, #444]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0320 	and.w	r3, r3, #32
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a6a      	ldr	r2, [pc, #424]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef4:	4b68      	ldr	r3, [pc, #416]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	4b64      	ldr	r3, [pc, #400]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a63      	ldr	r2, [pc, #396]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b61      	ldr	r3, [pc, #388]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4a5c      	ldr	r2, [pc, #368]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b56      	ldr	r3, [pc, #344]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b53      	ldr	r3, [pc, #332]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <HAL_LTDC_MspInit+0x210>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f82:	230e      	movs	r3, #14
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4843      	ldr	r0, [pc, #268]	; (800109c <HAL_LTDC_MspInit+0x214>)
 8000f8e:	f000 fe65 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8000f92:	f641 0358 	movw	r3, #6232	; 0x1858
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa4:	230e      	movs	r3, #14
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	483c      	ldr	r0, [pc, #240]	; (80010a0 <HAL_LTDC_MspInit+0x218>)
 8000fb0:	f000 fe54 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fc4:	2309      	movs	r3, #9
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4835      	ldr	r0, [pc, #212]	; (80010a4 <HAL_LTDC_MspInit+0x21c>)
 8000fd0:	f000 fe44 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000fd4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fe6:	230e      	movs	r3, #14
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482c      	ldr	r0, [pc, #176]	; (80010a4 <HAL_LTDC_MspInit+0x21c>)
 8000ff2:	f000 fe33 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ff6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001008:	230e      	movs	r3, #14
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4825      	ldr	r0, [pc, #148]	; (80010a8 <HAL_LTDC_MspInit+0x220>)
 8001014:	f000 fe22 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001018:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800102a:	230e      	movs	r3, #14
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	481d      	ldr	r0, [pc, #116]	; (80010ac <HAL_LTDC_MspInit+0x224>)
 8001036:	f000 fe11 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800103a:	2348      	movs	r3, #72	; 0x48
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800104a:	230e      	movs	r3, #14
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <HAL_LTDC_MspInit+0x228>)
 8001056:	f000 fe01 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800105a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800106c:	2309      	movs	r3, #9
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	480c      	ldr	r0, [pc, #48]	; (80010a8 <HAL_LTDC_MspInit+0x220>)
 8001078:	f000 fdf0 	bl	8001c5c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2105      	movs	r1, #5
 8001080:	2058      	movs	r0, #88	; 0x58
 8001082:	f000 fbb7 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001086:	2058      	movs	r0, #88	; 0x58
 8001088:	f000 fbd0 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3738      	adds	r7, #56	; 0x38
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40016800 	.word	0x40016800
 8001098:	40023800 	.word	0x40023800
 800109c:	40021400 	.word	0x40021400
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_SPI_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12c      	bne.n	8001130 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_SPI_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800110e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001120:	2305      	movs	r3, #5
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 800112c:	f000 fd96 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40015000 	.word	0x40015000
 800113c:	40023800 	.word	0x40023800
 8001140:	40021400 	.word	0x40021400

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_TIM_Base_MspInit+0x3c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10d      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0x40>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0x40>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_TIM_Base_MspInit+0x40>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40010000 	.word	0x40010000
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_UART_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12c      	bne.n	8001204 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f4:	2307      	movs	r3, #7
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_UART_MspInit+0x8c>)
 8001200:	f000 fd2c 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40011000 	.word	0x40011000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800122c:	4b3b      	ldr	r3, [pc, #236]	; (800131c <HAL_FMC_MspInit+0x104>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d16f      	bne.n	8001314 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_FMC_MspInit+0x104>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b38      	ldr	r3, [pc, #224]	; (8001320 <HAL_FMC_MspInit+0x108>)
 8001240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001242:	4a37      	ldr	r2, [pc, #220]	; (8001320 <HAL_FMC_MspInit+0x108>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6393      	str	r3, [r2, #56]	; 0x38
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <HAL_FMC_MspInit+0x108>)
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8001256:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800125a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001268:	230c      	movs	r3, #12
 800126a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	482c      	ldr	r0, [pc, #176]	; (8001324 <HAL_FMC_MspInit+0x10c>)
 8001272:	f000 fcf3 	bl	8001c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001276:	2301      	movs	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4826      	ldr	r0, [pc, #152]	; (8001328 <HAL_FMC_MspInit+0x110>)
 8001290:	f000 fce4 	bl	8001c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8001294:	f248 1333 	movw	r3, #33075	; 0x8133
 8001298:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a6:	230c      	movs	r3, #12
 80012a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	481f      	ldr	r0, [pc, #124]	; (800132c <HAL_FMC_MspInit+0x114>)
 80012b0:	f000 fcd4 	bl	8001c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80012b4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80012b8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c6:	230c      	movs	r3, #12
 80012c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4818      	ldr	r0, [pc, #96]	; (8001330 <HAL_FMC_MspInit+0x118>)
 80012d0:	f000 fcc4 	bl	8001c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80012d4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80012d8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e6:	230c      	movs	r3, #12
 80012e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <HAL_FMC_MspInit+0x11c>)
 80012f0:	f000 fcb4 	bl	8001c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001304:	230c      	movs	r3, #12
 8001306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	480a      	ldr	r0, [pc, #40]	; (8001338 <HAL_FMC_MspInit+0x120>)
 800130e:	f000 fca5 	bl	8001c5c <HAL_GPIO_Init>
 8001312:	e000      	b.n	8001316 <HAL_FMC_MspInit+0xfe>
    return;
 8001314:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20001090 	.word	0x20001090
 8001320:	40023800 	.word	0x40023800
 8001324:	40021400 	.word	0x40021400
 8001328:	40020800 	.word	0x40020800
 800132c:	40021800 	.word	0x40021800
 8001330:	40021000 	.word	0x40021000
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001344:	f7ff ff68 	bl	8001218 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2036      	movs	r0, #54	; 0x36
 8001366:	f000 fa45 	bl	80017f4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800136a:	2036      	movs	r0, #54	; 0x36
 800136c:	f000 fa5e 	bl	800182c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_InitTick+0xa4>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_InitTick+0xa4>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_InitTick+0xa4>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138c:	f107 0210 	add.w	r2, r7, #16
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fbc6 	bl	8004b28 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800139c:	f003 fb9c 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 80013a0:	4603      	mov	r3, r0
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <HAL_InitTick+0xa8>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	3b01      	subs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_InitTick+0xac>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <HAL_InitTick+0xb0>)
 80013b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_InitTick+0xac>)
 80013bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_InitTick+0xac>)
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_InitTick+0xac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_InitTick+0xac>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <HAL_InitTick+0xac>)
 80013d6:	f003 fe15 	bl	8005004 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d104      	bne.n	80013ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <HAL_InitTick+0xac>)
 80013e2:	f003 fe3a 	bl	800505a <HAL_TIM_Base_Start_IT>
 80013e6:	4603      	mov	r3, r0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3730      	adds	r7, #48	; 0x30
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	431bde83 	.word	0x431bde83
 80013fc:	2000932c 	.word	0x2000932c
 8001400:	40001000 	.word	0x40001000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <TIM6_DAC_IRQHandler+0x10>)
 800145a:	f003 fe22 	bl	80050a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000932c 	.word	0x2000932c

08001468 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <OTG_HS_IRQHandler+0x10>)
 800146e:	f001 f83d 	bl	80024ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20009ae8 	.word	0x20009ae8

0800147c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <LTDC_IRQHandler+0x10>)
 8001482:	f002 fc89 	bl	8003d98 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20009190 	.word	0x20009190

08001490 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <DMA2D_IRQHandler+0x10>)
 8001496:	f000 fa3f 	bl	8001918 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200092b8 	.word	0x200092b8

080014a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x50>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x16>
		heap_end = &end;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <_sbrk+0x50>)
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <_sbrk+0x54>)
 80014b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <_sbrk+0x50>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <_sbrk+0x50>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	466a      	mov	r2, sp
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d907      	bls.n	80014de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ce:	f00b f891 	bl	800c5f4 <__errno>
 80014d2:	4602      	mov	r2, r0
 80014d4:	230c      	movs	r3, #12
 80014d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014dc:	e006      	b.n	80014ec <_sbrk+0x48>
	}

	heap_end += incr;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <_sbrk+0x50>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <_sbrk+0x50>)
 80014e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20001094 	.word	0x20001094
 80014f8:	20009db0 	.word	0x20009db0

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <SystemInit+0x60>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <SystemInit+0x60>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <SystemInit+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <SystemInit+0x64>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <SystemInit+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <SystemInit+0x64>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <SystemInit+0x64>)
 8001528:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800152c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <SystemInit+0x64>)
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <SystemInit+0x68>)
 8001536:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <SystemInit+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <SystemInit+0x64>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SystemInit+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SystemInit+0x60>)
 800154c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001550:	609a      	str	r2, [r3, #8]
#endif
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	40023800 	.word	0x40023800
 8001564:	24003010 	.word	0x24003010

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800156c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800156e:	e003      	b.n	8001578 <LoopCopyDataInit>

08001570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001576:	3104      	adds	r1, #4

08001578 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800157c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800157e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001580:	d3f6      	bcc.n	8001570 <CopyDataInit>
  ldr  r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001584:	e002      	b.n	800158c <LoopFillZerobss>

08001586 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001586:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001588:	f842 3b04 	str.w	r3, [r2], #4

0800158c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001590:	d3f9      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001592:	f7ff ffb3 	bl	80014fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f00b f833 	bl	800c600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7fe ffb9 	bl	8000510 <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015a0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80015a4:	0800fce0 	.word	0x0800fce0
  ldr  r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015ac:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 80015b0:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 80015b4:	20009db0 	.word	0x20009db0

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_Init+0x40>)
 80015c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_Init+0x40>)
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x40>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f8fa 	bl	80017de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff feb0 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fb6e 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000004 	.word	0x20000004
 8001624:	2000936c 	.word	0x2000936c

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	2000936c 	.word	0x2000936c

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_Delay+0x40>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000004 	.word	0x20000004

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff4c 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001806:	f7ff ff61 	bl	80016cc <__NVIC_GetPriorityGrouping>
 800180a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	6978      	ldr	r0, [r7, #20]
 8001812:	f7ff ffb1 	bl	8001778 <NVIC_EncodePriority>
 8001816:	4602      	mov	r2, r0
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff80 	bl	8001724 <__NVIC_SetPriority>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff54 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e011      	b.n	800187e <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	795b      	ldrb	r3, [r3, #5]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fa58 	bl	8000d20 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e03b      	b.n	8001910 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fa59 	bl	8000d64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2202      	movs	r2, #2
 80018b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	f023 0107 	bic.w	r1, r3, #7
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68d1      	ldr	r1, [r2, #12]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d026      	beq.n	8001988 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d021      	beq.n	8001988 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001952:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2204      	movs	r2, #4
 800196c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d026      	beq.n	80019e0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d021      	beq.n	80019e0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019aa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2220      	movs	r2, #32
 80019b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	f043 0202 	orr.w	r2, r3, #2
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2204      	movs	r2, #4
 80019c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d026      	beq.n	8001a38 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d021      	beq.n	8001a38 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a02:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a10:	f043 0204 	orr.w	r2, r3, #4
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d013      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00e      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2204      	movs	r2, #4
 8001a62:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f853 	bl	8001b10 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d024      	beq.n	8001abe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01f      	beq.n	8001abe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2202      	movs	r2, #2
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01f      	beq.n	8001b08 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d01a      	beq.n	8001b08 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f80e 	bl	8001b24 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_DMA2D_ConfigLayer+0x20>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e079      	b.n	8001c4c <HAL_DMA2D_ConfigLayer+0x114>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	041b      	lsls	r3, r3, #16
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_DMA2D_ConfigLayer+0x120>)
 8001b84:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b0a      	cmp	r3, #10
 8001b8c:	d003      	beq.n	8001b96 <HAL_DMA2D_ConfigLayer+0x5e>
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	d107      	bne.n	8001ba6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e005      	b.n	8001bb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	061b      	lsls	r3, r3, #24
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d120      	bne.n	8001bfa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	ea02 0103 	and.w	r1, r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d003      	beq.n	8001bea <HAL_DMA2D_ConfigLayer+0xb2>
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	d127      	bne.n	8001c3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf8:	e01f      	b.n	8001c3a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	ea02 0103 	and.w	r1, r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b0a      	cmp	r3, #10
 8001c22:	d003      	beq.n	8001c2c <HAL_DMA2D_ConfigLayer+0xf4>
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b09      	cmp	r3, #9
 8001c2a:	d106      	bne.n	8001c3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c38:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	ff03000f 	.word	0xff03000f

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e177      	b.n	8001f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8166 	bne.w	8001f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x4a>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	69b9      	ldr	r1, [r7, #24]
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d00b      	beq.n	8001d42 <HAL_GPIO_Init+0xe6>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d36:	2b11      	cmp	r3, #17
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b12      	cmp	r3, #18
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80c0 	beq.w	8001f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <HAL_GPIO_Init+0x320>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a64      	ldr	r2, [pc, #400]	; (8001f7c <HAL_GPIO_Init+0x320>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_GPIO_Init+0x320>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a60      	ldr	r2, [pc, #384]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a57      	ldr	r2, [pc, #348]	; (8001f84 <HAL_GPIO_Init+0x328>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d037      	beq.n	8001e9a <HAL_GPIO_Init+0x23e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a56      	ldr	r2, [pc, #344]	; (8001f88 <HAL_GPIO_Init+0x32c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d031      	beq.n	8001e96 <HAL_GPIO_Init+0x23a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a55      	ldr	r2, [pc, #340]	; (8001f8c <HAL_GPIO_Init+0x330>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02b      	beq.n	8001e92 <HAL_GPIO_Init+0x236>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a54      	ldr	r2, [pc, #336]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x232>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a53      	ldr	r2, [pc, #332]	; (8001f94 <HAL_GPIO_Init+0x338>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x22e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_GPIO_Init+0x33c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x22a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_GPIO_Init+0x340>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x226>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_GPIO_Init+0x344>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x222>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x348>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x21e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x34c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x21a>
 8001e72:	2309      	movs	r3, #9
 8001e74:	e012      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e76:	230a      	movs	r3, #10
 8001e78:	e010      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	e00e      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eac:	4934      	ldr	r1, [pc, #208]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ede:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f08:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f ae84 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3724      	adds	r7, #36	; 0x24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40021400 	.word	0x40021400
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40021c00 	.word	0x40021c00
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40022400 	.word	0x40022400
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe4:	b08f      	sub	sp, #60	; 0x3c
 8001fe6:	af0a      	add	r7, sp, #40	; 0x28
 8001fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e054      	b.n	800209e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f00a f840 	bl	800c094 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 ff6a 	bl	8005f0c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	687e      	ldr	r6, [r7, #4]
 8002040:	466d      	mov	r5, sp
 8002042:	f106 0410 	add.w	r4, r6, #16
 8002046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002052:	e885 0003 	stmia.w	r5, {r0, r1}
 8002056:	1d33      	adds	r3, r6, #4
 8002058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205a:	6838      	ldr	r0, [r7, #0]
 800205c:	f003 fee4 	bl	8005e28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f003 ff61 	bl	8005f2e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	687e      	ldr	r6, [r7, #4]
 8002074:	466d      	mov	r5, sp
 8002076:	f106 0410 	add.w	r4, r6, #16
 800207a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002082:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002086:	e885 0003 	stmia.w	r5, {r0, r1}
 800208a:	1d33      	adds	r3, r6, #4
 800208c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800208e:	6838      	ldr	r0, [r7, #0]
 8002090:	f004 f874 	bl	800617c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020a6:	b590      	push	{r4, r7, lr}
 80020a8:	b089      	sub	sp, #36	; 0x24
 80020aa:	af04      	add	r7, sp, #16
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	4608      	mov	r0, r1
 80020b0:	4611      	mov	r1, r2
 80020b2:	461a      	mov	r2, r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	70fb      	strb	r3, [r7, #3]
 80020b8:	460b      	mov	r3, r1
 80020ba:	70bb      	strb	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_HCD_HC_Init+0x28>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e07f      	b.n	80021ce <HAL_HCD_HC_Init+0x128>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	333d      	adds	r3, #61	; 0x3d
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	3338      	adds	r3, #56	; 0x38
 80020fa:	787a      	ldrb	r2, [r7, #1]
 80020fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3340      	adds	r3, #64	; 0x40
 800210e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002110:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	3339      	adds	r3, #57	; 0x39
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	333f      	adds	r3, #63	; 0x3f
 8002136:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800213a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	78bb      	ldrb	r3, [r7, #2]
 8002140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002144:	b2d8      	uxtb	r0, r3
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	333a      	adds	r3, #58	; 0x3a
 8002154:	4602      	mov	r2, r0
 8002156:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002158:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800215c:	2b00      	cmp	r3, #0
 800215e:	da0a      	bge.n	8002176 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	333b      	adds	r3, #59	; 0x3b
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e009      	b.n	800218a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	333b      	adds	r3, #59	; 0x3b
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	333c      	adds	r3, #60	; 0x3c
 800219a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800219e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	787c      	ldrb	r4, [r7, #1]
 80021a6:	78ba      	ldrb	r2, [r7, #2]
 80021a8:	78f9      	ldrb	r1, [r7, #3]
 80021aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4623      	mov	r3, r4
 80021bc:	f004 f960 	bl	8006480 <USB_HC_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}

080021d6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_HCD_HC_Halt+0x1e>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e00f      	b.n	8002214 <HAL_HCD_HC_Halt+0x3e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f004 fb9a 	bl	800693e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	70fb      	strb	r3, [r7, #3]
 800222e:	460b      	mov	r3, r1
 8002230:	70bb      	strb	r3, [r7, #2]
 8002232:	4613      	mov	r3, r2
 8002234:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	333b      	adds	r3, #59	; 0x3b
 8002246:	78ba      	ldrb	r2, [r7, #2]
 8002248:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	333f      	adds	r3, #63	; 0x3f
 800225a:	787a      	ldrb	r2, [r7, #1]
 800225c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800225e:	7c3b      	ldrb	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	3342      	adds	r3, #66	; 0x42
 8002274:	2203      	movs	r2, #3
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e009      	b.n	800228e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	3342      	adds	r3, #66	; 0x42
 800228a:	2202      	movs	r2, #2
 800228c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	2b03      	cmp	r3, #3
 8002292:	f200 80d6 	bhi.w	8002442 <HAL_HCD_HC_SubmitRequest+0x226>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_HCD_HC_SubmitRequest+0x80>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	0800242d 	.word	0x0800242d
 80022a4:	08002319 	.word	0x08002319
 80022a8:	080023a3 	.word	0x080023a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022ac:	7c3b      	ldrb	r3, [r7, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	f040 80c9 	bne.w	8002446 <HAL_HCD_HC_SubmitRequest+0x22a>
 80022b4:	78bb      	ldrb	r3, [r7, #2]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 80c5 	bne.w	8002446 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80022bc:	8b3b      	ldrh	r3, [r7, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3351      	adds	r3, #81	; 0x51
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	3351      	adds	r3, #81	; 0x51
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	3342      	adds	r3, #66	; 0x42
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002300:	e0a1      	b.n	8002446 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	3342      	adds	r3, #66	; 0x42
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
      break;
 8002316:	e096      	b.n	8002446 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002318:	78bb      	ldrb	r3, [r7, #2]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d120      	bne.n	8002360 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	3351      	adds	r3, #81	; 0x51
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	440b      	add	r3, r1
 8002342:	3342      	adds	r3, #66	; 0x42
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002348:	e07e      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3342      	adds	r3, #66	; 0x42
 800235a:	2202      	movs	r2, #2
 800235c:	701a      	strb	r2, [r3, #0]
      break;
 800235e:	e073      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3350      	adds	r3, #80	; 0x50
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	3342      	adds	r3, #66	; 0x42
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
      break;
 800238a:	e05d      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	3342      	adds	r3, #66	; 0x42
 800239c:	2202      	movs	r2, #2
 800239e:	701a      	strb	r2, [r3, #0]
      break;
 80023a0:	e052      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023a2:	78bb      	ldrb	r3, [r7, #2]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d120      	bne.n	80023ea <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3351      	adds	r3, #81	; 0x51
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	3342      	adds	r3, #66	; 0x42
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023d2:	e039      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	3342      	adds	r3, #66	; 0x42
 80023e4:	2202      	movs	r2, #2
 80023e6:	701a      	strb	r2, [r3, #0]
      break;
 80023e8:	e02e      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	3350      	adds	r3, #80	; 0x50
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	3342      	adds	r3, #66	; 0x42
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
      break;
 8002414:	e018      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3342      	adds	r3, #66	; 0x42
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]
      break;
 800242a:	e00d      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3342      	adds	r3, #66	; 0x42
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
      break;
 8002440:	e002      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002442:	bf00      	nop
 8002444:	e000      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002446:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3344      	adds	r3, #68	; 0x44
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	8b39      	ldrh	r1, [r7, #24]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4403      	add	r3, r0
 800246c:	3348      	adds	r3, #72	; 0x48
 800246e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	335c      	adds	r3, #92	; 0x5c
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	334c      	adds	r3, #76	; 0x4c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	3339      	adds	r3, #57	; 0x39
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	335d      	adds	r3, #93	; 0x5d
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	3338      	adds	r3, #56	; 0x38
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	18d1      	adds	r1, r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	f004 f8da 	bl	8006694 <USB_HC_StartXfer>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop

080024ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fdf7 	bl	80060f6 <USB_GetMode>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 80f1 	bne.w	80026f2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f003 fddb 	bl	80060d0 <USB_ReadInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80e7 	beq.w	80026f0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fdd2 	bl	80060d0 <USB_ReadInterrupts>
 800252c:	4603      	mov	r3, r0
 800252e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002536:	d104      	bne.n	8002542 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002540:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fdc2 	bl	80060d0 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002556:	d104      	bne.n	8002562 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002560:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fdb2 	bl	80060d0 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002576:	d104      	bne.n	8002582 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fda2 	bl	80060d0 <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d103      	bne.n	800259e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2202      	movs	r2, #2
 800259c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 fd94 	bl	80060d0 <USB_ReadInterrupts>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b2:	d117      	bne.n	80025e4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80025c2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025c6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f009 fddd 	bl	800c188 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fe8d 	bl	80062f4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 fd71 	bl	80060d0 <USB_ReadInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d102      	bne.n	8002600 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f001 f8c8 	bl	8003790 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fd63 	bl	80060d0 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d106      	bne.n	8002622 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f009 fd9b 	bl	800c150 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2208      	movs	r2, #8
 8002620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fd52 	bl	80060d0 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002636:	d138      	bne.n	80026aa <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f004 f96d 	bl	800691c <USB_HC_ReadInterrupt>
 8002642:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e025      	b.n	8002696 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d018      	beq.n	8002690 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002674:	d106      	bne.n	8002684 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f8cf 	bl	8002820 <HCD_HC_IN_IRQHandler>
 8002682:	e005      	b.n	8002690 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fc5f 	bl	8002f4e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3301      	adds	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	429a      	cmp	r2, r3
 800269e:	d3d4      	bcc.n	800264a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fd0e 	bl	80060d0 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d101      	bne.n	80026c2 <HAL_HCD_IRQHandler+0x1d6>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_HCD_IRQHandler+0x1d8>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d014      	beq.n	80026f2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0210 	bic.w	r2, r2, #16
 80026d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 ffad 	bl	8003638 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0210 	orr.w	r2, r2, #16
 80026ec:	619a      	str	r2, [r3, #24]
 80026ee:	e000      	b.n	80026f2 <HAL_HCD_IRQHandler+0x206>
      return;
 80026f0:	bf00      	nop
    }
  }
}
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_HCD_Start+0x16>
 800270a:	2302      	movs	r3, #2
 800270c:	e013      	b.n	8002736 <HAL_HCD_Start+0x3e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fbe5 	bl	8005eea <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fe48 	bl	80063bc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_HCD_Stop+0x16>
 8002750:	2302      	movs	r3, #2
 8002752:	e00d      	b.n	8002770 <HAL_HCD_Stop+0x32>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f004 fa27 	bl	8006bb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fdef 	bl	8006368 <USB_ResetPort>
 800278a:	4603      	mov	r3, r0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	335c      	adds	r3, #92	; 0x5c
 80027b0:	781b      	ldrb	r3, [r3, #0]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	334c      	adds	r3, #76	; 0x4c
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fe31 	bl	800645c <USB_GetCurrentFrame>
 80027fa:	4603      	mov	r3, r0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f003 fe0c 	bl	800642e <USB_GetHostSpeed>
 8002816:	4603      	mov	r3, r0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d119      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	461a      	mov	r2, r3
 800285e:	2304      	movs	r3, #4
 8002860:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	0151      	lsls	r1, r2, #5
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	440a      	add	r2, r1
 8002878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	60d3      	str	r3, [r2, #12]
 8002882:	e095      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d109      	bne.n	80028ae <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	2320      	movs	r3, #32
 80028aa:	6093      	str	r3, [r2, #8]
 80028ac:	e080      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d134      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	0151      	lsls	r1, r2, #5
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	440a      	add	r2, r1
 80028da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	335d      	adds	r3, #93	; 0x5d
 80028f4:	2205      	movs	r2, #5
 80028f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	2308      	movs	r3, #8
 800291a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f004 f809 	bl	800693e <USB_HC_Halt>
 800292c:	e040      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002944:	d134      	bne.n	80029b0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	0151      	lsls	r1, r2, #5
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	440a      	add	r2, r1
 800295c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f003 ffe4 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2310      	movs	r3, #16
 8002986:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	335d      	adds	r3, #93	; 0x5d
 8002998:	2208      	movs	r2, #8
 800299a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ae:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c6:	d122      	bne.n	8002a0e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	0151      	lsls	r1, r2, #5
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	440a      	add	r2, r1
 80029de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 ffa3 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	461a      	mov	r2, r3
 8002a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a0c:	e29b      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	f040 80c1 	bne.w	8002ba8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01b      	beq.n	8002a66 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3348      	adds	r3, #72	; 0x48
 8002a3e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	0159      	lsls	r1, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a52:	1ad1      	subs	r1, r2, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4403      	add	r3, r0
 8002a62:	334c      	adds	r3, #76	; 0x4c
 8002a64:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	335d      	adds	r3, #93	; 0x5d
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	3358      	adds	r3, #88	; 0x58
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	333f      	adds	r3, #63	; 0x3f
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	333f      	adds	r3, #63	; 0x3f
 8002ac6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d121      	bne.n	8002b10 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 ff21 	bl	800693e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	6093      	str	r3, [r2, #8]
 8002b0e:	e034      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333f      	adds	r3, #63	; 0x3f
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d129      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	0151      	lsls	r1, r2, #5
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	440a      	add	r2, r1
 8002b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b44:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	335c      	adds	r3, #92	; 0x5c
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	b2d8      	uxtb	r0, r3
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	335c      	adds	r3, #92	; 0x5c
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4601      	mov	r1, r0
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f009 fb15 	bl	800c1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	3350      	adds	r3, #80	; 0x50
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	f083 0301 	eor.w	r3, r3, #1
 8002b90:	b2d8      	uxtb	r0, r3
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3350      	adds	r3, #80	; 0x50
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	701a      	strb	r2, [r3, #0]
}
 8002ba6:	e1ce      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	f040 80f1 	bne.w	8002da2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	0151      	lsls	r1, r2, #5
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bda:	f023 0302 	bic.w	r3, r3, #2
 8002bde:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	335d      	adds	r3, #93	; 0x5d
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10a      	bne.n	8002c0c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	335c      	adds	r3, #92	; 0x5c
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e0b0      	b.n	8002d6e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	335d      	adds	r3, #93	; 0x5d
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d10a      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	335c      	adds	r3, #92	; 0x5c
 8002c32:	2205      	movs	r2, #5
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e09a      	b.n	8002d6e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	335d      	adds	r3, #93	; 0x5d
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d00a      	beq.n	8002c64 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	335d      	adds	r3, #93	; 0x5d
 8002c5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d156      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	3358      	adds	r3, #88	; 0x58
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1c59      	adds	r1, r3, #1
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4403      	add	r3, r0
 8002c86:	3358      	adds	r3, #88	; 0x58
 8002c88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	3358      	adds	r3, #88	; 0x58
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d914      	bls.n	8002cca <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	3358      	adds	r3, #88	; 0x58
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	335c      	adds	r3, #92	; 0x5c
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e009      	b.n	8002cde <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	335c      	adds	r3, #92	; 0x5c
 8002cda:	2202      	movs	r2, #2
 8002cdc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cf4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cfc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	e02d      	b.n	8002d6e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	335d      	adds	r3, #93	; 0x5d
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d122      	bne.n	8002d6e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	2202      	movs	r2, #2
 8002d3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	b2d8      	uxtb	r0, r3
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	335c      	adds	r3, #92	; 0x5c
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4601      	mov	r1, r0
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f009 fa02 	bl	800c1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002da0:	e0d1      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d13e      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	0151      	lsls	r1, r2, #5
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	440a      	add	r2, r1
 8002dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3358      	adds	r3, #88	; 0x58
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1c59      	adds	r1, r3, #1
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4403      	add	r3, r0
 8002dfa:	3358      	adds	r3, #88	; 0x58
 8002dfc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	335d      	adds	r3, #93	; 0x5d
 8002e0e:	2206      	movs	r2, #6
 8002e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fd8e 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	6093      	str	r3, [r2, #8]
}
 8002e34:	e087      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d17c      	bne.n	8002f46 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	333f      	adds	r3, #63	; 0x3f
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d122      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3358      	adds	r3, #88	; 0x58
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 fd4c 	bl	800693e <USB_HC_Halt>
 8002ea6:	e045      	b.n	8002f34 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333f      	adds	r3, #63	; 0x3f
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	333f      	adds	r3, #63	; 0x3f
 8002ece:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d12f      	bne.n	8002f34 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3358      	adds	r3, #88	; 0x58
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d121      	bne.n	8002f34 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	335d      	adds	r3, #93	; 0x5d
 8002f00:	2203      	movs	r2, #3
 8002f02:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	0151      	lsls	r1, r2, #5
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	440a      	add	r2, r1
 8002f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fd05 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2310      	movs	r3, #16
 8002f44:	6093      	str	r3, [r2, #8]
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d119      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	0151      	lsls	r1, r2, #5
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	440a      	add	r2, r1
 8002fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002fb0:	e33e      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d141      	bne.n	800304c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	333d      	adds	r3, #61	; 0x3d
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 831f 	bne.w	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	333d      	adds	r3, #61	; 0x3d
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	335c      	adds	r3, #92	; 0x5c
 8003016:	2202      	movs	r2, #2
 8003018:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	0151      	lsls	r1, r2, #5
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	440a      	add	r2, r1
 8003030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f003 fc7a 	bl	800693e <USB_HC_Halt>
}
 800304a:	e2f1      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d13f      	bne.n	80030e2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	335d      	adds	r3, #93	; 0x5d
 8003072:	2204      	movs	r2, #4
 8003074:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	333d      	adds	r3, #61	; 0x3d
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	3358      	adds	r3, #88	; 0x58
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	0151      	lsls	r1, r2, #5
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	440a      	add	r2, r1
 80030b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fc38 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	2340      	movs	r3, #64	; 0x40
 80030de:	6093      	str	r3, [r2, #8]
}
 80030e0:	e2a6      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f8:	d122      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	0151      	lsls	r1, r2, #5
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	440a      	add	r2, r1
 8003110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f003 fc0a 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313c:	6093      	str	r3, [r2, #8]
}
 800313e:	e277      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d135      	bne.n	80031c2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3358      	adds	r3, #88	; 0x58
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	0151      	lsls	r1, r2, #5
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	440a      	add	r2, r1
 8003180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fbd2 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2301      	movs	r3, #1
 80031aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	335d      	adds	r3, #93	; 0x5d
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
}
 80031c0:	e236      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d12b      	bne.n	8003230 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	461a      	mov	r2, r3
 80031e6:	2308      	movs	r3, #8
 80031e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	0151      	lsls	r1, r2, #5
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	440a      	add	r2, r1
 8003200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fb92 	bl	800693e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	335d      	adds	r3, #93	; 0x5d
 800322a:	2205      	movs	r2, #5
 800322c:	701a      	strb	r2, [r3, #0]
}
 800322e:	e1ff      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b10      	cmp	r3, #16
 8003244:	d155      	bne.n	80032f2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	3358      	adds	r3, #88	; 0x58
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	335d      	adds	r3, #93	; 0x5d
 800326a:	2203      	movs	r2, #3
 800326c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	440b      	add	r3, r1
 800327c:	333d      	adds	r3, #61	; 0x3d
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d114      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	333c      	adds	r3, #60	; 0x3c
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	333d      	adds	r3, #61	; 0x3d
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	0151      	lsls	r1, r2, #5
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	440a      	add	r2, r1
 80032c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fb30 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	461a      	mov	r2, r3
 80032ec:	2310      	movs	r3, #16
 80032ee:	6093      	str	r3, [r2, #8]
}
 80032f0:	e19e      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d12b      	bne.n	8003360 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	0151      	lsls	r1, r2, #5
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	440a      	add	r2, r1
 800331e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f003 fb03 	bl	800693e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	440b      	add	r3, r1
 8003346:	335d      	adds	r3, #93	; 0x5d
 8003348:	2206      	movs	r2, #6
 800334a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	6093      	str	r3, [r2, #8]
}
 800335e:	e167      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d135      	bne.n	80033e4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	0151      	lsls	r1, r2, #5
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	440a      	add	r2, r1
 800338e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f003 facb 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	2310      	movs	r3, #16
 80033b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	461a      	mov	r2, r3
 80033c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	335d      	adds	r3, #93	; 0x5d
 80033de:	2208      	movs	r2, #8
 80033e0:	701a      	strb	r2, [r3, #0]
}
 80033e2:	e125      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	f040 811a 	bne.w	8003630 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	440a      	add	r2, r1
 8003412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003416:	f023 0302 	bic.w	r3, r3, #2
 800341a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	335d      	adds	r3, #93	; 0x5d
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d137      	bne.n	80034a2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	335c      	adds	r3, #92	; 0x5c
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	333f      	adds	r3, #63	; 0x3f
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d00b      	beq.n	8003474 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	333f      	adds	r3, #63	; 0x3f
 800346c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800346e:	2b03      	cmp	r3, #3
 8003470:	f040 80c5 	bne.w	80035fe <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	3351      	adds	r3, #81	; 0x51
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f083 0301 	eor.w	r3, r3, #1
 800348a:	b2d8      	uxtb	r0, r3
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	3351      	adds	r3, #81	; 0x51
 800349c:	4602      	mov	r2, r0
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e0ad      	b.n	80035fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	335d      	adds	r3, #93	; 0x5d
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d10a      	bne.n	80034ce <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	2202      	movs	r2, #2
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e097      	b.n	80035fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	335d      	adds	r3, #93	; 0x5d
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d10a      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	335c      	adds	r3, #92	; 0x5c
 80034f4:	2202      	movs	r2, #2
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e081      	b.n	80035fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	335d      	adds	r3, #93	; 0x5d
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b05      	cmp	r3, #5
 800350e:	d10a      	bne.n	8003526 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	335c      	adds	r3, #92	; 0x5c
 8003520:	2205      	movs	r2, #5
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	e06b      	b.n	80035fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	335d      	adds	r3, #93	; 0x5d
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b06      	cmp	r3, #6
 800353a:	d00a      	beq.n	8003552 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	335d      	adds	r3, #93	; 0x5d
 800354c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800354e:	2b08      	cmp	r3, #8
 8003550:	d155      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	3358      	adds	r3, #88	; 0x58
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1c59      	adds	r1, r3, #1
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4403      	add	r3, r0
 8003574:	3358      	adds	r3, #88	; 0x58
 8003576:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	3358      	adds	r3, #88	; 0x58
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d914      	bls.n	80035b8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3358      	adds	r3, #88	; 0x58
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	335c      	adds	r3, #92	; 0x5c
 80035b2:	2204      	movs	r2, #4
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e009      	b.n	80035cc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	335c      	adds	r3, #92	; 0x5c
 80035c8:	2202      	movs	r2, #2
 80035ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	2302      	movs	r3, #2
 800360e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	b2d8      	uxtb	r0, r3
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	335c      	adds	r3, #92	; 0x5c
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4601      	mov	r1, r0
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f008 fdba 	bl	800c1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003630:	bf00      	nop
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	0c5b      	lsrs	r3, r3, #17
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800366c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d003      	beq.n	800367c <HCD_RXQLVL_IRQHandler+0x44>
 8003674:	2b05      	cmp	r3, #5
 8003676:	f000 8082 	beq.w	800377e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800367a:	e083      	b.n	8003784 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d07f      	beq.n	8003782 <HCD_RXQLVL_IRQHandler+0x14a>
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	3344      	adds	r3, #68	; 0x44
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d074      	beq.n	8003782 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	440b      	add	r3, r1
 80036aa:	3344      	adds	r3, #68	; 0x44
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	b292      	uxth	r2, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	f002 fce3 	bl	800607e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	3344      	adds	r3, #68	; 0x44
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	18d1      	adds	r1, r2, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4403      	add	r3, r0
 80036dc:	3344      	adds	r3, #68	; 0x44
 80036de:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	440b      	add	r3, r1
 80036ee:	334c      	adds	r3, #76	; 0x4c
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	18d1      	adds	r1, r2, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4403      	add	r3, r0
 8003704:	334c      	adds	r3, #76	; 0x4c
 8003706:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HCD_RXQLVL_IRQHandler+0x154>)
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d031      	beq.n	8003782 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003734:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800373c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	3350      	adds	r3, #80	; 0x50
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f083 0301 	eor.w	r3, r3, #1
 8003766:	b2d8      	uxtb	r0, r3
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	3350      	adds	r3, #80	; 0x50
 8003778:	4602      	mov	r2, r0
 800377a:	701a      	strb	r2, [r3, #0]
      break;
 800377c:	e001      	b.n	8003782 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003782:	bf00      	nop
  }
}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	1ff80000 	.word	0x1ff80000

08003790 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d113      	bne.n	80037f0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10a      	bne.n	80037e8 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80037e0:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f008 fcc2 	bl	800c16c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d147      	bne.n	800388a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f043 0308 	orr.w	r3, r3, #8
 8003800:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d129      	bne.n	8003860 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d113      	bne.n	800383c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800381a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800381e:	d106      	bne.n	800382e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2102      	movs	r1, #2
 8003826:	4618      	mov	r0, r3
 8003828:	f002 fd64 	bl	80062f4 <USB_InitFSLSPClkSel>
 800382c:	e011      	b.n	8003852 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2101      	movs	r1, #1
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fd5d 	bl	80062f4 <USB_InitFSLSPClkSel>
 800383a:	e00a      	b.n	8003852 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800384a:	461a      	mov	r2, r3
 800384c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003850:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f008 fcb4 	bl	800c1c0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f008 fc87 	bl	800c16c <HAL_HCD_Connect_Callback>
 800385e:	e014      	b.n	800388a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f008 fcbb 	bl	800c1dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003874:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003878:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003888:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d103      	bne.n	800389c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e10f      	b.n	8003ae2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fa6c 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038f4:	f001 f8f0 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a7b      	ldr	r2, [pc, #492]	; (8003aec <HAL_I2C_Init+0x23c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d807      	bhi.n	8003914 <HAL_I2C_Init+0x64>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a7a      	ldr	r2, [pc, #488]	; (8003af0 <HAL_I2C_Init+0x240>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e006      	b.n	8003922 <HAL_I2C_Init+0x72>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a77      	ldr	r2, [pc, #476]	; (8003af4 <HAL_I2C_Init+0x244>)
 8003918:	4293      	cmp	r3, r2
 800391a:	bf94      	ite	ls
 800391c:	2301      	movls	r3, #1
 800391e:	2300      	movhi	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0db      	b.n	8003ae2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <HAL_I2C_Init+0x248>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a64      	ldr	r2, [pc, #400]	; (8003aec <HAL_I2C_Init+0x23c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d802      	bhi.n	8003964 <HAL_I2C_Init+0xb4>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3301      	adds	r3, #1
 8003962:	e009      	b.n	8003978 <HAL_I2C_Init+0xc8>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	4a63      	ldr	r2, [pc, #396]	; (8003afc <HAL_I2C_Init+0x24c>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	3301      	adds	r3, #1
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	430b      	orrs	r3, r1
 800397e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800398a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4956      	ldr	r1, [pc, #344]	; (8003aec <HAL_I2C_Init+0x23c>)
 8003994:	428b      	cmp	r3, r1
 8003996:	d80d      	bhi.n	80039b4 <HAL_I2C_Init+0x104>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e59      	subs	r1, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	bf38      	it	cc
 80039b0:	2304      	movcc	r3, #4
 80039b2:	e04f      	b.n	8003a54 <HAL_I2C_Init+0x1a4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d111      	bne.n	80039e0 <HAL_I2C_Init+0x130>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e58      	subs	r0, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e012      	b.n	8003a06 <HAL_I2C_Init+0x156>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1e58      	subs	r0, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	0099      	lsls	r1, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Init+0x15e>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e022      	b.n	8003a54 <HAL_I2C_Init+0x1a4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10e      	bne.n	8003a34 <HAL_I2C_Init+0x184>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1e58      	subs	r0, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	440b      	add	r3, r1
 8003a24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a32:	e00f      	b.n	8003a54 <HAL_I2C_Init+0x1a4>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	0099      	lsls	r1, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	6809      	ldr	r1, [r1, #0]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6911      	ldr	r1, [r2, #16]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68d2      	ldr	r2, [r2, #12]
 8003a8e:	4311      	orrs	r1, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	000186a0 	.word	0x000186a0
 8003af0:	001e847f 	.word	0x001e847f
 8003af4:	003d08ff 	.word	0x003d08ff
 8003af8:	431bde83 	.word	0x431bde83
 8003afc:	10624dd3 	.word	0x10624dd3

08003b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d129      	bne.n	8003b6a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2224      	movs	r2, #36	; 0x24
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0210 	bic.w	r2, r2, #16
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d12a      	bne.n	8003be8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	; 0x24
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bb2:	89fb      	ldrh	r3, [r7, #14]
 8003bb4:	f023 030f 	bic.w	r3, r3, #15
 8003bb8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	89fa      	ldrh	r2, [r7, #14]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0bf      	b.n	8003d8a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f932 	bl	8000e88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c3a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6899      	ldr	r1, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_LTDC_Init+0x19c>)
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68d9      	ldr	r1, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_LTDC_Init+0x19c>)
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68d9      	ldr	r1, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6919      	ldr	r1, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_LTDC_Init+0x19c>)
 8003cc8:	400b      	ands	r3, r1
 8003cca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6919      	ldr	r1, [r3, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6959      	ldr	r1, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_LTDC_Init+0x19c>)
 8003cf6:	400b      	ands	r3, r1
 8003cf8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6959      	ldr	r1, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0206 	orr.w	r2, r2, #6
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	f000f800 	.word	0xf000f800

08003d98 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d023      	beq.n	8003e02 <HAL_LTDC_IRQHandler+0x6a>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01e      	beq.n	8003e02 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0204 	bic.w	r2, r2, #4
 8003dd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2204      	movs	r2, #4
 8003df0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f86f 	bl	8003ee0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d023      	beq.n	8003e54 <HAL_LTDC_IRQHandler+0xbc>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01e      	beq.n	8003e54 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0202 	bic.w	r2, r2, #2
 8003e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e34:	f043 0202 	orr.w	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f846 	bl	8003ee0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01b      	beq.n	8003e96 <HAL_LTDC_IRQHandler+0xfe>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d016      	beq.n	8003e96 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f82f 	bl	8003ef4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01b      	beq.n	8003ed8 <HAL_LTDC_IRQHandler+0x140>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f818 	bl	8003f08 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_LTDC_ConfigLayer+0x1a>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e02c      	b.n	8003f90 <HAL_LTDC_ConfigLayer+0x74>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2134      	movs	r1, #52	; 0x34
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4614      	mov	r4, r2
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f811 	bl	8003f98 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bdb0      	pop	{r4, r5, r7, pc}

08003f98 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	0c1b      	lsrs	r3, r3, #16
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	4413      	add	r3, r2
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	01db      	lsls	r3, r3, #7
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3384      	adds	r3, #132	; 0x84
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	4611      	mov	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	01d2      	lsls	r2, r2, #7
 8003fd4:	440a      	add	r2, r1
 8003fd6:	3284      	adds	r2, #132	; 0x84
 8003fd8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fdc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fee:	4413      	add	r3, r2
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	01db      	lsls	r3, r3, #7
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3384      	adds	r3, #132	; 0x84
 8004000:	4619      	mov	r1, r3
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4313      	orrs	r3, r2
 8004006:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004016:	4413      	add	r3, r2
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	01db      	lsls	r3, r3, #7
 8004026:	4413      	add	r3, r2
 8004028:	3384      	adds	r3, #132	; 0x84
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	4611      	mov	r1, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	01d2      	lsls	r2, r2, #7
 8004036:	440a      	add	r2, r1
 8004038:	3284      	adds	r2, #132	; 0x84
 800403a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800403e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800404e:	4413      	add	r3, r2
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	01db      	lsls	r3, r3, #7
 800405c:	440b      	add	r3, r1
 800405e:	3384      	adds	r3, #132	; 0x84
 8004060:	4619      	mov	r1, r3
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	01db      	lsls	r3, r3, #7
 8004072:	4413      	add	r3, r2
 8004074:	3384      	adds	r3, #132	; 0x84
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	4611      	mov	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	01d2      	lsls	r2, r2, #7
 8004082:	440a      	add	r2, r1
 8004084:	3284      	adds	r2, #132	; 0x84
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	01db      	lsls	r3, r3, #7
 8004096:	4413      	add	r3, r2
 8004098:	3384      	adds	r3, #132	; 0x84
 800409a:	461a      	mov	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	3384      	adds	r3, #132	; 0x84
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4413      	add	r3, r2
 80040da:	3384      	adds	r3, #132	; 0x84
 80040dc:	461a      	mov	r2, r3
 80040de:	2300      	movs	r3, #0
 80040e0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040e8:	461a      	mov	r2, r3
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4619      	mov	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	440b      	add	r3, r1
 80040fe:	3384      	adds	r3, #132	; 0x84
 8004100:	4619      	mov	r1, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	01db      	lsls	r3, r3, #7
 8004112:	4413      	add	r3, r2
 8004114:	3384      	adds	r3, #132	; 0x84
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	4611      	mov	r1, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	01d2      	lsls	r2, r2, #7
 8004122:	440a      	add	r2, r1
 8004124:	3284      	adds	r2, #132	; 0x84
 8004126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800412a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	01db      	lsls	r3, r3, #7
 8004136:	4413      	add	r3, r2
 8004138:	3384      	adds	r3, #132	; 0x84
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	01db      	lsls	r3, r3, #7
 800414c:	4413      	add	r3, r2
 800414e:	3384      	adds	r3, #132	; 0x84
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	4611      	mov	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	01d2      	lsls	r2, r2, #7
 800415c:	440a      	add	r2, r1
 800415e:	3284      	adds	r2, #132	; 0x84
 8004160:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004164:	f023 0307 	bic.w	r3, r3, #7
 8004168:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	6809      	ldr	r1, [r1, #0]
 8004176:	4608      	mov	r0, r1
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	01c9      	lsls	r1, r1, #7
 800417c:	4401      	add	r1, r0
 800417e:	3184      	adds	r1, #132	; 0x84
 8004180:	4313      	orrs	r3, r2
 8004182:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	01db      	lsls	r3, r3, #7
 800418e:	4413      	add	r3, r2
 8004190:	3384      	adds	r3, #132	; 0x84
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	01db      	lsls	r3, r3, #7
 800419e:	4413      	add	r3, r2
 80041a0:	3384      	adds	r3, #132	; 0x84
 80041a2:	461a      	mov	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	01db      	lsls	r3, r3, #7
 80041b2:	4413      	add	r3, r2
 80041b4:	3384      	adds	r3, #132	; 0x84
 80041b6:	461a      	mov	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80041c6:	2304      	movs	r3, #4
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e01b      	b.n	8004204 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d102      	bne.n	80041da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80041d4:	2303      	movs	r3, #3
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e014      	b.n	8004204 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d00b      	beq.n	80041fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d007      	beq.n	80041fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d003      	beq.n	80041fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041f6:	2b07      	cmp	r3, #7
 80041f8:	d102      	bne.n	8004200 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041fa:	2302      	movs	r3, #2
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e001      	b.n	8004204 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004200:	2301      	movs	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	01db      	lsls	r3, r3, #7
 800420e:	4413      	add	r3, r2
 8004210:	3384      	adds	r3, #132	; 0x84
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	4611      	mov	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	01d2      	lsls	r2, r2, #7
 800421e:	440a      	add	r2, r1
 8004220:	3284      	adds	r2, #132	; 0x84
 8004222:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004226:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	041a      	lsls	r2, r3, #16
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	1acb      	subs	r3, r1, r3
 800423e:	69f9      	ldr	r1, [r7, #28]
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	3303      	adds	r3, #3
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	6809      	ldr	r1, [r1, #0]
 800424a:	4608      	mov	r0, r1
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	01c9      	lsls	r1, r1, #7
 8004250:	4401      	add	r1, r0
 8004252:	3184      	adds	r1, #132	; 0x84
 8004254:	4313      	orrs	r3, r2
 8004256:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	01db      	lsls	r3, r3, #7
 8004262:	4413      	add	r3, r2
 8004264:	3384      	adds	r3, #132	; 0x84
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	4611      	mov	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	01d2      	lsls	r2, r2, #7
 8004272:	440a      	add	r2, r1
 8004274:	3284      	adds	r2, #132	; 0x84
 8004276:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800427a:	f023 0307 	bic.w	r3, r3, #7
 800427e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	01db      	lsls	r3, r3, #7
 800428a:	4413      	add	r3, r2
 800428c:	3384      	adds	r3, #132	; 0x84
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	01db      	lsls	r3, r3, #7
 80042a0:	4413      	add	r3, r2
 80042a2:	3384      	adds	r3, #132	; 0x84
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	4611      	mov	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	01d2      	lsls	r2, r2, #7
 80042b0:	440a      	add	r2, r1
 80042b2:	3284      	adds	r2, #132	; 0x84
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6013      	str	r3, [r2, #0]
}
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e22d      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d075      	beq.n	80043d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e6:	4ba3      	ldr	r3, [pc, #652]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d00c      	beq.n	800430c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4ba0      	ldr	r3, [pc, #640]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d112      	bne.n	8004324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fe:	4b9d      	ldr	r3, [pc, #628]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430a:	d10b      	bne.n	8004324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	4b99      	ldr	r3, [pc, #612]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05b      	beq.n	80043d0 <HAL_RCC_OscConfig+0x108>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d157      	bne.n	80043d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e208      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432c:	d106      	bne.n	800433c <HAL_RCC_OscConfig+0x74>
 800432e:	4b91      	ldr	r3, [pc, #580]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a90      	ldr	r2, [pc, #576]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e01d      	b.n	8004378 <HAL_RCC_OscConfig+0xb0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0x98>
 8004346:	4b8b      	ldr	r3, [pc, #556]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a8a      	ldr	r2, [pc, #552]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b88      	ldr	r3, [pc, #544]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a87      	ldr	r2, [pc, #540]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e00b      	b.n	8004378 <HAL_RCC_OscConfig+0xb0>
 8004360:	4b84      	ldr	r3, [pc, #528]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a83      	ldr	r2, [pc, #524]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b81      	ldr	r3, [pc, #516]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a80      	ldr	r2, [pc, #512]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d013      	beq.n	80043a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fd f952 	bl	8001628 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004388:	f7fd f94e 	bl	8001628 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e1cd      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0xc0>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fd f93e 	bl	8001628 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fd f93a 	bl	8001628 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1b9      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	4b6c      	ldr	r3, [pc, #432]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0xe8>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d063      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043de:	4b65      	ldr	r3, [pc, #404]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b62      	ldr	r3, [pc, #392]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d11c      	bne.n	8004430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f6:	4b5f      	ldr	r3, [pc, #380]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	4b5c      	ldr	r3, [pc, #368]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_RCC_OscConfig+0x152>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e18d      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441a:	4b56      	ldr	r3, [pc, #344]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4952      	ldr	r1, [pc, #328]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	e03a      	b.n	80044a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004438:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <HAL_RCC_OscConfig+0x2b0>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fd f8f3 	bl	8001628 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004446:	f7fd f8ef 	bl	8001628 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e16e      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004464:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4940      	ldr	r1, [pc, #256]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e015      	b.n	80044a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447a:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <HAL_RCC_OscConfig+0x2b0>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd f8d2 	bl	8001628 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004488:	f7fd f8ce 	bl	8001628 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e14d      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	4b36      	ldr	r3, [pc, #216]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d030      	beq.n	8004514 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ba:	4b30      	ldr	r3, [pc, #192]	; (800457c <HAL_RCC_OscConfig+0x2b4>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd f8b2 	bl	8001628 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fd f8ae 	bl	8001628 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e12d      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x200>
 80044e6:	e015      	b.n	8004514 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e8:	4b24      	ldr	r3, [pc, #144]	; (800457c <HAL_RCC_OscConfig+0x2b4>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7fd f89b 	bl	8001628 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fd f897 	bl	8001628 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e116      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a0 	beq.w	8004662 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_OscConfig+0x2b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d121      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <HAL_RCC_OscConfig+0x2b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a07      	ldr	r2, [pc, #28]	; (8004580 <HAL_RCC_OscConfig+0x2b8>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fd f85d 	bl	8001628 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e011      	b.n	8004596 <HAL_RCC_OscConfig+0x2ce>
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	42470000 	.word	0x42470000
 800457c:	42470e80 	.word	0x42470e80
 8004580:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004584:	f7fd f850 	bl	8001628 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e0cf      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	4b6a      	ldr	r3, [pc, #424]	; (8004740 <HAL_RCC_OscConfig+0x478>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2f0>
 80045aa:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a65      	ldr	r2, [pc, #404]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	e01c      	b.n	80045f2 <HAL_RCC_OscConfig+0x32a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d10c      	bne.n	80045da <HAL_RCC_OscConfig+0x312>
 80045c0:	4b60      	ldr	r3, [pc, #384]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a5f      	ldr	r2, [pc, #380]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	4b5d      	ldr	r3, [pc, #372]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a5c      	ldr	r2, [pc, #368]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
 80045d8:	e00b      	b.n	80045f2 <HAL_RCC_OscConfig+0x32a>
 80045da:	4b5a      	ldr	r3, [pc, #360]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	4a59      	ldr	r2, [pc, #356]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6713      	str	r3, [r2, #112]	; 0x70
 80045e6:	4b57      	ldr	r3, [pc, #348]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a56      	ldr	r2, [pc, #344]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d015      	beq.n	8004626 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fa:	f7fd f815 	bl	8001628 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	e00a      	b.n	8004618 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fd f811 	bl	8001628 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e08e      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ee      	beq.n	8004602 <HAL_RCC_OscConfig+0x33a>
 8004624:	e014      	b.n	8004650 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004626:	f7fc ffff 	bl	8001628 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fc fffb 	bl	8001628 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e078      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004644:	4b3f      	ldr	r3, [pc, #252]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ee      	bne.n	800462e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a3a      	ldr	r2, [pc, #232]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 800465c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d064      	beq.n	8004734 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b08      	cmp	r3, #8
 8004674:	d05c      	beq.n	8004730 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d141      	bne.n	8004702 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_RCC_OscConfig+0x480>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fc ffd0 	bl	8001628 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468c:	f7fc ffcc 	bl	8001628 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04b      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	4b29      	ldr	r3, [pc, #164]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	3b01      	subs	r3, #1
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	491d      	ldr	r1, [pc, #116]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d4:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <HAL_RCC_OscConfig+0x480>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fc ffa5 	bl	8001628 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fc ffa1 	bl	8001628 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e020      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x41a>
 8004700:	e018      	b.n	8004734 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <HAL_RCC_OscConfig+0x480>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fc ff8e 	bl	8001628 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004710:	f7fc ff8a 	bl	8001628 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e009      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <HAL_RCC_OscConfig+0x47c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x448>
 800472e:	e001      	b.n	8004734 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40007000 	.word	0x40007000
 8004744:	40023800 	.word	0x40023800
 8004748:	42470060 	.word	0x42470060

0800474c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0ca      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b67      	ldr	r3, [pc, #412]	; (8004900 <HAL_RCC_ClockConfig+0x1b4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90c      	bls.n	8004788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b64      	ldr	r3, [pc, #400]	; (8004900 <HAL_RCC_ClockConfig+0x1b4>)
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b62      	ldr	r3, [pc, #392]	; (8004900 <HAL_RCC_ClockConfig+0x1b4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0b6      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a0:	4b58      	ldr	r3, [pc, #352]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a57      	ldr	r2, [pc, #348]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80047a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b8:	4b52      	ldr	r3, [pc, #328]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80047be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b4f      	ldr	r3, [pc, #316]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	494c      	ldr	r1, [pc, #304]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d044      	beq.n	800486c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b46      	ldr	r3, [pc, #280]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d119      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07d      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d003      	beq.n	800480a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06d      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481a:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e065      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4933      	ldr	r1, [pc, #204]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800483c:	f7fc fef4 	bl	8001628 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fc fef0 	bl	8001628 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e04d      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCC_ClockConfig+0x1b4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d20c      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_ClockConfig+0x1b4>)
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <HAL_RCC_ClockConfig+0x1b4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e030      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a0:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4915      	ldr	r1, [pc, #84]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	490d      	ldr	r1, [pc, #52]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048d2:	f000 f81d 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048d6:	4601      	mov	r1, r0
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	5cd3      	ldrb	r3, [r2, r3]
 80048e6:	fa21 f303 	lsr.w	r3, r1, r3
 80048ea:	4a08      	ldr	r2, [pc, #32]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80048ee:	2000      	movs	r0, #0
 80048f0:	f7fc fd2e 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023c00 	.word	0x40023c00
 8004904:	40023800 	.word	0x40023800
 8004908:	0800c8b8 	.word	0x0800c8b8
 800490c:	20000000 	.word	0x20000000

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	2300      	movs	r3, #0
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004926:	4b63      	ldr	r3, [pc, #396]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b04      	cmp	r3, #4
 8004930:	d007      	beq.n	8004942 <HAL_RCC_GetSysClockFreq+0x32>
 8004932:	2b08      	cmp	r3, #8
 8004934:	d008      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0x38>
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 80b4 	bne.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b5e      	ldr	r3, [pc, #376]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800493e:	60bb      	str	r3, [r7, #8]
       break;
 8004940:	e0b3      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004942:	4b5e      	ldr	r3, [pc, #376]	; (8004abc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004944:	60bb      	str	r3, [r7, #8]
      break;
 8004946:	e0b0      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004948:	4b5a      	ldr	r3, [pc, #360]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004950:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004952:	4b58      	ldr	r3, [pc, #352]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d04a      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b55      	ldr	r3, [pc, #340]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	f04f 0400 	mov.w	r4, #0
 8004968:	f240 11ff 	movw	r1, #511	; 0x1ff
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	ea03 0501 	and.w	r5, r3, r1
 8004974:	ea04 0602 	and.w	r6, r4, r2
 8004978:	4629      	mov	r1, r5
 800497a:	4632      	mov	r2, r6
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	f04f 0400 	mov.w	r4, #0
 8004984:	0154      	lsls	r4, r2, #5
 8004986:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800498a:	014b      	lsls	r3, r1, #5
 800498c:	4619      	mov	r1, r3
 800498e:	4622      	mov	r2, r4
 8004990:	1b49      	subs	r1, r1, r5
 8004992:	eb62 0206 	sbc.w	r2, r2, r6
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	f04f 0400 	mov.w	r4, #0
 800499e:	0194      	lsls	r4, r2, #6
 80049a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049a4:	018b      	lsls	r3, r1, #6
 80049a6:	1a5b      	subs	r3, r3, r1
 80049a8:	eb64 0402 	sbc.w	r4, r4, r2
 80049ac:	f04f 0100 	mov.w	r1, #0
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	00e2      	lsls	r2, r4, #3
 80049b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049ba:	00d9      	lsls	r1, r3, #3
 80049bc:	460b      	mov	r3, r1
 80049be:	4614      	mov	r4, r2
 80049c0:	195b      	adds	r3, r3, r5
 80049c2:	eb44 0406 	adc.w	r4, r4, r6
 80049c6:	f04f 0100 	mov.w	r1, #0
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	0262      	lsls	r2, r4, #9
 80049d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049d4:	0259      	lsls	r1, r3, #9
 80049d6:	460b      	mov	r3, r1
 80049d8:	4614      	mov	r4, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	4621      	mov	r1, r4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f04f 0400 	mov.w	r4, #0
 80049e4:	461a      	mov	r2, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	f7fb fc12 	bl	8000210 <__aeabi_uldivmod>
 80049ec:	4603      	mov	r3, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e049      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f4:	4b2f      	ldr	r3, [pc, #188]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	f04f 0400 	mov.w	r4, #0
 80049fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	ea03 0501 	and.w	r5, r3, r1
 8004a0a:	ea04 0602 	and.w	r6, r4, r2
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4632      	mov	r2, r6
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	f04f 0400 	mov.w	r4, #0
 8004a1a:	0154      	lsls	r4, r2, #5
 8004a1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a20:	014b      	lsls	r3, r1, #5
 8004a22:	4619      	mov	r1, r3
 8004a24:	4622      	mov	r2, r4
 8004a26:	1b49      	subs	r1, r1, r5
 8004a28:	eb62 0206 	sbc.w	r2, r2, r6
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	0194      	lsls	r4, r2, #6
 8004a36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a3a:	018b      	lsls	r3, r1, #6
 8004a3c:	1a5b      	subs	r3, r3, r1
 8004a3e:	eb64 0402 	sbc.w	r4, r4, r2
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	00e2      	lsls	r2, r4, #3
 8004a4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a50:	00d9      	lsls	r1, r3, #3
 8004a52:	460b      	mov	r3, r1
 8004a54:	4614      	mov	r4, r2
 8004a56:	195b      	adds	r3, r3, r5
 8004a58:	eb44 0406 	adc.w	r4, r4, r6
 8004a5c:	f04f 0100 	mov.w	r1, #0
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	02a2      	lsls	r2, r4, #10
 8004a66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a6a:	0299      	lsls	r1, r3, #10
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4614      	mov	r4, r2
 8004a70:	4618      	mov	r0, r3
 8004a72:	4621      	mov	r1, r4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f04f 0400 	mov.w	r4, #0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4623      	mov	r3, r4
 8004a7e:	f7fb fbc7 	bl	8000210 <__aeabi_uldivmod>
 8004a82:	4603      	mov	r3, r0
 8004a84:	460c      	mov	r4, r1
 8004a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004aa6:	60bb      	str	r3, [r7, #8]
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	00f42400 	.word	0x00f42400
 8004abc:	007a1200 	.word	0x007a1200

08004ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000000 	.word	0x20000000

08004ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004adc:	f7ff fff0 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4a03      	ldr	r2, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	0800c8c8 	.word	0x0800c8c8

08004b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b04:	f7ff ffdc 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004b08:	4601      	mov	r1, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0b5b      	lsrs	r3, r3, #13
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4a03      	ldr	r2, [pc, #12]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b16:	5cd3      	ldrb	r3, [r2, r3]
 8004b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	0800c8c8 	.word	0x0800c8c8

08004b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	220f      	movs	r2, #15
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0203 	and.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <HAL_RCC_GetClockConfig+0x60>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40023c00 	.word	0x40023c00

08004b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d061      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bb4:	4ba3      	ldr	r3, [pc, #652]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fc fd35 	bl	8001628 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bc2:	f7fc fd31 	bl	8001628 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e177      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd4:	4b9c      	ldr	r3, [pc, #624]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d009      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	019a      	lsls	r2, r3, #6
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	071b      	lsls	r3, r3, #28
 8004bf8:	4993      	ldr	r1, [pc, #588]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01f      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c0c:	4b8e      	ldr	r3, [pc, #568]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c12:	0f1b      	lsrs	r3, r3, #28
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	019a      	lsls	r2, r3, #6
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	431a      	orrs	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	071b      	lsls	r3, r3, #28
 8004c2c:	4986      	ldr	r1, [pc, #536]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c34:	4b84      	ldr	r3, [pc, #528]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3a:	f023 021f 	bic.w	r2, r3, #31
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	4980      	ldr	r1, [pc, #512]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c4c:	4b7d      	ldr	r3, [pc, #500]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c52:	f7fc fce9 	bl	8001628 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c5a:	f7fc fce5 	bl	8001628 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e12b      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c6c:	4b76      	ldr	r3, [pc, #472]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d079      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c90:	4b6e      	ldr	r3, [pc, #440]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fc fcc7 	bl	8001628 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c9e:	f7fc fcc3 	bl	8001628 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e109      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cb0:	4b65      	ldr	r3, [pc, #404]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbc:	d0ef      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cca:	4b5f      	ldr	r3, [pc, #380]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	0f1b      	lsrs	r3, r3, #28
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	019a      	lsls	r2, r3, #6
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	061b      	lsls	r3, r3, #24
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	071b      	lsls	r3, r3, #28
 8004cea:	4957      	ldr	r1, [pc, #348]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cf2:	4b55      	ldr	r3, [pc, #340]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	4950      	ldr	r1, [pc, #320]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01e      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d18:	4b4b      	ldr	r3, [pc, #300]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	0e1b      	lsrs	r3, r3, #24
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	019a      	lsls	r2, r3, #6
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	071b      	lsls	r3, r3, #28
 8004d38:	4943      	ldr	r1, [pc, #268]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d40:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	493e      	ldr	r1, [pc, #248]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d56:	4b3d      	ldr	r3, [pc, #244]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fc fc64 	bl	8001628 <HAL_GetTick>
 8004d60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d64:	f7fc fc60 	bl	8001628 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0a6      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d76:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d82:	d1ef      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 808d 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6413      	str	r3, [r2, #64]	; 0x40
 8004da2:	4b29      	ldr	r3, [pc, #164]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dae:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dba:	f7fc fc35 	bl	8001628 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fc fc31 	bl	8001628 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e077      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d039      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d032      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e08:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0e:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d11e      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e26:	f7fc fbff 	bl	8001628 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2c:	e014      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fc fbfb 	bl	8001628 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d90b      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e03f      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004e44:	42470068 	.word	0x42470068
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	42470070 	.word	0x42470070
 8004e50:	40007000 	.word	0x40007000
 8004e54:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	4b1c      	ldr	r3, [pc, #112]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0e4      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e70:	d10d      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004e72:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e86:	4911      	ldr	r1, [pc, #68]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]
 8004e8c:	e005      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e98:	6093      	str	r3, [r2, #8]
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea6:	4909      	ldr	r1, [pc, #36]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d004      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ec0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	424711e0 	.word	0x424711e0

08004ed4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e025      	b.n	8004f34 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fc fa1d 	bl	800133c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f000 fe95 	bl	8005c44 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	f000 ff00 	bl	8005d2a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e056      	b.n	8004ffc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fc f8a3 	bl	80010b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	ea42 0103 	orr.w	r1, r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 0104 	and.w	r1, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e01d      	b.n	8005052 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc f88a 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fa14 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d007      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d122      	bne.n	80050fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d11b      	bne.n	80050fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0202 	mvn.w	r2, #2
 80050ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f9a5 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 80050ea:	e005      	b.n	80050f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f997 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9a8 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d122      	bne.n	8005152 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b04      	cmp	r3, #4
 8005118:	d11b      	bne.n	8005152 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f06f 0204 	mvn.w	r2, #4
 8005122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f97b 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 800513e:	e005      	b.n	800514c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f96d 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f97e 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b08      	cmp	r3, #8
 800515e:	d122      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b08      	cmp	r3, #8
 800516c:	d11b      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0208 	mvn.w	r2, #8
 8005176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2204      	movs	r2, #4
 800517c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f951 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 8005192:	e005      	b.n	80051a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f943 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f954 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d122      	bne.n	80051fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d11b      	bne.n	80051fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f06f 0210 	mvn.w	r2, #16
 80051ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2208      	movs	r2, #8
 80051d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f927 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 80051e6:	e005      	b.n	80051f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f919 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f92a 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0201 	mvn.w	r2, #1
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fb fd3b 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d10e      	bne.n	8005252 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d107      	bne.n	8005252 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800524a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa98 	bl	8005782 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d10e      	bne.n	800527e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d107      	bne.n	800527e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8ef 	bl	800545c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b20      	cmp	r3, #32
 800528a:	d10e      	bne.n	80052aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b20      	cmp	r3, #32
 8005298:	d107      	bne.n	80052aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f06f 0220 	mvn.w	r2, #32
 80052a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fa62 	bl	800576e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_ConfigClockSource+0x18>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e0a6      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x166>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d067      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x120>
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d80b      	bhi.n	800531e <HAL_TIM_ConfigClockSource+0x6c>
 8005306:	2b10      	cmp	r3, #16
 8005308:	d073      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x140>
 800530a:	2b10      	cmp	r3, #16
 800530c:	d802      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x62>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d06f      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005312:	e078      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005314:	2b20      	cmp	r3, #32
 8005316:	d06c      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x140>
 8005318:	2b30      	cmp	r3, #48	; 0x30
 800531a:	d06a      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800531c:	e073      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800531e:	2b70      	cmp	r3, #112	; 0x70
 8005320:	d00d      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x8c>
 8005322:	2b70      	cmp	r3, #112	; 0x70
 8005324:	d804      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x7e>
 8005326:	2b50      	cmp	r3, #80	; 0x50
 8005328:	d033      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0xe0>
 800532a:	2b60      	cmp	r3, #96	; 0x60
 800532c:	d041      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800532e:	e06a      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005334:	d066      	beq.n	8005404 <HAL_TIM_ConfigClockSource+0x152>
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533a:	d017      	beq.n	800536c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800533c:	e063      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f000 f9a9 	bl	80056a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005360:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	609a      	str	r2, [r3, #8]
      break;
 800536a:	e04c      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6899      	ldr	r1, [r3, #8]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f000 f992 	bl	80056a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800538e:	609a      	str	r2, [r3, #8]
      break;
 8005390:	e039      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	461a      	mov	r2, r3
 80053a0:	f000 f906 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2150      	movs	r1, #80	; 0x50
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f95f 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 80053b0:	e029      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6859      	ldr	r1, [r3, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	461a      	mov	r2, r3
 80053c0:	f000 f925 	bl	800560e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2160      	movs	r1, #96	; 0x60
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f94f 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 80053d0:	e019      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	461a      	mov	r2, r3
 80053e0:	f000 f8e6 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2140      	movs	r1, #64	; 0x40
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f93f 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 80053f0:	e009      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f000 f936 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 8005402:	e000      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005404:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a40      	ldr	r2, [pc, #256]	; (8005584 <TIM_Base_SetConfig+0x114>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d00f      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a3d      	ldr	r2, [pc, #244]	; (8005588 <TIM_Base_SetConfig+0x118>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a3c      	ldr	r2, [pc, #240]	; (800558c <TIM_Base_SetConfig+0x11c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3b      	ldr	r2, [pc, #236]	; (8005590 <TIM_Base_SetConfig+0x120>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a3a      	ldr	r2, [pc, #232]	; (8005594 <TIM_Base_SetConfig+0x124>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2f      	ldr	r2, [pc, #188]	; (8005584 <TIM_Base_SetConfig+0x114>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d027      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2c      	ldr	r2, [pc, #176]	; (8005588 <TIM_Base_SetConfig+0x118>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d023      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2b      	ldr	r2, [pc, #172]	; (800558c <TIM_Base_SetConfig+0x11c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <TIM_Base_SetConfig+0x120>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a29      	ldr	r2, [pc, #164]	; (8005594 <TIM_Base_SetConfig+0x124>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d017      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a28      	ldr	r2, [pc, #160]	; (8005598 <TIM_Base_SetConfig+0x128>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a27      	ldr	r2, [pc, #156]	; (800559c <TIM_Base_SetConfig+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a26      	ldr	r2, [pc, #152]	; (80055a0 <TIM_Base_SetConfig+0x130>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <TIM_Base_SetConfig+0x134>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <TIM_Base_SetConfig+0x138>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a23      	ldr	r2, [pc, #140]	; (80055ac <TIM_Base_SetConfig+0x13c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <TIM_Base_SetConfig+0x114>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <TIM_Base_SetConfig+0x124>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40010400 	.word	0x40010400
 8005598:	40014000 	.word	0x40014000
 800559c:	40014400 	.word	0x40014400
 80055a0:	40014800 	.word	0x40014800
 80055a4:	40001800 	.word	0x40001800
 80055a8:	40001c00 	.word	0x40001c00
 80055ac:	40002000 	.word	0x40002000

080055b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f023 0201 	bic.w	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 030a 	bic.w	r3, r3, #10
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560e:	b480      	push	{r7}
 8005610:	b087      	sub	sp, #28
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f023 0210 	bic.w	r2, r3, #16
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	031b      	lsls	r3, r3, #12
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800564a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	f043 0307 	orr.w	r3, r3, #7
 8005690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	021a      	lsls	r2, r3, #8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	609a      	str	r2, [r3, #8]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e032      	b.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005734:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e03f      	b.n	8005828 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fb fce3 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2224      	movs	r2, #36	; 0x24
 80057c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f828 	bl	8005830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800580e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005830:	b5b0      	push	{r4, r5, r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005870:	f023 030c 	bic.w	r3, r3, #12
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	68f9      	ldr	r1, [r7, #12]
 800587a:	430b      	orrs	r3, r1
 800587c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589c:	f040 80e4 	bne.w	8005a68 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4aab      	ldr	r2, [pc, #684]	; (8005b54 <UART_SetConfig+0x324>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <UART_SetConfig+0x84>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4aaa      	ldr	r2, [pc, #680]	; (8005b58 <UART_SetConfig+0x328>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d16c      	bne.n	800598e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80058b4:	f7ff f924 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009a      	lsls	r2, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	4aa3      	ldr	r2, [pc, #652]	; (8005b5c <UART_SetConfig+0x32c>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	011c      	lsls	r4, r3, #4
 80058d8:	f7ff f912 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009a      	lsls	r2, r3, #2
 80058e6:	441a      	add	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80058f2:	f7ff f905 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 80058f6:	4602      	mov	r2, r0
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009a      	lsls	r2, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	4a93      	ldr	r2, [pc, #588]	; (8005b5c <UART_SetConfig+0x32c>)
 800590e:	fba2 2303 	umull	r2, r3, r2, r3
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	; 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1aeb      	subs	r3, r5, r3
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	3332      	adds	r3, #50	; 0x32
 8005920:	4a8e      	ldr	r2, [pc, #568]	; (8005b5c <UART_SetConfig+0x32c>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800592e:	441c      	add	r4, r3
 8005930:	f7ff f8e6 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8005934:	4602      	mov	r2, r0
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009a      	lsls	r2, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	fbb2 f5f3 	udiv	r5, r2, r3
 800594a:	f7ff f8d9 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 800594e:	4602      	mov	r2, r0
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009a      	lsls	r2, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	4a7d      	ldr	r2, [pc, #500]	; (8005b5c <UART_SetConfig+0x32c>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2264      	movs	r2, #100	; 0x64
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	1aeb      	subs	r3, r5, r3
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	3332      	adds	r3, #50	; 0x32
 8005978:	4a78      	ldr	r2, [pc, #480]	; (8005b5c <UART_SetConfig+0x32c>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 0207 	and.w	r2, r3, #7
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4422      	add	r2, r4
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	e154      	b.n	8005c38 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800598e:	f7ff f8a3 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005992:	4602      	mov	r2, r0
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009a      	lsls	r2, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	4a6c      	ldr	r2, [pc, #432]	; (8005b5c <UART_SetConfig+0x32c>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	011c      	lsls	r4, r3, #4
 80059b2:	f7ff f891 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 80059b6:	4602      	mov	r2, r0
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009a      	lsls	r2, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80059cc:	f7ff f884 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009a      	lsls	r2, r3, #2
 80059da:	441a      	add	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	4a5d      	ldr	r2, [pc, #372]	; (8005b5c <UART_SetConfig+0x32c>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2264      	movs	r2, #100	; 0x64
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	1aeb      	subs	r3, r5, r3
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	3332      	adds	r3, #50	; 0x32
 80059fa:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <UART_SetConfig+0x32c>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a08:	441c      	add	r4, r3
 8005a0a:	f7ff f865 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a24:	f7ff f858 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009a      	lsls	r2, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	4a47      	ldr	r2, [pc, #284]	; (8005b5c <UART_SetConfig+0x32c>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2264      	movs	r2, #100	; 0x64
 8005a48:	fb02 f303 	mul.w	r3, r2, r3
 8005a4c:	1aeb      	subs	r3, r5, r3
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	3332      	adds	r3, #50	; 0x32
 8005a52:	4a42      	ldr	r2, [pc, #264]	; (8005b5c <UART_SetConfig+0x32c>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	f003 0207 	and.w	r2, r3, #7
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4422      	add	r2, r4
 8005a64:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005a66:	e0e7      	b.n	8005c38 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a39      	ldr	r2, [pc, #228]	; (8005b54 <UART_SetConfig+0x324>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <UART_SetConfig+0x24c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a38      	ldr	r2, [pc, #224]	; (8005b58 <UART_SetConfig+0x328>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d171      	bne.n	8005b60 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005a7c:	f7ff f840 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009a      	lsls	r2, r3, #2
 8005a8a:	441a      	add	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	4a31      	ldr	r2, [pc, #196]	; (8005b5c <UART_SetConfig+0x32c>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	011c      	lsls	r4, r3, #4
 8005aa0:	f7ff f82e 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009a      	lsls	r2, r3, #2
 8005aae:	441a      	add	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	fbb2 f5f3 	udiv	r5, r2, r3
 8005aba:	f7ff f821 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009a      	lsls	r2, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <UART_SetConfig+0x32c>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2264      	movs	r2, #100	; 0x64
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	1aeb      	subs	r3, r5, r3
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	3332      	adds	r3, #50	; 0x32
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <UART_SetConfig+0x32c>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af4:	441c      	add	r4, r3
 8005af6:	f7ff f803 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009a      	lsls	r2, r3, #2
 8005b04:	441a      	add	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b10:	f7fe fff6 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009a      	lsls	r2, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	4a0c      	ldr	r2, [pc, #48]	; (8005b5c <UART_SetConfig+0x32c>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	2264      	movs	r2, #100	; 0x64
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	1aeb      	subs	r3, r5, r3
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	3332      	adds	r3, #50	; 0x32
 8005b3e:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <UART_SetConfig+0x32c>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4422      	add	r2, r4
 8005b50:	609a      	str	r2, [r3, #8]
 8005b52:	e071      	b.n	8005c38 <UART_SetConfig+0x408>
 8005b54:	40011000 	.word	0x40011000
 8005b58:	40011400 	.word	0x40011400
 8005b5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b60:	f7fe ffba 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005b64:	4602      	mov	r2, r0
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009a      	lsls	r2, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	4a31      	ldr	r2, [pc, #196]	; (8005c40 <UART_SetConfig+0x410>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	011c      	lsls	r4, r3, #4
 8005b84:	f7fe ffa8 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009a      	lsls	r2, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b9e:	f7fe ff9b 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	4a21      	ldr	r2, [pc, #132]	; (8005c40 <UART_SetConfig+0x410>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2264      	movs	r2, #100	; 0x64
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	1aeb      	subs	r3, r5, r3
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	3332      	adds	r3, #50	; 0x32
 8005bcc:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <UART_SetConfig+0x410>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd8:	441c      	add	r4, r3
 8005bda:	f7fe ff7d 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005bde:	4602      	mov	r2, r0
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009a      	lsls	r2, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	fbb2 f5f3 	udiv	r5, r2, r3
 8005bf4:	f7fe ff70 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009a      	lsls	r2, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <UART_SetConfig+0x410>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	2264      	movs	r2, #100	; 0x64
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	1aeb      	subs	r3, r5, r3
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	3332      	adds	r3, #50	; 0x32
 8005c22:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <UART_SetConfig+0x410>)
 8005c24:	fba2 2303 	umull	r2, r3, r2, r3
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	f003 020f 	and.w	r2, r3, #15
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4422      	add	r2, r4
 8005c34:	609a      	str	r2, [r3, #8]
}
 8005c36:	e7ff      	b.n	8005c38 <UART_SetConfig+0x408>
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c40:	51eb851f 	.word	0x51eb851f

08005c44 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d029      	beq.n	8005cb2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c6e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c78:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005c7e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005c84:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005c8a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005c90:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005c96:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005c9c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005ca2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e034      	b.n	8005d1c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cbe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005cc8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005cce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ce2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ce6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005cf0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005cf6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005cfc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005d02:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005d08:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d02e      	beq.n	8005da2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d50:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005d60:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005d6a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005d74:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005d7e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005d88:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005d92:	4313      	orrs	r3, r2
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	e03b      	b.n	8005e1a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005dd8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005de8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005df2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005dfc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005e06:	4313      	orrs	r3, r2
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e28:	b084      	sub	sp, #16
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	f107 001c 	add.w	r0, r7, #28
 8005e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d122      	bne.n	8005e86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d105      	bne.n	8005e7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f94a 	bl	8006114 <USB_CoreReset>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e01a      	b.n	8005ebc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f93e 	bl	8006114 <USB_CoreReset>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
 8005eae:	e005      	b.n	8005ebc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d10b      	bne.n	8005eda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f043 0206 	orr.w	r2, r3, #6
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ee6:	b004      	add	sp, #16
 8005ee8:	4770      	bx	lr

08005eea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f043 0201 	orr.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f023 0201 	bic.w	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d106      	bne.n	8005f5a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]
 8005f58:	e00b      	b.n	8005f72 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]
 8005f6c:	e001      	b.n	8005f72 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e003      	b.n	8005f7a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005f72:	2032      	movs	r0, #50	; 0x32
 8005f74:	f7fb fb64 	bl	8001640 <HAL_Delay>

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	019b      	lsls	r3, r3, #6
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <USB_FlushTxFifo+0x48>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e006      	b.n	8005fbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d0f0      	beq.n	8005f9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	00030d40 	.word	0x00030d40

08005fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a09      	ldr	r2, [pc, #36]	; (8006010 <USB_FlushRxFifo+0x40>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d901      	bls.n	8005ff4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e006      	b.n	8006002 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b10      	cmp	r3, #16
 8005ffe:	d0f0      	beq.n	8005fe2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	00030d40 	.word	0x00030d40

08006014 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	; 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	460b      	mov	r3, r1
 8006024:	71fb      	strb	r3, [r7, #7]
 8006026:	4613      	mov	r3, r2
 8006028:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006032:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11a      	bne.n	8006070 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800603a:	88bb      	ldrh	r3, [r7, #4]
 800603c:	3303      	adds	r3, #3
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e00f      	b.n	8006068 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	031a      	lsls	r2, r3, #12
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4413      	add	r3, r2
 8006050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006054:	461a      	mov	r2, r3
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3304      	adds	r3, #4
 8006060:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	3301      	adds	r3, #1
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	d3eb      	bcc.n	8006048 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3724      	adds	r7, #36	; 0x24
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800607e:	b480      	push	{r7}
 8006080:	b089      	sub	sp, #36	; 0x24
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	3303      	adds	r3, #3
 8006098:	089b      	lsrs	r3, r3, #2
 800609a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800609c:	2300      	movs	r3, #0
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	e00b      	b.n	80060ba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3304      	adds	r3, #4
 80060b2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d3ef      	bcc.n	80060a2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80060c2:	69fb      	ldr	r3, [r7, #28]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3724      	adds	r7, #36	; 0x24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4013      	ands	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060e8:	68fb      	ldr	r3, [r7, #12]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0301 	and.w	r3, r3, #1
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <USB_CoreReset+0x64>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e01b      	b.n	800616a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	daf2      	bge.n	8006120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a09      	ldr	r2, [pc, #36]	; (8006178 <USB_CoreReset+0x64>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e006      	b.n	800616a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d0f0      	beq.n	800614a <USB_CoreReset+0x36>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	00030d40 	.word	0x00030d40

0800617c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800617c:	b084      	sub	sp, #16
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	f107 001c 	add.w	r0, r7, #28
 800618a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006198:	461a      	mov	r2, r3
 800619a:	2300      	movs	r3, #0
 800619c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d018      	beq.n	8006200 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d10a      	bne.n	80061ea <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061e2:	f043 0304 	orr.w	r3, r3, #4
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	e014      	b.n	8006214 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061f8:	f023 0304 	bic.w	r3, r3, #4
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	e009      	b.n	8006214 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800620e:	f023 0304 	bic.w	r3, r3, #4
 8006212:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006214:	2110      	movs	r1, #16
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff feb4 	bl	8005f84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fed7 	bl	8005fd0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e015      	b.n	8006254 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	461a      	mov	r2, r3
 8006236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800623a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006248:	461a      	mov	r2, r3
 800624a:	2300      	movs	r3, #0
 800624c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d3e5      	bcc.n	8006228 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800625c:	2101      	movs	r1, #1
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f8ac 	bl	80063bc <USB_DriveVbus>

  HAL_Delay(200U);
 8006264:	20c8      	movs	r0, #200	; 0xc8
 8006266:	f7fb f9eb 	bl	8001640 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006276:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a14      	ldr	r2, [pc, #80]	; (80062e0 <USB_HostInit+0x164>)
 8006290:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <USB_HostInit+0x168>)
 8006296:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800629a:	e009      	b.n	80062b0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2280      	movs	r2, #128	; 0x80
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <USB_HostInit+0x16c>)
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a10      	ldr	r2, [pc, #64]	; (80062ec <USB_HostInit+0x170>)
 80062ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f043 0210 	orr.w	r2, r3, #16
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <USB_HostInit+0x174>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062da:	b004      	add	sp, #16
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	01000200 	.word	0x01000200
 80062e4:	00e00300 	.word	0x00e00300
 80062e8:	00600080 	.word	0x00600080
 80062ec:	004000e0 	.word	0x004000e0
 80062f0:	a3200008 	.word	0xa3200008

080062f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800632c:	4313      	orrs	r3, r2
 800632e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d107      	bne.n	8006346 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800633c:	461a      	mov	r2, r3
 800633e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006342:	6053      	str	r3, [r2, #4]
 8006344:	e009      	b.n	800635a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d106      	bne.n	800635a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006352:	461a      	mov	r2, r3
 8006354:	f241 7370 	movw	r3, #6000	; 0x1770
 8006358:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006388:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006396:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006398:	2064      	movs	r0, #100	; 0x64
 800639a:	f7fb f951 	bl	8001640 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80063ac:	200a      	movs	r0, #10
 80063ae:	f7fb f947 	bl	8001640 <HAL_Delay>

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <USB_DriveVbus+0x44>
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d106      	bne.n	8006400 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640a:	d109      	bne.n	8006420 <USB_DriveVbus+0x64>
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800641a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800641e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	0c5b      	lsrs	r3, r3, #17
 800644c:	f003 0303 	and.w	r3, r3, #3
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	b29b      	uxth	r3, r3
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	4603      	mov	r3, r0
 8006490:	70fb      	strb	r3, [r7, #3]
 8006492:	460b      	mov	r3, r1
 8006494:	70bb      	strb	r3, [r7, #2]
 8006496:	4613      	mov	r3, r2
 8006498:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ae:	461a      	mov	r2, r3
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80064b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d87e      	bhi.n	80065bc <USB_HC_Init+0x13c>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <USB_HC_Init+0x44>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	0800657f 	.word	0x0800657f
 80064cc:	080064d5 	.word	0x080064d5
 80064d0:	08006541 	.word	0x08006541
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	461a      	mov	r2, r3
 80064e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80064e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80064e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da10      	bge.n	8006512 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	440a      	add	r2, r1
 8006506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800650e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006510:	e057      	b.n	80065c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d051      	beq.n	80065c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	440a      	add	r2, r1
 8006534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006538:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800653c:	60d3      	str	r3, [r2, #12]
      break;
 800653e:	e040      	b.n	80065c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	461a      	mov	r2, r3
 800654e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006552:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006554:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006558:	2b00      	cmp	r3, #0
 800655a:	da34      	bge.n	80065c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800657a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800657c:	e023      	b.n	80065c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	461a      	mov	r2, r3
 800658c:	f240 2325 	movw	r3, #549	; 0x225
 8006590:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006592:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006596:	2b00      	cmp	r3, #0
 8006598:	da17      	bge.n	80065ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80065b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80065ba:	e006      	b.n	80065ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]
      break;
 80065c0:	e004      	b.n	80065cc <USB_HC_Init+0x14c>
      break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <USB_HC_Init+0x14c>
      break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <USB_HC_Init+0x14c>
      break;
 80065ca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d2:	699a      	ldr	r2, [r3, #24]
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	2101      	movs	r1, #1
 80065dc:	fa01 f303 	lsl.w	r3, r1, r3
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065e6:	4313      	orrs	r3, r2
 80065e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80065f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da03      	bge.n	8006606 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80065fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	e001      	b.n	800660a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800660a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d103      	bne.n	800661a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e001      	b.n	800661e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800661e:	787b      	ldrb	r3, [r7, #1]
 8006620:	059b      	lsls	r3, r3, #22
 8006622:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006626:	78bb      	ldrb	r3, [r7, #2]
 8006628:	02db      	lsls	r3, r3, #11
 800662a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800662e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006634:	049b      	lsls	r3, r3, #18
 8006636:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800663a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800663c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800663e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006642:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	0159      	lsls	r1, r3, #5
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	440b      	add	r3, r1
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800665a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800665c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006660:	2b03      	cmp	r3, #3
 8006662:	d10f      	bne.n	8006684 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4413      	add	r3, r2
 800666c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	440a      	add	r2, r1
 800667a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006682:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
}
 8006686:	4618      	mov	r0, r3
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop

08006694 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08c      	sub	sp, #48	; 0x30
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80066ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d028      	beq.n	8006710 <USB_HC_StartXfer+0x7c>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	791b      	ldrb	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d124      	bne.n	8006710 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <USB_HC_StartXfer+0x50>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	795b      	ldrb	r3, [r3, #5]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	4619      	mov	r1, r3
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa2e 	bl	8006b3c <USB_DoPing>
      return HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e112      	b.n	800690a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d112      	bne.n	8006710 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006704:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006708:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	8912      	ldrh	r2, [r2, #8]
 8006720:	4413      	add	r3, r2
 8006722:	3b01      	subs	r3, #1
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	8912      	ldrh	r2, [r2, #8]
 8006728:	fbb3 f3f2 	udiv	r3, r3, r2
 800672c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800672e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006730:	8b7b      	ldrh	r3, [r7, #26]
 8006732:	429a      	cmp	r2, r3
 8006734:	d90b      	bls.n	800674e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006736:	8b7b      	ldrh	r3, [r7, #26]
 8006738:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800673a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	8912      	ldrh	r2, [r2, #8]
 8006740:	fb02 f203 	mul.w	r2, r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	611a      	str	r2, [r3, #16]
 8006748:	e001      	b.n	800674e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800674a:	2301      	movs	r3, #1
 800674c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	78db      	ldrb	r3, [r3, #3]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d006      	beq.n	8006764 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	8912      	ldrh	r2, [r2, #8]
 800675c:	fb02 f203 	mul.w	r2, r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800676c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800676e:	04d9      	lsls	r1, r3, #19
 8006770:	4b68      	ldr	r3, [pc, #416]	; (8006914 <USB_HC_StartXfer+0x280>)
 8006772:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006774:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	7a9b      	ldrb	r3, [r3, #10]
 800677a:	075b      	lsls	r3, r3, #29
 800677c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006780:	69f9      	ldr	r1, [r7, #28]
 8006782:	0148      	lsls	r0, r1, #5
 8006784:	6a39      	ldr	r1, [r7, #32]
 8006786:	4401      	add	r1, r0
 8006788:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800678c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800678e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	68d9      	ldr	r1, [r3, #12]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a6:	460a      	mov	r2, r1
 80067a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	7e7b      	ldrb	r3, [r7, #25]
 80067f2:	075b      	lsls	r3, r3, #29
 80067f4:	69f9      	ldr	r1, [r7, #28]
 80067f6:	0148      	lsls	r0, r1, #5
 80067f8:	6a39      	ldr	r1, [r7, #32]
 80067fa:	4401      	add	r1, r0
 80067fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006800:	4313      	orrs	r3, r2
 8006802:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	4413      	add	r3, r2
 800680c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a41      	ldr	r2, [pc, #260]	; (8006918 <USB_HC_StartXfer+0x284>)
 8006814:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006816:	4b40      	ldr	r3, [pc, #256]	; (8006918 <USB_HC_StartXfer+0x284>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800681e:	4a3e      	ldr	r2, [pc, #248]	; (8006918 <USB_HC_StartXfer+0x284>)
 8006820:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	78db      	ldrb	r3, [r3, #3]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800682a:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <USB_HC_StartXfer+0x284>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006832:	4a39      	ldr	r2, [pc, #228]	; (8006918 <USB_HC_StartXfer+0x284>)
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e005      	b.n	8006844 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006838:	4b37      	ldr	r3, [pc, #220]	; (8006918 <USB_HC_StartXfer+0x284>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006840:	4a35      	ldr	r2, [pc, #212]	; (8006918 <USB_HC_StartXfer+0x284>)
 8006842:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006844:	4b34      	ldr	r3, [pc, #208]	; (8006918 <USB_HC_StartXfer+0x284>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684c:	4a32      	ldr	r2, [pc, #200]	; (8006918 <USB_HC_StartXfer+0x284>)
 800684e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	461a      	mov	r2, r3
 800685e:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <USB_HC_StartXfer+0x284>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d14e      	bne.n	8006908 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	78db      	ldrb	r3, [r3, #3]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d14a      	bne.n	8006908 <USB_HC_StartXfer+0x274>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d046      	beq.n	8006908 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	79db      	ldrb	r3, [r3, #7]
 800687e:	2b03      	cmp	r3, #3
 8006880:	d830      	bhi.n	80068e4 <USB_HC_StartXfer+0x250>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <USB_HC_StartXfer+0x1f4>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	08006899 	.word	0x08006899
 800688c:	080068bd 	.word	0x080068bd
 8006890:	08006899 	.word	0x08006899
 8006894:	080068bd 	.word	0x080068bd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	3303      	adds	r3, #3
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068a2:	8afa      	ldrh	r2, [r7, #22]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d91c      	bls.n	80068e8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f043 0220 	orr.w	r2, r3, #32
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	619a      	str	r2, [r3, #24]
          }
          break;
 80068ba:	e015      	b.n	80068e8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	3303      	adds	r3, #3
 80068c2:	089b      	lsrs	r3, r3, #2
 80068c4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068c6:	8afa      	ldrh	r2, [r7, #22]
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d90a      	bls.n	80068ec <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	619a      	str	r2, [r3, #24]
          }
          break;
 80068e2:	e003      	b.n	80068ec <USB_HC_StartXfer+0x258>

        default:
          break;
 80068e4:	bf00      	nop
 80068e6:	e002      	b.n	80068ee <USB_HC_StartXfer+0x25a>
          break;
 80068e8:	bf00      	nop
 80068ea:	e000      	b.n	80068ee <USB_HC_StartXfer+0x25a>
          break;
 80068ec:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	68d9      	ldr	r1, [r3, #12]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	785a      	ldrb	r2, [r3, #1]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	b298      	uxth	r0, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4603      	mov	r3, r0
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fb86 	bl	8006014 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	1ff80000 	.word	0x1ff80000
 8006918:	20001098 	.word	0x20001098

0800691c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	b29b      	uxth	r3, r3
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800693e:	b480      	push	{r7}
 8006940:	b087      	sub	sp, #28
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	0c9b      	lsrs	r3, r3, #18
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <USB_HC_Halt+0x3a>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d16c      	bne.n	8006a52 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	440a      	add	r2, r1
 800698e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006996:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d143      	bne.n	8006a2c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a02:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	3301      	adds	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a10:	d81d      	bhi.n	8006a4e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a28:	d0ec      	beq.n	8006a04 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a2a:	e080      	b.n	8006b2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a4a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a4c:	e06f      	b.n	8006b2e <USB_HC_Halt+0x1f0>
          break;
 8006a4e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a50:	e06d      	b.n	8006b2e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d143      	bne.n	8006b0a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aa0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ac0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006adc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ae0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aee:	d81d      	bhi.n	8006b2c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b06:	d0ec      	beq.n	8006ae2 <USB_HC_Halt+0x1a4>
 8006b08:	e011      	b.n	8006b2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e000      	b.n	8006b2e <USB_HC_Halt+0x1f0>
          break;
 8006b2c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b50:	2301      	movs	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	04da      	lsls	r2, r3, #19
 8006b58:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <USB_DoPing+0x74>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	1ff80000 	.word	0x1ff80000

08006bb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff f9a1 	bl	8005f0c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006bca:	2110      	movs	r1, #16
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff f9d9 	bl	8005f84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff f9fc 	bl	8005fd0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	e01f      	b.n	8006c1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c12:	461a      	mov	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b0f      	cmp	r3, #15
 8006c22:	d9dc      	bls.n	8006bde <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	e034      	b.n	8006c94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	3301      	adds	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c70:	d80c      	bhi.n	8006c8c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c88:	d0ec      	beq.n	8006c64 <USB_StopHost+0xb0>
 8006c8a:	e000      	b.n	8006c8e <USB_StopHost+0xda>
        break;
 8006c8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3301      	adds	r3, #1
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b0f      	cmp	r3, #15
 8006c98:	d9c7      	bls.n	8006c2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cae:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff f91a 	bl	8005eea <USB_EnableGlobalInt>

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006cc0:	b590      	push	{r4, r7, lr}
 8006cc2:	b089      	sub	sp, #36	; 0x24
 8006cc4:	af04      	add	r7, sp, #16
 8006cc6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006ccc:	2301      	movs	r3, #1
 8006cce:	2202      	movs	r2, #2
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc3a 	bl	800754c <USBH_FindInterface>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2bff      	cmp	r3, #255	; 0xff
 8006ce0:	f000 812a 	beq.w	8006f38 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fc13 	bl	8007514 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006cf4:	2050      	movs	r0, #80	; 0x50
 8006cf6:	f005 fca7 	bl	800c648 <malloc>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	211a      	movs	r1, #26
 8006d0e:	fb01 f303 	mul.w	r3, r1, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da15      	bge.n	8006d4c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	211a      	movs	r1, #26
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	211a      	movs	r1, #26
 8006d3c:	fb01 f303 	mul.w	r3, r1, r3
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fd21 	bl	800879a <USBH_AllocPipe>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	7819      	ldrb	r1, [r3, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	7858      	ldrb	r0, [r3, #1]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	8952      	ldrh	r2, [r2, #10]
 8006d78:	9202      	str	r2, [sp, #8]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	9201      	str	r2, [sp, #4]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4623      	mov	r3, r4
 8006d82:	4602      	mov	r2, r0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fcd9 	bl	800873c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f005 fba8 	bl	800c4e8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	210a      	movs	r1, #10
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbd4 	bl	800754c <USBH_FindInterface>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2bff      	cmp	r3, #255	; 0xff
 8006dac:	f000 80c4 	beq.w	8006f38 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	211a      	movs	r1, #26
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da16      	bge.n	8006df6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	211a      	movs	r1, #26
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	211a      	movs	r1, #26
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006dee:	881a      	ldrh	r2, [r3, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	835a      	strh	r2, [r3, #26]
 8006df4:	e015      	b.n	8006e22 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	211a      	movs	r1, #26
 8006dfc:	fb01 f303 	mul.w	r3, r1, r3
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006e06:	781a      	ldrb	r2, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	211a      	movs	r1, #26
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006e1c:	881a      	ldrh	r2, [r3, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	211a      	movs	r1, #26
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b25b      	sxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da16      	bge.n	8006e68 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	211a      	movs	r1, #26
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006e4a:	781a      	ldrb	r2, [r3, #0]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	211a      	movs	r1, #26
 8006e56:	fb01 f303 	mul.w	r3, r1, r3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006e60:	881a      	ldrh	r2, [r3, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	835a      	strh	r2, [r3, #26]
 8006e66:	e015      	b.n	8006e94 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	211a      	movs	r1, #26
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	211a      	movs	r1, #26
 8006e84:	fb01 f303 	mul.w	r3, r1, r3
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006e8e:	881a      	ldrh	r2, [r3, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	7b9b      	ldrb	r3, [r3, #14]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 fc7d 	bl	800879a <USBH_AllocPipe>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	7bdb      	ldrb	r3, [r3, #15]
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fc73 	bl	800879a <USBH_AllocPipe>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	7b59      	ldrb	r1, [r3, #13]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	7b98      	ldrb	r0, [r3, #14]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	8b12      	ldrh	r2, [r2, #24]
 8006ed4:	9202      	str	r2, [sp, #8]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	9201      	str	r2, [sp, #4]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4623      	mov	r3, r4
 8006ede:	4602      	mov	r2, r0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fc2b 	bl	800873c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	7b19      	ldrb	r1, [r3, #12]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	7bd8      	ldrb	r0, [r3, #15]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	8b52      	ldrh	r2, [r2, #26]
 8006efe:	9202      	str	r2, [sp, #8]
 8006f00:	2202      	movs	r2, #2
 8006f02:	9201      	str	r2, [sp, #4]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	4623      	mov	r3, r4
 8006f08:	4602      	mov	r2, r0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fc16 	bl	800873c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	7b5b      	ldrb	r3, [r3, #13]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f005 fae1 	bl	800c4e8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	7b1b      	ldrb	r3, [r3, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f005 fada 	bl	800c4e8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd90      	pop	{r4, r7, pc}

08006f42 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00e      	beq.n	8006f7a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fc09 	bl	800877a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fc31 	bl	80087d6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	7b1b      	ldrb	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00e      	beq.n	8006fa0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	7b1b      	ldrb	r3, [r3, #12]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fbf6 	bl	800877a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	7b1b      	ldrb	r3, [r3, #12]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fc1e 	bl	80087d6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	7b5b      	ldrb	r3, [r3, #13]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	7b5b      	ldrb	r3, [r3, #13]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fbe3 	bl	800877a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	7b5b      	ldrb	r3, [r3, #13]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fc0b 	bl	80087d6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f005 fb3c 	bl	800c658 <free>
    phost->pActiveClass->pData = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	3340      	adds	r3, #64	; 0x40
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f8b2 	bl	800717a <GetLineCoding>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d105      	bne.n	800702c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007026:	2102      	movs	r1, #2
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
  }
  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007058:	2b04      	cmp	r3, #4
 800705a:	d877      	bhi.n	800714c <USBH_CDC_Process+0x114>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <USBH_CDC_Process+0x2c>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007079 	.word	0x08007079
 8007068:	0800707f 	.word	0x0800707f
 800706c:	080070af 	.word	0x080070af
 8007070:	08007123 	.word	0x08007123
 8007074:	08007131 	.word	0x08007131
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
    break;
 800707c:	e06d      	b.n	800715a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f897 	bl	80071b8 <SetLineCoding>
 800708a:	4603      	mov	r3, r0
 800708c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800709c:	e058      	b.n	8007150 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d055      	beq.n	8007150 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2204      	movs	r2, #4
 80070a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80070ac:	e050      	b.n	8007150 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	3340      	adds	r3, #64	; 0x40
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f860 	bl	800717a <GetLineCoding>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d126      	bne.n	8007112 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d6:	791b      	ldrb	r3, [r3, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d13b      	bne.n	8007154 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d133      	bne.n	8007154 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d12b      	bne.n	8007154 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007104:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007106:	429a      	cmp	r2, r3
 8007108:	d124      	bne.n	8007154 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f95a 	bl	80073c4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8007110:	e020      	b.n	8007154 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d01d      	beq.n	8007154 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2204      	movs	r2, #4
 800711c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8007120:	e018      	b.n	8007154 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f867 	bl	80071f6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f8dc 	bl	80072e6 <CDC_ProcessReception>
    break;
 800712e:	e014      	b.n	800715a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fece 	bl	8007ed4 <USBH_ClrFeature>
 8007138:	4603      	mov	r3, r0
 800713a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800714a:	e005      	b.n	8007158 <USBH_CDC_Process+0x120>

  default:
    break;
 800714c:	bf00      	nop
 800714e:	e004      	b.n	800715a <USBH_CDC_Process+0x122>
    break;
 8007150:	bf00      	nop
 8007152:	e002      	b.n	800715a <USBH_CDC_Process+0x122>
    break;
 8007154:	bf00      	nop
 8007156:	e000      	b.n	800715a <USBH_CDC_Process+0x122>
    break;
 8007158:	bf00      	nop

  }

  return status;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	22a1      	movs	r2, #161	; 0xa1
 8007188:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2221      	movs	r2, #33	; 0x21
 800718e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2207      	movs	r2, #7
 80071a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2207      	movs	r2, #7
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 f873 	bl	8008294 <USBH_CtlReq>
 80071ae:	4603      	mov	r3, r0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2221      	movs	r2, #33	; 0x21
 80071c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2207      	movs	r2, #7
 80071de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2207      	movs	r2, #7
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f854 	bl	8008294 <USBH_CtlReq>
 80071ec:	4603      	mov	r3, r0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af02      	add	r7, sp, #8
 80071fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007208:	2300      	movs	r3, #0
 800720a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007212:	2b01      	cmp	r3, #1
 8007214:	d002      	beq.n	800721c <CDC_ProcessTransmission+0x26>
 8007216:	2b02      	cmp	r3, #2
 8007218:	d025      	beq.n	8007266 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800721a:	e060      	b.n	80072de <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	8b12      	ldrh	r2, [r2, #24]
 8007224:	4293      	cmp	r3, r2
 8007226:	d90c      	bls.n	8007242 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	69d9      	ldr	r1, [r3, #28]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8b1a      	ldrh	r2, [r3, #24]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	7b58      	ldrb	r0, [r3, #13]
 8007234:	2301      	movs	r3, #1
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4603      	mov	r3, r0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fa3b 	bl	80086b6 <USBH_BulkSendData>
 8007240:	e00c      	b.n	800725c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	7b58      	ldrb	r0, [r3, #13]
 8007250:	2301      	movs	r3, #1
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fa2d 	bl	80086b6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007264:	e03b      	b.n	80072de <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	7b5b      	ldrb	r3, [r3, #13]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f005 f911 	bl	800c494 <USBH_LL_GetURBState>
 8007272:	4603      	mov	r3, r0
 8007274:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d128      	bne.n	80072ce <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	8b12      	ldrh	r2, [r2, #24]
 8007284:	4293      	cmp	r3, r2
 8007286:	d90e      	bls.n	80072a6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	8b12      	ldrh	r2, [r2, #24]
 8007290:	1a9a      	subs	r2, r3, r2
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	8b12      	ldrh	r2, [r2, #24]
 800729e:	441a      	add	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	61da      	str	r2, [r3, #28]
 80072a4:	e002      	b.n	80072ac <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80072bc:	e00e      	b.n	80072dc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f868 	bl	800739c <USBH_CDC_TransmitCallback>
    break;
 80072cc:	e006      	b.n	80072dc <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d103      	bne.n	80072dc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80072dc:	bf00      	nop
  }
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072f8:	2300      	movs	r3, #0
 80072fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007302:	2b03      	cmp	r3, #3
 8007304:	d002      	beq.n	800730c <CDC_ProcessReception+0x26>
 8007306:	2b04      	cmp	r3, #4
 8007308:	d00e      	beq.n	8007328 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800730a:	e043      	b.n	8007394 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6a19      	ldr	r1, [r3, #32]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	8b5a      	ldrh	r2, [r3, #26]
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	7b1b      	ldrb	r3, [r3, #12]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 f9f1 	bl	8008700 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2204      	movs	r2, #4
 8007322:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007326:	e035      	b.n	8007394 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	7b1b      	ldrb	r3, [r3, #12]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f005 f8b0 	bl	800c494 <USBH_LL_GetURBState>
 8007334:	4603      	mov	r3, r0
 8007336:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8007338:	7cfb      	ldrb	r3, [r7, #19]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d129      	bne.n	8007392 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	7b1b      	ldrb	r3, [r3, #12]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f005 f813 	bl	800c370 <USBH_LL_GetLastXferSize>
 800734a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	429a      	cmp	r2, r3
 8007354:	d016      	beq.n	8007384 <CDC_ProcessReception+0x9e>
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	8b5b      	ldrh	r3, [r3, #26]
 800735a:	461a      	mov	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4293      	cmp	r3, r2
 8007360:	d910      	bls.n	8007384 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad2      	subs	r2, r2, r3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6a1a      	ldr	r2, [r3, #32]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	441a      	add	r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2203      	movs	r2, #3
 800737e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007382:	e006      	b.n	8007392 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f80f 	bl	80073b0 <USBH_CDC_ReceiveCallback>
    break;
 8007392:	bf00      	nop
  }
}
 8007394:	bf00      	nop
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]

}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]

}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073ec:	2302      	movs	r3, #2
 80073ee:	e019      	b.n	8007424 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	79fa      	ldrb	r2, [r7, #7]
 80073f4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f80f 	bl	800742c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f004 feeb 	bl	800c1f8 <USBH_LL_Init>

  return USBH_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007438:	e008      	b.n	800744c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	32e0      	adds	r2, #224	; 0xe0
 8007440:	2100      	movs	r1, #0
 8007442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b0e      	cmp	r3, #14
 8007450:	d9f3      	bls.n	800743a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	e009      	b.n	800746c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007472:	d3f1      	bcc.n	8007458 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2240      	movs	r2, #64	; 0x40
 8007498:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d017      	beq.n	8007502 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10f      	bne.n	80074fc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	33dc      	adds	r3, #220	; 0xdc
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
 80074fa:	e004      	b.n	8007506 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074fc:	2302      	movs	r3, #2
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	e001      	b.n	8007506 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007502:	2302      	movs	r3, #2
 8007504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	429a      	cmp	r2, r3
 800752e:	d204      	bcs.n	800753a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007538:	e001      	b.n	800753e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800753a:	2302      	movs	r3, #2
 800753c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	4603      	mov	r3, r0
 800755c:	70fb      	strb	r3, [r7, #3]
 800755e:	460b      	mov	r3, r1
 8007560:	70bb      	strb	r3, [r7, #2]
 8007562:	4613      	mov	r3, r2
 8007564:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800756a:	2300      	movs	r3, #0
 800756c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007574:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007576:	e025      	b.n	80075c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	221a      	movs	r2, #26
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	3308      	adds	r3, #8
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	3302      	adds	r3, #2
 8007588:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	429a      	cmp	r2, r3
 8007592:	d002      	beq.n	800759a <USBH_FindInterface+0x4e>
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	2bff      	cmp	r3, #255	; 0xff
 8007598:	d111      	bne.n	80075be <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800759e:	78ba      	ldrb	r2, [r7, #2]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d002      	beq.n	80075aa <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80075a4:	78bb      	ldrb	r3, [r7, #2]
 80075a6:	2bff      	cmp	r3, #255	; 0xff
 80075a8:	d109      	bne.n	80075be <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80075ae:	787a      	ldrb	r2, [r7, #1]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d002      	beq.n	80075ba <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075b4:	787b      	ldrb	r3, [r7, #1]
 80075b6:	2bff      	cmp	r3, #255	; 0xff
 80075b8:	d101      	bne.n	80075be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	e006      	b.n	80075cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	3301      	adds	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d9d6      	bls.n	8007578 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80075ca:	23ff      	movs	r3, #255	; 0xff
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f004 fe4f 	bl	800c284 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80075e6:	2101      	movs	r1, #1
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f004 ff66 	bl	800c4ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af04      	add	r7, sp, #16
 80075fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007600:	2302      	movs	r3, #2
 8007602:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 faec 	bl	8007be6 <USBH_IsPortEnabled>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10c      	bne.n	800762e <USBH_Process+0x36>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b03      	cmp	r3, #3
 8007626:	d002      	beq.n	800762e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2203      	movs	r2, #3
 800762c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b0b      	cmp	r3, #11
 8007636:	f200 814c 	bhi.w	80078d2 <USBH_Process+0x2da>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <USBH_Process+0x48>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007671 	.word	0x08007671
 8007644:	08007693 	.word	0x08007693
 8007648:	080076a7 	.word	0x080076a7
 800764c:	080078ad 	.word	0x080078ad
 8007650:	080078d3 	.word	0x080078d3
 8007654:	08007735 	.word	0x08007735
 8007658:	08007863 	.word	0x08007863
 800765c:	08007765 	.word	0x08007765
 8007660:	08007785 	.word	0x08007785
 8007664:	080077a5 	.word	0x080077a5
 8007668:	080077d3 	.word	0x080077d3
 800766c:	08007895 	.word	0x08007895
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 812c 	beq.w	80078d6 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007684:	20c8      	movs	r0, #200	; 0xc8
 8007686:	f004 ff62 	bl	800c54e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f004 fe55 	bl	800c33a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007690:	e121      	b.n	80078d6 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007698:	2b01      	cmp	r3, #1
 800769a:	f040 811e 	bne.w	80078da <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	701a      	strb	r2, [r3, #0]
    }
    break;
 80076a4:	e119      	b.n	80078da <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80076a6:	2064      	movs	r0, #100	; 0x64
 80076a8:	f004 ff51 	bl	800c54e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f004 fe1f 	bl	800c2f0 <USBH_LL_GetSpeed>
 80076b2:	4603      	mov	r3, r0
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2205      	movs	r2, #5
 80076c0:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80076c2:	2100      	movs	r1, #0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f868 	bl	800879a <USBH_AllocPipe>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 f860 	bl	800879a <USBH_AllocPipe>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7919      	ldrb	r1, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80076f6:	b292      	uxth	r2, r2
 80076f8:	9202      	str	r2, [sp, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	9201      	str	r2, [sp, #4]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	4603      	mov	r3, r0
 8007702:	2280      	movs	r2, #128	; 0x80
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 f819 	bl	800873c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7959      	ldrb	r1, [r3, #5]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800771e:	b292      	uxth	r2, r2
 8007720:	9202      	str	r2, [sp, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	9201      	str	r2, [sp, #4]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	4603      	mov	r3, r0
 800772a:	2200      	movs	r2, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f805 	bl	800873c <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007732:	e0e3      	b.n	80078fc <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f8e7 	bl	8007908 <USBH_HandleEnum>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	f040 80ce 	bne.w	80078de <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007750:	2b01      	cmp	r3, #1
 8007752:	d103      	bne.n	800775c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2208      	movs	r2, #8
 8007758:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800775a:	e0c0      	b.n	80078de <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2207      	movs	r2, #7
 8007760:	701a      	strb	r2, [r3, #0]
    break;
 8007762:	e0bc      	b.n	80078de <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80b9 	beq.w	80078e2 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007776:	2101      	movs	r1, #1
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2208      	movs	r2, #8
 8007780:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007782:	e0ae      	b.n	80078e2 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800778a:	b29b      	uxth	r3, r3
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fb59 	bl	8007e46 <USBH_SetCfg>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 80a5 	bne.w	80078e6 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2209      	movs	r2, #9
 80077a0:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80077a2:	e0a0      	b.n	80078e6 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80077b2:	2101      	movs	r1, #1
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fb69 	bl	8007e8c <USBH_SetFeature>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 8094 	bne.w	80078ea <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	220a      	movs	r2, #10
 80077c6:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80077c8:	e08f      	b.n	80078ea <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	220a      	movs	r2, #10
 80077ce:	701a      	strb	r2, [r3, #0]
    break;
 80077d0:	e08b      	b.n	80078ea <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8088 	beq.w	80078ee <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
 80077ea:	e017      	b.n	800781c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	33dc      	adds	r3, #220	; 0xdc
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	791a      	ldrb	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007800:	429a      	cmp	r2, r3
 8007802:	d108      	bne.n	8007816 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	33dc      	adds	r3, #220	; 0xdc
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	3301      	adds	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0e4      	beq.n	80077ec <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007828:	2b00      	cmp	r3, #0
 800782a:	d016      	beq.n	800785a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	4798      	blx	r3
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2206      	movs	r2, #6
 8007842:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800784a:	2103      	movs	r1, #3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007850:	e04d      	b.n	80078ee <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	220d      	movs	r2, #13
 8007856:	701a      	strb	r2, [r3, #0]
    break;
 8007858:	e049      	b.n	80078ee <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	220d      	movs	r2, #13
 800785e:	701a      	strb	r2, [r3, #0]
    break;
 8007860:	e045      	b.n	80078ee <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00f      	beq.n	800788c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
 8007878:	4603      	mov	r3, r0
 800787a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d136      	bne.n	80078f2 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220b      	movs	r2, #11
 8007888:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800788a:	e032      	b.n	80078f2 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	220d      	movs	r2, #13
 8007890:	701a      	strb	r2, [r3, #0]
    break;
 8007892:	e02e      	b.n	80078f2 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800789a:	2b00      	cmp	r3, #0
 800789c:	d02b      	beq.n	80078f6 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
    }
    break;
 80078aa:	e024      	b.n	80078f6 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff fdbd 	bl	800742c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01e      	beq.n	80078fa <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80078d0:	e013      	b.n	80078fa <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80078d2:	bf00      	nop
 80078d4:	e012      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078d6:	bf00      	nop
 80078d8:	e010      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078da:	bf00      	nop
 80078dc:	e00e      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078de:	bf00      	nop
 80078e0:	e00c      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078e2:	bf00      	nop
 80078e4:	e00a      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078e6:	bf00      	nop
 80078e8:	e008      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078ea:	bf00      	nop
 80078ec:	e006      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078ee:	bf00      	nop
 80078f0:	e004      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078f2:	bf00      	nop
 80078f4:	e002      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078f6:	bf00      	nop
 80078f8:	e000      	b.n	80078fc <USBH_Process+0x304>
    break;
 80078fa:	bf00      	nop
  }
 return USBH_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af04      	add	r7, sp, #16
 800790e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	2b07      	cmp	r3, #7
 800791a:	f200 80f8 	bhi.w	8007b0e <USBH_HandleEnum+0x206>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <USBH_HandleEnum+0x1c>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007945 	.word	0x08007945
 8007928:	080079b7 	.word	0x080079b7
 800792c:	080079cf 	.word	0x080079cf
 8007930:	08007a45 	.word	0x08007a45
 8007934:	08007a5b 	.word	0x08007a5b
 8007938:	08007a77 	.word	0x08007a77
 800793c:	08007aab 	.word	0x08007aab
 8007940:	08007adf 	.word	0x08007adf
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007944:	2108      	movs	r1, #8
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9ad 	bl	8007ca6 <USBH_Get_DevDesc>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	f040 80df 	bne.w	8007b12 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7919      	ldrb	r1, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007978:	b292      	uxth	r2, r2
 800797a:	9202      	str	r2, [sp, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	9201      	str	r2, [sp, #4]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	4603      	mov	r3, r0
 8007984:	2280      	movs	r2, #128	; 0x80
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fed8 	bl	800873c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	7959      	ldrb	r1, [r3, #5]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80079a0:	b292      	uxth	r2, r2
 80079a2:	9202      	str	r2, [sp, #8]
 80079a4:	2200      	movs	r2, #0
 80079a6:	9201      	str	r2, [sp, #4]
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	4603      	mov	r3, r0
 80079ac:	2200      	movs	r2, #0
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fec4 	bl	800873c <USBH_OpenPipe>

    }
    break;
 80079b4:	e0ad      	b.n	8007b12 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80079b6:	2112      	movs	r1, #18
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f974 	bl	8007ca6 <USBH_Get_DevDesc>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 80a8 	bne.w	8007b16 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	705a      	strb	r2, [r3, #1]

    }
    break;
 80079cc:	e0a3      	b.n	8007b16 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80079ce:	2101      	movs	r1, #1
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa14 	bl	8007dfe <USBH_SetAddress>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f040 809e 	bne.w	8007b1a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80079de:	2002      	movs	r0, #2
 80079e0:	f004 fdb5 	bl	800c54e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2203      	movs	r2, #3
 80079f0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7919      	ldrb	r1, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007a06:	b292      	uxth	r2, r2
 8007a08:	9202      	str	r2, [sp, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	9201      	str	r2, [sp, #4]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4603      	mov	r3, r0
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fe91 	bl	800873c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7959      	ldrb	r1, [r3, #5]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	9201      	str	r2, [sp, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fe7d 	bl	800873c <USBH_OpenPipe>
    }
    break;
 8007a42:	e06a      	b.n	8007b1a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007a44:	2109      	movs	r1, #9
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f955 	bl	8007cf6 <USBH_Get_CfgDesc>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d165      	bne.n	8007b1e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007a58:	e061      	b.n	8007b1e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f947 	bl	8007cf6 <USBH_Get_CfgDesc>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d159      	bne.n	8007b22 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2205      	movs	r2, #5
 8007a72:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007a74:	e055      	b.n	8007b22 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d010      	beq.n	8007aa2 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007a8c:	23ff      	movs	r3, #255	; 0xff
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f955 	bl	8007d3e <USBH_Get_StringDesc>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d145      	bne.n	8007b26 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2206      	movs	r2, #6
 8007a9e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007aa0:	e041      	b.n	8007b26 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2206      	movs	r2, #6
 8007aa6:	705a      	strb	r2, [r3, #1]
    break;
 8007aa8:	e03d      	b.n	8007b26 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d010      	beq.n	8007ad6 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007ac0:	23ff      	movs	r3, #255	; 0xff
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f93b 	bl	8007d3e <USBH_Get_StringDesc>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d12d      	bne.n	8007b2a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007ad4:	e029      	b.n	8007b2a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2207      	movs	r2, #7
 8007ada:	705a      	strb	r2, [r3, #1]
    break;
 8007adc:	e025      	b.n	8007b2a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00f      	beq.n	8007b08 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007af4:	23ff      	movs	r3, #255	; 0xff
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f921 	bl	8007d3e <USBH_Get_StringDesc>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d115      	bne.n	8007b2e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007b06:	e012      	b.n	8007b2e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b0c:	e00f      	b.n	8007b2e <USBH_HandleEnum+0x226>

  default:
    break;
 8007b0e:	bf00      	nop
 8007b10:	e00e      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b12:	bf00      	nop
 8007b14:	e00c      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b16:	bf00      	nop
 8007b18:	e00a      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b1a:	bf00      	nop
 8007b1c:	e008      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b1e:	bf00      	nop
 8007b20:	e006      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b22:	bf00      	nop
 8007b24:	e004      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <USBH_HandleEnum+0x228>
    break;
 8007b2e:	bf00      	nop
  }
  return Status;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop

08007b3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f804 	bl	8007b7e <USBH_HandleSof>
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b0b      	cmp	r3, #11
 8007b8e:	d10a      	bne.n	8007ba6 <USBH_HandleSof+0x28>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007bbe:	bf00      	nop
}
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007bda:	bf00      	nop
}
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10f      	bne.n	8007c32 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00e      	beq.n	8007c42 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c2a:	2104      	movs	r1, #4
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	4798      	blx	r3
 8007c30:	e007      	b.n	8007c42 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d102      	bne.n	8007c42 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f004 fb30 	bl	800c2ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fdb8 	bl	80087d6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	795b      	ldrb	r3, [r3, #5]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fdb2 	bl	80087d6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c8a:	2105      	movs	r1, #5
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f004 faf7 	bl	800c284 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2203      	movs	r2, #3
 8007c9a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b086      	sub	sp, #24
 8007caa:	af02      	add	r7, sp, #8
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f864 	bl	8007d94 <USBH_GetDescriptor>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	b292      	uxth	r2, r2
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f000 f918 	bl	8007f1c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af02      	add	r7, sp, #8
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	331c      	adds	r3, #28
 8007d06:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007d08:	887b      	ldrh	r3, [r7, #2]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d12:	2100      	movs	r1, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f83d 	bl	8007d94 <USBH_GetDescriptor>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	72fb      	strb	r3, [r7, #11]
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d107      	bne.n	8007d34 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007d2a:	887a      	ldrh	r2, [r7, #2]
 8007d2c:	68f9      	ldr	r1, [r7, #12]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f964 	bl	8007ffc <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af02      	add	r7, sp, #8
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	72fb      	strb	r3, [r7, #11]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d5a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007d62:	893b      	ldrh	r3, [r7, #8]
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	460b      	mov	r3, r1
 8007d68:	2100      	movs	r1, #0
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f812 	bl	8007d94 <USBH_GetDescriptor>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d80:	893a      	ldrh	r2, [r7, #8]
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fa37 	bl	80081f8 <USBH_ParseStringDesc>
  }
  return status;
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	72fb      	strb	r3, [r7, #11]
 8007da2:	4613      	mov	r3, r2
 8007da4:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	789b      	ldrb	r3, [r3, #2]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d11c      	bne.n	8007de8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007dae:	7afb      	ldrb	r3, [r7, #11]
 8007db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2206      	movs	r2, #6
 8007dbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	893a      	ldrh	r2, [r7, #8]
 8007dc4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007dc6:	893b      	ldrh	r3, [r7, #8]
 8007dc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd0:	d104      	bne.n	8007ddc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f240 4209 	movw	r2, #1033	; 0x409
 8007dd8:	829a      	strh	r2, [r3, #20]
 8007dda:	e002      	b.n	8007de2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8b3a      	ldrh	r2, [r7, #24]
 8007de6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007de8:	8b3b      	ldrh	r3, [r7, #24]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fa50 	bl	8008294 <USBH_CtlReq>
 8007df4:	4603      	mov	r3, r0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d10f      	bne.n	8007e32 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2205      	movs	r2, #5
 8007e1c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007e32:	2200      	movs	r2, #0
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa2c 	bl	8008294 <USBH_CtlReq>
 8007e3c:	4603      	mov	r3, r0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	789b      	ldrb	r3, [r3, #2]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d10e      	bne.n	8007e78 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2209      	movs	r2, #9
 8007e64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	887a      	ldrh	r2, [r7, #2]
 8007e6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fa09 	bl	8008294 <USBH_CtlReq>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	789b      	ldrb	r3, [r3, #2]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10f      	bne.n	8007ec0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9e5 	bl	8008294 <USBH_CtlReq>
 8007eca:	4603      	mov	r3, r0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	789b      	ldrb	r3, [r3, #2]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d10f      	bne.n	8007f08 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f9c1 	bl	8008294 <USBH_CtlReq>
 8007f12:	4603      	mov	r3, r0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	781a      	ldrb	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	785a      	ldrb	r2, [r3, #1]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	3303      	adds	r3, #3
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	791a      	ldrb	r2, [r3, #4]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	795a      	ldrb	r2, [r3, #5]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	799a      	ldrb	r2, [r3, #6]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	79da      	ldrb	r2, [r3, #7]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d939      	bls.n	8007ff0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	3309      	adds	r3, #9
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4313      	orrs	r3, r2
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	330a      	adds	r3, #10
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	330b      	adds	r3, #11
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4313      	orrs	r3, r2
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	330d      	adds	r3, #13
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	7b9a      	ldrb	r2, [r3, #14]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	7bda      	ldrb	r2, [r3, #15]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	7c1a      	ldrb	r2, [r3, #16]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	7c5a      	ldrb	r2, [r3, #17]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	745a      	strb	r2, [r3, #17]
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	; 0x28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	781a      	ldrb	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	785a      	ldrb	r2, [r3, #1]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3302      	adds	r3, #2
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	b29a      	uxth	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3303      	adds	r3, #3
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	b29b      	uxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	791a      	ldrb	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	795a      	ldrb	r2, [r3, #5]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	799a      	ldrb	r2, [r3, #6]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	79da      	ldrb	r2, [r3, #7]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	7a1a      	ldrb	r2, [r3, #8]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	2b09      	cmp	r3, #9
 8008076:	d95f      	bls.n	8008138 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008078:	2309      	movs	r3, #9
 800807a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008080:	e051      	b.n	8008126 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008082:	f107 0316 	add.w	r3, r7, #22
 8008086:	4619      	mov	r1, r3
 8008088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800808a:	f000 f8e8 	bl	800825e <USBH_GetNextDesc>
 800808e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	2b04      	cmp	r3, #4
 8008096:	d146      	bne.n	8008126 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800809c:	221a      	movs	r2, #26
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	3308      	adds	r3, #8
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	3302      	adds	r3, #2
 80080aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80080ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080ae:	69f8      	ldr	r0, [r7, #28]
 80080b0:	f000 f846 	bl	8008140 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080be:	e022      	b.n	8008106 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80080c0:	f107 0316 	add.w	r3, r7, #22
 80080c4:	4619      	mov	r1, r3
 80080c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080c8:	f000 f8c9 	bl	800825e <USBH_GetNextDesc>
 80080cc:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	d117      	bne.n	8008106 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80080d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80080de:	3201      	adds	r2, #1
 80080e0:	00d2      	lsls	r2, r2, #3
 80080e2:	211a      	movs	r1, #26
 80080e4:	fb01 f303 	mul.w	r3, r1, r3
 80080e8:	4413      	add	r3, r2
 80080ea:	3308      	adds	r3, #8
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	3304      	adds	r3, #4
 80080f2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80080f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080f6:	69b8      	ldr	r0, [r7, #24]
 80080f8:	f000 f851 	bl	800819e <USBH_ParseEPDesc>
            ep_ix++;
 80080fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008100:	3301      	adds	r3, #1
 8008102:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800810e:	429a      	cmp	r2, r3
 8008110:	d204      	bcs.n	800811c <USBH_ParseCfgDesc+0x120>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	885a      	ldrh	r2, [r3, #2]
 8008116:	8afb      	ldrh	r3, [r7, #22]
 8008118:	429a      	cmp	r2, r3
 800811a:	d8d1      	bhi.n	80080c0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800811c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008120:	3301      	adds	r3, #1
 8008122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008126:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800812a:	2b01      	cmp	r3, #1
 800812c:	d804      	bhi.n	8008138 <USBH_ParseCfgDesc+0x13c>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	885a      	ldrh	r2, [r3, #2]
 8008132:	8afb      	ldrh	r3, [r7, #22]
 8008134:	429a      	cmp	r2, r3
 8008136:	d8a4      	bhi.n	8008082 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008138:	bf00      	nop
 800813a:	3728      	adds	r7, #40	; 0x28
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	785a      	ldrb	r2, [r3, #1]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	789a      	ldrb	r2, [r3, #2]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	78da      	ldrb	r2, [r3, #3]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	791a      	ldrb	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	795a      	ldrb	r2, [r3, #5]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	799a      	ldrb	r2, [r3, #6]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	79da      	ldrb	r2, [r3, #7]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	7a1a      	ldrb	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	721a      	strb	r2, [r3, #8]
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	785a      	ldrb	r2, [r3, #1]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	789a      	ldrb	r2, [r3, #2]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	78da      	ldrb	r2, [r3, #3]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	3304      	adds	r3, #4
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	3305      	adds	r3, #5
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4313      	orrs	r3, r2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	799a      	ldrb	r2, [r3, #6]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	719a      	strb	r2, [r3, #6]
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	4613      	mov	r3, r2
 8008204:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b03      	cmp	r3, #3
 800820e:	d120      	bne.n	8008252 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	1e9a      	subs	r2, r3, #2
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	4293      	cmp	r3, r2
 800821a:	bf28      	it	cs
 800821c:	4613      	movcs	r3, r2
 800821e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3302      	adds	r3, #2
 8008224:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008226:	2300      	movs	r3, #0
 8008228:	82fb      	strh	r3, [r7, #22]
 800822a:	e00b      	b.n	8008244 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800822c:	8afb      	ldrh	r3, [r7, #22]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	781a      	ldrb	r2, [r3, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3301      	adds	r3, #1
 800823c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800823e:	8afb      	ldrh	r3, [r7, #22]
 8008240:	3302      	adds	r3, #2
 8008242:	82fb      	strh	r3, [r7, #22]
 8008244:	8afa      	ldrh	r2, [r7, #22]
 8008246:	8abb      	ldrh	r3, [r7, #20]
 8008248:	429a      	cmp	r2, r3
 800824a:	d3ef      	bcc.n	800822c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]
  }
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	881a      	ldrh	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	4413      	add	r3, r2
 8008274:	b29a      	uxth	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4413      	add	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008286:	68fb      	ldr	r3, [r7, #12]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80082a2:	2301      	movs	r3, #1
 80082a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d002      	beq.n	80082b4 <USBH_CtlReq+0x20>
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d00f      	beq.n	80082d2 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80082b2:	e034      	b.n	800831e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	88fa      	ldrh	r2, [r7, #6]
 80082be:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2202      	movs	r2, #2
 80082ca:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80082cc:	2301      	movs	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]
    break;
 80082d0:	e025      	b.n	800831e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f828 	bl	8008328 <USBH_HandleControl>
 80082d8:	4603      	mov	r3, r0
 80082da:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d108      	bne.n	80082f4 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	75fb      	strb	r3, [r7, #23]
    break;
 80082f2:	e013      	b.n	800831c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d108      	bne.n	800830c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008306:	2303      	movs	r3, #3
 8008308:	75fb      	strb	r3, [r7, #23]
    break;
 800830a:	e007      	b.n	800831c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d104      	bne.n	800831c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2201      	movs	r2, #1
 8008316:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008318:	2302      	movs	r3, #2
 800831a:	75fb      	strb	r3, [r7, #23]
    break;
 800831c:	bf00      	nop
  }
  return status;
 800831e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af02      	add	r7, sp, #8
 800832e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008330:	2301      	movs	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008334:	2300      	movs	r3, #0
 8008336:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	7e1b      	ldrb	r3, [r3, #24]
 800833c:	3b01      	subs	r3, #1
 800833e:	2b0a      	cmp	r3, #10
 8008340:	f200 814c 	bhi.w	80085dc <USBH_HandleControl+0x2b4>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <USBH_HandleControl+0x24>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008379 	.word	0x08008379
 8008350:	08008393 	.word	0x08008393
 8008354:	080083fd 	.word	0x080083fd
 8008358:	08008423 	.word	0x08008423
 800835c:	0800845b 	.word	0x0800845b
 8008360:	08008487 	.word	0x08008487
 8008364:	080084d9 	.word	0x080084d9
 8008368:	080084fb 	.word	0x080084fb
 800836c:	08008537 	.word	0x08008537
 8008370:	0800855f 	.word	0x0800855f
 8008374:	0800859d 	.word	0x0800859d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f103 0110 	add.w	r1, r3, #16
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	795b      	ldrb	r3, [r3, #5]
 8008382:	461a      	mov	r2, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f939 	bl	80085fc <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	761a      	strb	r2, [r3, #24]
    break;
 8008390:	e12f      	b.n	80085f2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	795b      	ldrb	r3, [r3, #5]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f004 f87b 	bl	800c494 <USBH_LL_GetURBState>
 800839e:	4603      	mov	r3, r0
 80083a0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d11e      	bne.n	80083e6 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	7c1b      	ldrb	r3, [r3, #16]
 80083ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083b0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	8adb      	ldrh	r3, [r3, #22]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80083ba:	7b7b      	ldrb	r3, [r7, #13]
 80083bc:	2b80      	cmp	r3, #128	; 0x80
 80083be:	d103      	bne.n	80083c8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2203      	movs	r2, #3
 80083c4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083c6:	e10b      	b.n	80085e0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2205      	movs	r2, #5
 80083cc:	761a      	strb	r2, [r3, #24]
    break;
 80083ce:	e107      	b.n	80085e0 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80083d0:	7b7b      	ldrb	r3, [r7, #13]
 80083d2:	2b80      	cmp	r3, #128	; 0x80
 80083d4:	d103      	bne.n	80083de <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2209      	movs	r2, #9
 80083da:	761a      	strb	r2, [r3, #24]
    break;
 80083dc:	e100      	b.n	80085e0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2207      	movs	r2, #7
 80083e2:	761a      	strb	r2, [r3, #24]
    break;
 80083e4:	e0fc      	b.n	80085e0 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d003      	beq.n	80083f4 <USBH_HandleControl+0xcc>
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	f040 80f6 	bne.w	80085e0 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	220b      	movs	r2, #11
 80083f8:	761a      	strb	r2, [r3, #24]
    break;
 80083fa:	e0f1      	b.n	80085e0 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6899      	ldr	r1, [r3, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	899a      	ldrh	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	791b      	ldrb	r3, [r3, #4]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f930 	bl	800867a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2204      	movs	r2, #4
 800841e:	761a      	strb	r2, [r3, #24]
    break;
 8008420:	e0e7      	b.n	80085f2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	791b      	ldrb	r3, [r3, #4]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f004 f833 	bl	800c494 <USBH_LL_GetURBState>
 800842e:	4603      	mov	r3, r0
 8008430:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d102      	bne.n	800843e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2209      	movs	r2, #9
 800843c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b05      	cmp	r3, #5
 8008442:	d102      	bne.n	800844a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008444:	2303      	movs	r3, #3
 8008446:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008448:	e0cc      	b.n	80085e4 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b04      	cmp	r3, #4
 800844e:	f040 80c9 	bne.w	80085e4 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	220b      	movs	r2, #11
 8008456:	761a      	strb	r2, [r3, #24]
    break;
 8008458:	e0c4      	b.n	80085e4 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6899      	ldr	r1, [r3, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	899a      	ldrh	r2, [r3, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	7958      	ldrb	r0, [r3, #5]
 8008466:	2301      	movs	r3, #1
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4603      	mov	r3, r0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f8df 	bl	8008630 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008478:	b29a      	uxth	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2206      	movs	r2, #6
 8008482:	761a      	strb	r2, [r3, #24]
    break;
 8008484:	e0b5      	b.n	80085f2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	795b      	ldrb	r3, [r3, #5]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f004 f801 	bl	800c494 <USBH_LL_GetURBState>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d103      	bne.n	80084a4 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2207      	movs	r2, #7
 80084a0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80084a2:	e0a1      	b.n	80085e8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d105      	bne.n	80084b6 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220c      	movs	r2, #12
 80084ae:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80084b0:	2303      	movs	r3, #3
 80084b2:	73fb      	strb	r3, [r7, #15]
    break;
 80084b4:	e098      	b.n	80085e8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d103      	bne.n	80084c4 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2205      	movs	r2, #5
 80084c0:	761a      	strb	r2, [r3, #24]
    break;
 80084c2:	e091      	b.n	80085e8 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	f040 808e 	bne.w	80085e8 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	220b      	movs	r2, #11
 80084d0:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80084d2:	2302      	movs	r3, #2
 80084d4:	73fb      	strb	r3, [r7, #15]
    break;
 80084d6:	e087      	b.n	80085e8 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	2100      	movs	r1, #0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f8ca 	bl	800867a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2208      	movs	r2, #8
 80084f6:	761a      	strb	r2, [r3, #24]

    break;
 80084f8:	e07b      	b.n	80085f2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	791b      	ldrb	r3, [r3, #4]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f003 ffc7 	bl	800c494 <USBH_LL_GetURBState>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d105      	bne.n	800851c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	220d      	movs	r2, #13
 8008514:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800851a:	e067      	b.n	80085ec <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b04      	cmp	r3, #4
 8008520:	d103      	bne.n	800852a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220b      	movs	r2, #11
 8008526:	761a      	strb	r2, [r3, #24]
    break;
 8008528:	e060      	b.n	80085ec <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	2b05      	cmp	r3, #5
 800852e:	d15d      	bne.n	80085ec <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8008530:	2303      	movs	r3, #3
 8008532:	73fb      	strb	r3, [r7, #15]
    break;
 8008534:	e05a      	b.n	80085ec <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	795a      	ldrb	r2, [r3, #5]
 800853a:	2301      	movs	r3, #1
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	4613      	mov	r3, r2
 8008540:	2200      	movs	r2, #0
 8008542:	2100      	movs	r1, #0
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f873 	bl	8008630 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	220a      	movs	r2, #10
 800855a:	761a      	strb	r2, [r3, #24]
    break;
 800855c:	e049      	b.n	80085f2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	795b      	ldrb	r3, [r3, #5]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f003 ff95 	bl	800c494 <USBH_LL_GetURBState>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d105      	bne.n	8008580 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	220d      	movs	r2, #13
 800857c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800857e:	e037      	b.n	80085f0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d103      	bne.n	800858e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2209      	movs	r2, #9
 800858a:	761a      	strb	r2, [r3, #24]
    break;
 800858c:	e030      	b.n	80085f0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d12d      	bne.n	80085f0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	220b      	movs	r2, #11
 8008598:	761a      	strb	r2, [r3, #24]
    break;
 800859a:	e029      	b.n	80085f0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7e5b      	ldrb	r3, [r3, #25]
 80085a0:	3301      	adds	r3, #1
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	765a      	strb	r2, [r3, #25]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	7e5b      	ldrb	r3, [r3, #25]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d809      	bhi.n	80085c4 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f003 fe82 	bl	800c2ba <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80085c2:	e016      	b.n	80085f2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80085ca:	2106      	movs	r1, #6
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80085d6:	2302      	movs	r3, #2
 80085d8:	73fb      	strb	r3, [r7, #15]
    break;
 80085da:	e00a      	b.n	80085f2 <USBH_HandleControl+0x2ca>

  default:
    break;
 80085dc:	bf00      	nop
 80085de:	e008      	b.n	80085f2 <USBH_HandleControl+0x2ca>
    break;
 80085e0:	bf00      	nop
 80085e2:	e006      	b.n	80085f2 <USBH_HandleControl+0x2ca>
    break;
 80085e4:	bf00      	nop
 80085e6:	e004      	b.n	80085f2 <USBH_HandleControl+0x2ca>
    break;
 80085e8:	bf00      	nop
 80085ea:	e002      	b.n	80085f2 <USBH_HandleControl+0x2ca>
    break;
 80085ec:	bf00      	nop
 80085ee:	e000      	b.n	80085f2 <USBH_HandleControl+0x2ca>
    break;
 80085f0:	bf00      	nop
  }
  return status;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af04      	add	r7, sp, #16
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800860a:	79f9      	ldrb	r1, [r7, #7]
 800860c:	2300      	movs	r3, #0
 800860e:	9303      	str	r3, [sp, #12]
 8008610:	2308      	movs	r3, #8
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	2300      	movs	r3, #0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	2200      	movs	r2, #0
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f003 ff06 	bl	800c432 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af04      	add	r7, sp, #16
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4611      	mov	r1, r2
 800863c:	461a      	mov	r2, r3
 800863e:	460b      	mov	r3, r1
 8008640:	80fb      	strh	r3, [r7, #6]
 8008642:	4613      	mov	r3, r2
 8008644:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008654:	7979      	ldrb	r1, [r7, #5]
 8008656:	7e3b      	ldrb	r3, [r7, #24]
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	2301      	movs	r3, #1
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2300      	movs	r3, #0
 8008668:	2200      	movs	r2, #0
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f003 fee1 	bl	800c432 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b088      	sub	sp, #32
 800867e:	af04      	add	r7, sp, #16
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	4611      	mov	r1, r2
 8008686:	461a      	mov	r2, r3
 8008688:	460b      	mov	r3, r1
 800868a:	80fb      	strh	r3, [r7, #6]
 800868c:	4613      	mov	r3, r2
 800868e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008690:	7979      	ldrb	r1, [r7, #5]
 8008692:	2300      	movs	r3, #0
 8008694:	9303      	str	r3, [sp, #12]
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	9302      	str	r3, [sp, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	2301      	movs	r3, #1
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	2201      	movs	r2, #1
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f003 fec3 	bl	800c432 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086ac:	2300      	movs	r3, #0

}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b088      	sub	sp, #32
 80086ba:	af04      	add	r7, sp, #16
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	4611      	mov	r1, r2
 80086c2:	461a      	mov	r2, r3
 80086c4:	460b      	mov	r3, r1
 80086c6:	80fb      	strh	r3, [r7, #6]
 80086c8:	4613      	mov	r3, r2
 80086ca:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80086da:	7979      	ldrb	r1, [r7, #5]
 80086dc:	7e3b      	ldrb	r3, [r7, #24]
 80086de:	9303      	str	r3, [sp, #12]
 80086e0:	88fb      	ldrh	r3, [r7, #6]
 80086e2:	9302      	str	r3, [sp, #8]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	2301      	movs	r3, #1
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	2302      	movs	r3, #2
 80086ee:	2200      	movs	r2, #0
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f003 fe9e 	bl	800c432 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b088      	sub	sp, #32
 8008704:	af04      	add	r7, sp, #16
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4611      	mov	r1, r2
 800870c:	461a      	mov	r2, r3
 800870e:	460b      	mov	r3, r1
 8008710:	80fb      	strh	r3, [r7, #6]
 8008712:	4613      	mov	r3, r2
 8008714:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008716:	7979      	ldrb	r1, [r7, #5]
 8008718:	2300      	movs	r3, #0
 800871a:	9303      	str	r3, [sp, #12]
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	2301      	movs	r3, #1
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	2302      	movs	r3, #2
 800872a:	2201      	movs	r2, #1
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f003 fe80 	bl	800c432 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af04      	add	r7, sp, #16
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	4603      	mov	r3, r0
 800874c:	70fb      	strb	r3, [r7, #3]
 800874e:	460b      	mov	r3, r1
 8008750:	70bb      	strb	r3, [r7, #2]
 8008752:	4613      	mov	r3, r2
 8008754:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008756:	7878      	ldrb	r0, [r7, #1]
 8008758:	78ba      	ldrb	r2, [r7, #2]
 800875a:	78f9      	ldrb	r1, [r7, #3]
 800875c:	8b3b      	ldrh	r3, [r7, #24]
 800875e:	9302      	str	r3, [sp, #8]
 8008760:	7d3b      	ldrb	r3, [r7, #20]
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	7c3b      	ldrb	r3, [r7, #16]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4603      	mov	r3, r0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f003 fe13 	bl	800c396 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008770:	2300      	movs	r3, #0

}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f003 fe32 	bl	800c3f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008790:	2300      	movs	r3, #0

}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f831 	bl	800880e <USBH_GetFreePipe>
 80087ac:	4603      	mov	r3, r0
 80087ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80087b0:	89fb      	ldrh	r3, [r7, #14]
 80087b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d007      	beq.n	80087ca <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	89fa      	ldrh	r2, [r7, #14]
 80087be:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	32e0      	adds	r2, #224	; 0xe0
 80087c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80087ca:	89fb      	ldrh	r3, [r7, #14]
 80087cc:	b2db      	uxtb	r3, r3
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	2b0a      	cmp	r3, #10
 80087e6:	d80b      	bhi.n	8008800 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80087e8:	78fa      	ldrb	r2, [r7, #3]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32e0      	adds	r2, #224	; 0xe0
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	32e0      	adds	r2, #224	; 0xe0
 80087fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800880e:	b480      	push	{r7}
 8008810:	b085      	sub	sp, #20
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
 800881e:	e00e      	b.n	800883e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008820:	7bfa      	ldrb	r2, [r7, #15]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	32e0      	adds	r2, #224	; 0xe0
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	b29b      	uxth	r3, r3
 8008836:	e007      	b.n	8008848 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	3301      	adds	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b0a      	cmp	r3, #10
 8008842:	d9ed      	bls.n	8008820 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008844:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <lv_debug_check_null>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
    if(p) return true;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <lv_debug_check_null+0x12>
 8008862:	2301      	movs	r3, #1
 8008864:	e000      	b.n	8008868 <lv_debug_check_null+0x14>

    return false;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b0c8      	sub	sp, #288	; 0x120
 8008878:	af00      	add	r7, sp, #0
 800887a:	f107 010c 	add.w	r1, r7, #12
 800887e:	6008      	str	r0, [r1, #0]
 8008880:	4639      	mov	r1, r7
 8008882:	e9c1 2300 	strd	r2, r3, [r1]
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
 8008886:	f107 030c 	add.w	r3, r7, #12
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	f7f7 fcb8 	bl	8000200 <strlen>
 8008890:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    uint32_t value_len = sizeof(unsigned long int);
 8008894:	2304      	movs	r3, #4
 8008896:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    if(msg_len < 230) {
 800889a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889e:	2be5      	cmp	r3, #229	; 0xe5
 80088a0:	d871      	bhi.n	8008986 <lv_debug_log_error+0x112>
        char buf[255];
        char * bufp = buf;
 80088a2:	f107 0310 	add.w	r3, r7, #16
 80088a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add the function name*/
        memcpy(bufp, msg, msg_len);
 80088aa:	f107 030c 	add.w	r3, r7, #12
 80088ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80088b8:	f003 fed6 	bl	800c668 <memcpy>
        bufp += msg_len;
 80088bc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c4:	4413      	add	r3, r2
 80088c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add value in hey*/
        *bufp = ' ';
 80088ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088ce:	2220      	movs	r2, #32
 80088d0:	701a      	strb	r2, [r3, #0]
        bufp ++;
 80088d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088d6:	3301      	adds	r3, #1
 80088d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '(';
 80088dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088e0:	2228      	movs	r2, #40	; 0x28
 80088e2:	701a      	strb	r2, [r3, #0]
        bufp ++;
 80088e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088e8:	3301      	adds	r3, #1
 80088ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '0';
 80088ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088f2:	2230      	movs	r2, #48	; 0x30
 80088f4:	701a      	strb	r2, [r3, #0]
        bufp ++;
 80088f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088fa:	3301      	adds	r3, #1
 80088fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = 'x';
 8008900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008904:	2278      	movs	r2, #120	; 0x78
 8008906:	701a      	strb	r2, [r3, #0]
        bufp ++;
 8008908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800890c:	3301      	adds	r3, #1
 800890e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        int8_t i;
        for(i = value_len * 2 - 1; i >= 0; i--) {
 8008912:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008916:	b2db      	uxtb	r3, r3
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8008924:	e01e      	b.n	8008964 <lv_debug_log_error+0xf0>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
 8008926:	463b      	mov	r3, r7
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	fa22 f303 	lsr.w	r3, r2, r3
 8008934:	b2db      	uxtb	r3, r3
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

            *bufp = hex[x];
 800893e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008942:	4a13      	ldr	r2, [pc, #76]	; (8008990 <lv_debug_log_error+0x11c>)
 8008944:	5cd2      	ldrb	r2, [r2, r3]
 8008946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800894a:	701a      	strb	r2, [r3, #0]
            bufp++;
 800894c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008950:	3301      	adds	r3, #1
 8008952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for(i = value_len * 2 - 1; i >= 0; i--) {
 8008956:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 800895a:	b2db      	uxtb	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8008964:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 8008968:	2b00      	cmp	r3, #0
 800896a:	dadc      	bge.n	8008926 <lv_debug_log_error+0xb2>
        }

        *bufp = ')';
 800896c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008970:	2229      	movs	r2, #41	; 0x29
 8008972:	701a      	strb	r2, [r3, #0]
        bufp ++;
 8008974:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008978:	3301      	adds	r3, #1
 800897a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        *bufp = '\0';
 800897e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
        LV_LOG_ERROR(buf);
    } else {
        LV_LOG_ERROR(msg);
    }
}
 8008986:	bf00      	nop
 8008988:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	0800c8d0 	.word	0x0800c8d0

08008994 <lv_group_init>:

/**
 * Init. the group module
 */
void lv_group_init(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8008998:	2160      	movs	r1, #96	; 0x60
 800899a:	4802      	ldr	r0, [pc, #8]	; (80089a4 <lv_group_init+0x10>)
 800899c:	f002 fdc6 	bl	800b52c <lv_ll_init>
}
 80089a0:	bf00      	nop
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	20009704 	.word	0x20009704

080089a8 <lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void lv_indev_init(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL); /*Reset all input devices*/
 80089ac:	2000      	movs	r0, #0
 80089ae:	f000 f802 	bl	80089b6 <lv_indev_reset>
}
 80089b2:	bf00      	nop
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <lv_indev_reset>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
    if(indev)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <lv_indev_reset+0x1e>
        indev->proc.reset_query = 1;
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 80089ca:	f043 0302 	orr.w	r3, r3, #2
 80089ce:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
        }
    }
}
 80089d2:	e012      	b.n	80089fa <lv_indev_reset+0x44>
        lv_indev_t * i = lv_indev_get_next(NULL);
 80089d4:	2000      	movs	r0, #0
 80089d6:	f002 fa8f 	bl	800aef8 <lv_indev_get_next>
 80089da:	60f8      	str	r0, [r7, #12]
        while(i) {
 80089dc:	e00a      	b.n	80089f4 <lv_indev_reset+0x3e>
            i->proc.reset_query = 1;
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 80089e4:	f043 0302 	orr.w	r3, r3, #2
 80089e8:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            i = lv_indev_get_next(i);
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f002 fa83 	bl	800aef8 <lv_indev_get_next>
 80089f2:	60f8      	str	r0, [r7, #12]
        while(i) {
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f1      	bne.n	80089de <lv_indev_reset+0x28>
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8008a08:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <lv_init+0x54>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d121      	bne.n	8008a54 <lv_init+0x50>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    lv_mem_init();
 8008a10:	f002 ffa6 	bl	800b960 <lv_mem_init>
    lv_task_core_init();
 8008a14:	f003 f948 	bl	800bca8 <lv_task_core_init>

#if LV_USE_FILESYSTEM
    lv_fs_init();
 8008a18:	f002 fbf2 	bl	800b200 <lv_fs_init>
#endif

#if LV_USE_ANIMATION
    lv_anim_core_init();
 8008a1c:	f002 faba 	bl	800af94 <lv_anim_core_init>
#endif

#if LV_USE_GROUP
    lv_group_init();
 8008a20:	f7ff ffb8 	bl	8008994 <lv_group_init>
#endif

    /*Init. the sstyles*/
    lv_style_init();
 8008a24:	f000 f84e 	bl	8008ac4 <lv_style_init>

    /*Initialize the screen refresh system*/
    lv_refr_init();
 8008a28:	f000 f81c 	bl	8008a64 <lv_refr_init>

    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8008a2c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008a30:	480a      	ldr	r0, [pc, #40]	; (8008a5c <lv_init+0x58>)
 8008a32:	f002 fd7b 	bl	800b52c <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8008a36:	215c      	movs	r1, #92	; 0x5c
 8008a38:	4809      	ldr	r0, [pc, #36]	; (8008a60 <lv_init+0x5c>)
 8008a3a:	f002 fd77 	bl	800b52c <lv_ll_init>

    /*Init the input device handling*/
    lv_indev_init();
 8008a3e:	f7ff ffb3 	bl	80089a8 <lv_indev_init>

    lv_img_decoder_init();
 8008a42:	f000 fc69 	bl	8009318 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8008a46:	2001      	movs	r0, #1
 8008a48:	f000 fb78 	bl	800913c <lv_img_cache_set_size>

    lv_initialized = true;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <lv_init+0x54>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	e000      	b.n	8008a56 <lv_init+0x52>
        return;
 8008a54:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	2000109c 	.word	0x2000109c
 8008a5c:	200096cc 	.word	0x200096cc
 8008a60:	200096bc 	.word	0x200096bc

08008a64 <lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void lv_refr_init(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 8008a68:	bf00      	nop
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8008a72:	b490      	push	{r4, r7}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4622      	mov	r2, r4
 8008a80:	71fa      	strb	r2, [r7, #7]
 8008a82:	4602      	mov	r2, r0
 8008a84:	71ba      	strb	r2, [r7, #6]
 8008a86:	460a      	mov	r2, r1
 8008a88:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 8008a8a:	797a      	ldrb	r2, [r7, #5]
 8008a8c:	08d2      	lsrs	r2, r2, #3
 8008a8e:	b2d2      	uxtb	r2, r2
 8008a90:	f002 021f 	and.w	r2, r2, #31
 8008a94:	b2d0      	uxtb	r0, r2
 8008a96:	79ba      	ldrb	r2, [r7, #6]
 8008a98:	0892      	lsrs	r2, r2, #2
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008aa0:	b2d1      	uxtb	r1, r2
 8008aa2:	79fa      	ldrb	r2, [r7, #7]
 8008aa4:	08d2      	lsrs	r2, r2, #3
 8008aa6:	b2d2      	uxtb	r2, r2
 8008aa8:	f002 021f 	and.w	r2, r2, #31
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	f360 0304 	bfi	r3, r0, #0, #5
 8008ab2:	f361 134a 	bfi	r3, r1, #5, #6
 8008ab6:	f362 23cf 	bfi	r3, r2, #11, #5
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc90      	pop	{r4, r7}
 8008ac2:	4770      	bx	lr

08008ac4 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 8008ac4:	b598      	push	{r3, r4, r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
 8008ac8:	4aae      	ldr	r2, [pc, #696]	; (8008d84 <lv_style_init+0x2c0>)
 8008aca:	7813      	ldrb	r3, [r2, #0]
 8008acc:	f36f 0300 	bfc	r3, #0, #1
 8008ad0:	7013      	strb	r3, [r2, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8008ad2:	4bac      	ldr	r3, [pc, #688]	; (8008d84 <lv_style_init+0x2c0>)
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	721a      	strb	r2, [r3, #8]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8008ad8:	4aaa      	ldr	r2, [pc, #680]	; (8008d84 <lv_style_init+0x2c0>)
 8008ada:	4bab      	ldr	r3, [pc, #684]	; (8008d88 <lv_style_init+0x2c4>)
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	8053      	strh	r3, [r2, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8008ae0:	4aa8      	ldr	r2, [pc, #672]	; (8008d84 <lv_style_init+0x2c0>)
 8008ae2:	4ba9      	ldr	r3, [pc, #676]	; (8008d88 <lv_style_init+0x2c4>)
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	8093      	strh	r3, [r2, #4]
    lv_style_scr.body.radius         = 0;
 8008ae8:	4ba6      	ldr	r3, [pc, #664]	; (8008d84 <lv_style_init+0x2c0>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	80da      	strh	r2, [r3, #6]
    lv_style_scr.body.padding.left   = 0;
 8008aee:	4ba5      	ldr	r3, [pc, #660]	; (8008d84 <lv_style_init+0x2c0>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	835a      	strh	r2, [r3, #26]
    lv_style_scr.body.padding.right  = 0;
 8008af4:	4ba3      	ldr	r3, [pc, #652]	; (8008d84 <lv_style_init+0x2c0>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	839a      	strh	r2, [r3, #28]
    lv_style_scr.body.padding.top    = 0;
 8008afa:	4ba2      	ldr	r3, [pc, #648]	; (8008d84 <lv_style_init+0x2c0>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	82da      	strh	r2, [r3, #22]
    lv_style_scr.body.padding.bottom = 0;
 8008b00:	4ba0      	ldr	r3, [pc, #640]	; (8008d84 <lv_style_init+0x2c0>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	831a      	strh	r2, [r3, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8008b06:	4b9f      	ldr	r3, [pc, #636]	; (8008d84 <lv_style_init+0x2c0>)
 8008b08:	2205      	movs	r2, #5
 8008b0a:	83da      	strh	r2, [r3, #30]

    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008b0c:	4a9d      	ldr	r2, [pc, #628]	; (8008d84 <lv_style_init+0x2c0>)
 8008b0e:	7a93      	ldrb	r3, [r2, #10]
 8008b10:	f36f 0304 	bfc	r3, #0, #5
 8008b14:	7293      	strb	r3, [r2, #10]
 8008b16:	4a9b      	ldr	r2, [pc, #620]	; (8008d84 <lv_style_init+0x2c0>)
 8008b18:	8953      	ldrh	r3, [r2, #10]
 8008b1a:	f36f 134a 	bfc	r3, #5, #6
 8008b1e:	8153      	strh	r3, [r2, #10]
 8008b20:	4a98      	ldr	r2, [pc, #608]	; (8008d84 <lv_style_init+0x2c0>)
 8008b22:	7ad3      	ldrb	r3, [r2, #11]
 8008b24:	f36f 03c7 	bfc	r3, #3, #5
 8008b28:	72d3      	strb	r3, [r2, #11]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 8008b2a:	4b96      	ldr	r3, [pc, #600]	; (8008d84 <lv_style_init+0x2c0>)
 8008b2c:	22ff      	movs	r2, #255	; 0xff
 8008b2e:	73da      	strb	r2, [r3, #15]
    lv_style_scr.body.border.width = 0;
 8008b30:	4b94      	ldr	r3, [pc, #592]	; (8008d84 <lv_style_init+0x2c0>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	819a      	strh	r2, [r3, #12]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8008b36:	4b93      	ldr	r3, [pc, #588]	; (8008d84 <lv_style_init+0x2c0>)
 8008b38:	220f      	movs	r2, #15
 8008b3a:	739a      	strb	r2, [r3, #14]

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8008b3c:	4a91      	ldr	r2, [pc, #580]	; (8008d84 <lv_style_init+0x2c0>)
 8008b3e:	4b93      	ldr	r3, [pc, #588]	; (8008d8c <lv_style_init+0x2c8>)
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	8213      	strh	r3, [r2, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8008b44:	4b8f      	ldr	r3, [pc, #572]	; (8008d84 <lv_style_init+0x2c0>)
 8008b46:	2201      	movs	r2, #1
 8008b48:	751a      	strb	r2, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 8008b4a:	4b8e      	ldr	r3, [pc, #568]	; (8008d84 <lv_style_init+0x2c0>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	825a      	strh	r2, [r3, #18]

    lv_style_scr.text.opa          = LV_OPA_COVER;
 8008b50:	4b8c      	ldr	r3, [pc, #560]	; (8008d84 <lv_style_init+0x2c0>)
 8008b52:	22ff      	movs	r2, #255	; 0xff
 8008b54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008b58:	4c8a      	ldr	r4, [pc, #552]	; (8008d84 <lv_style_init+0x2c0>)
 8008b5a:	2230      	movs	r2, #48	; 0x30
 8008b5c:	2130      	movs	r1, #48	; 0x30
 8008b5e:	2030      	movs	r0, #48	; 0x30
 8008b60:	f7ff ff87 	bl	8008a72 <lv_color_make>
 8008b64:	8420      	strh	r0, [r4, #32]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8008b66:	4c87      	ldr	r4, [pc, #540]	; (8008d84 <lv_style_init+0x2c0>)
 8008b68:	22d8      	movs	r2, #216	; 0xd8
 8008b6a:	2196      	movs	r1, #150	; 0x96
 8008b6c:	2055      	movs	r0, #85	; 0x55
 8008b6e:	f7ff ff80 	bl	8008a72 <lv_color_make>
 8008b72:	8460      	strh	r0, [r4, #34]	; 0x22
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8008b74:	4b83      	ldr	r3, [pc, #524]	; (8008d84 <lv_style_init+0x2c0>)
 8008b76:	4a86      	ldr	r2, [pc, #536]	; (8008d90 <lv_style_init+0x2cc>)
 8008b78:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_scr.text.letter_space = 0;
 8008b7a:	4b82      	ldr	r3, [pc, #520]	; (8008d84 <lv_style_init+0x2c0>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	851a      	strh	r2, [r3, #40]	; 0x28
    lv_style_scr.text.line_space   = 2;
 8008b80:	4b80      	ldr	r3, [pc, #512]	; (8008d84 <lv_style_init+0x2c0>)
 8008b82:	2202      	movs	r2, #2
 8008b84:	855a      	strh	r2, [r3, #42]	; 0x2a

    lv_style_scr.image.opa     = LV_OPA_COVER;
 8008b86:	4b7f      	ldr	r3, [pc, #508]	; (8008d84 <lv_style_init+0x2c0>)
 8008b88:	22ff      	movs	r2, #255	; 0xff
 8008b8a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8008b8e:	4c7d      	ldr	r4, [pc, #500]	; (8008d84 <lv_style_init+0x2c0>)
 8008b90:	2220      	movs	r2, #32
 8008b92:	2120      	movs	r1, #32
 8008b94:	2020      	movs	r0, #32
 8008b96:	f7ff ff6c 	bl	8008a72 <lv_color_make>
 8008b9a:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8008b9c:	4b79      	ldr	r3, [pc, #484]	; (8008d84 <lv_style_init+0x2c0>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    lv_style_scr.line.opa     = LV_OPA_COVER;
 8008ba4:	4b77      	ldr	r3, [pc, #476]	; (8008d84 <lv_style_init+0x2c0>)
 8008ba6:	22ff      	movs	r2, #255	; 0xff
 8008ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8008bac:	4c75      	ldr	r4, [pc, #468]	; (8008d84 <lv_style_init+0x2c0>)
 8008bae:	2220      	movs	r2, #32
 8008bb0:	2120      	movs	r1, #32
 8008bb2:	2020      	movs	r0, #32
 8008bb4:	f7ff ff5d 	bl	8008a72 <lv_color_make>
 8008bb8:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_scr.line.width   = 2;
 8008bba:	4b72      	ldr	r3, [pc, #456]	; (8008d84 <lv_style_init+0x2c0>)
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 8008bc0:	4a70      	ldr	r2, [pc, #448]	; (8008d84 <lv_style_init+0x2c0>)
 8008bc2:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8008bc6:	f36f 0300 	bfc	r3, #0, #1
 8008bca:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39

#if LV_USE_DEBUG
#if LV_USE_ASSERT_STYLE
    lv_style_scr.debug_sentinel = LV_STYLE_DEGUG_SENTINEL_VALUE;
 8008bce:	4b6d      	ldr	r3, [pc, #436]	; (8008d84 <lv_style_init+0x2c0>)
 8008bd0:	4a70      	ldr	r2, [pc, #448]	; (8008d94 <lv_style_init+0x2d0>)
 8008bd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#endif

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8008bd4:	496b      	ldr	r1, [pc, #428]	; (8008d84 <lv_style_init+0x2c0>)
 8008bd6:	4870      	ldr	r0, [pc, #448]	; (8008d98 <lv_style_init+0x2d4>)
 8008bd8:	f000 f9d0 	bl	8008f7c <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8008bdc:	4b6e      	ldr	r3, [pc, #440]	; (8008d98 <lv_style_init+0x2d4>)
 8008bde:	2205      	movs	r2, #5
 8008be0:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8008be2:	4b6d      	ldr	r3, [pc, #436]	; (8008d98 <lv_style_init+0x2d4>)
 8008be4:	2205      	movs	r2, #5
 8008be6:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8008be8:	4b6b      	ldr	r3, [pc, #428]	; (8008d98 <lv_style_init+0x2d4>)
 8008bea:	2205      	movs	r2, #5
 8008bec:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8008bee:	4b6a      	ldr	r3, [pc, #424]	; (8008d98 <lv_style_init+0x2d4>)
 8008bf0:	2205      	movs	r2, #5
 8008bf2:	831a      	strh	r2, [r3, #24]

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8008bf4:	4968      	ldr	r1, [pc, #416]	; (8008d98 <lv_style_init+0x2d4>)
 8008bf6:	4869      	ldr	r0, [pc, #420]	; (8008d9c <lv_style_init+0x2d8>)
 8008bf8:	f000 f9c0 	bl	8008f7c <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8008bfc:	4c67      	ldr	r4, [pc, #412]	; (8008d9c <lv_style_init+0x2d8>)
 8008bfe:	22f0      	movs	r2, #240	; 0xf0
 8008c00:	21f0      	movs	r1, #240	; 0xf0
 8008c02:	20f0      	movs	r0, #240	; 0xf0
 8008c04:	f7ff ff35 	bl	8008a72 <lv_color_make>
 8008c08:	8420      	strh	r0, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8008c0a:	4c64      	ldr	r4, [pc, #400]	; (8008d9c <lv_style_init+0x2d8>)
 8008c0c:	22f0      	movs	r2, #240	; 0xf0
 8008c0e:	21f0      	movs	r1, #240	; 0xf0
 8008c10:	20f0      	movs	r0, #240	; 0xf0
 8008c12:	f7ff ff2e 	bl	8008a72 <lv_color_make>
 8008c16:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8008c18:	4c60      	ldr	r4, [pc, #384]	; (8008d9c <lv_style_init+0x2d8>)
 8008c1a:	22f0      	movs	r2, #240	; 0xf0
 8008c1c:	21f0      	movs	r1, #240	; 0xf0
 8008c1e:	20f0      	movs	r0, #240	; 0xf0
 8008c20:	f7ff ff27 	bl	8008a72 <lv_color_make>
 8008c24:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8008c26:	4c5d      	ldr	r4, [pc, #372]	; (8008d9c <lv_style_init+0x2d8>)
 8008c28:	22d8      	movs	r2, #216	; 0xd8
 8008c2a:	2196      	movs	r1, #150	; 0x96
 8008c2c:	2055      	movs	r0, #85	; 0x55
 8008c2e:	f7ff ff20 	bl	8008a72 <lv_color_make>
 8008c32:	8060      	strh	r0, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8008c34:	4a59      	ldr	r2, [pc, #356]	; (8008d9c <lv_style_init+0x2d8>)
 8008c36:	4b59      	ldr	r3, [pc, #356]	; (8008d9c <lv_style_init+0x2d8>)
 8008c38:	885b      	ldrh	r3, [r3, #2]
 8008c3a:	8093      	strh	r3, [r2, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8008c3c:	4956      	ldr	r1, [pc, #344]	; (8008d98 <lv_style_init+0x2d4>)
 8008c3e:	4858      	ldr	r0, [pc, #352]	; (8008da0 <lv_style_init+0x2dc>)
 8008c40:	f000 f99c 	bl	8008f7c <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8008c44:	4c56      	ldr	r4, [pc, #344]	; (8008da0 <lv_style_init+0x2dc>)
 8008c46:	2220      	movs	r2, #32
 8008c48:	2120      	movs	r1, #32
 8008c4a:	2020      	movs	r0, #32
 8008c4c:	f7ff ff11 	bl	8008a72 <lv_color_make>
 8008c50:	8420      	strh	r0, [r4, #32]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8008c52:	4c53      	ldr	r4, [pc, #332]	; (8008da0 <lv_style_init+0x2dc>)
 8008c54:	2220      	movs	r2, #32
 8008c56:	2120      	movs	r1, #32
 8008c58:	2020      	movs	r0, #32
 8008c5a:	f7ff ff0a 	bl	8008a72 <lv_color_make>
 8008c5e:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8008c60:	4c4f      	ldr	r4, [pc, #316]	; (8008da0 <lv_style_init+0x2dc>)
 8008c62:	2220      	movs	r2, #32
 8008c64:	2120      	movs	r1, #32
 8008c66:	2020      	movs	r0, #32
 8008c68:	f7ff ff03 	bl	8008a72 <lv_color_make>
 8008c6c:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8008c6e:	4a4c      	ldr	r2, [pc, #304]	; (8008da0 <lv_style_init+0x2dc>)
 8008c70:	4b45      	ldr	r3, [pc, #276]	; (8008d88 <lv_style_init+0x2c4>)
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	8053      	strh	r3, [r2, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8008c76:	4a4a      	ldr	r2, [pc, #296]	; (8008da0 <lv_style_init+0x2dc>)
 8008c78:	4b4a      	ldr	r3, [pc, #296]	; (8008da4 <lv_style_init+0x2e0>)
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	8093      	strh	r3, [r2, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8008c7e:	4b48      	ldr	r3, [pc, #288]	; (8008da0 <lv_style_init+0x2dc>)
 8008c80:	2206      	movs	r2, #6
 8008c82:	80da      	strh	r2, [r3, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8008c84:	4c46      	ldr	r4, [pc, #280]	; (8008da0 <lv_style_init+0x2dc>)
 8008c86:	2240      	movs	r2, #64	; 0x40
 8008c88:	2140      	movs	r1, #64	; 0x40
 8008c8a:	2040      	movs	r0, #64	; 0x40
 8008c8c:	f7ff fef1 	bl	8008a72 <lv_color_make>
 8008c90:	8160      	strh	r0, [r4, #10]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8008c92:	4b43      	ldr	r3, [pc, #268]	; (8008da0 <lv_style_init+0x2dc>)
 8008c94:	2202      	movs	r2, #2
 8008c96:	819a      	strh	r2, [r3, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8008c98:	4b41      	ldr	r3, [pc, #260]	; (8008da0 <lv_style_init+0x2dc>)
 8008c9a:	224c      	movs	r2, #76	; 0x4c
 8008c9c:	73da      	strb	r2, [r3, #15]

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008c9e:	4940      	ldr	r1, [pc, #256]	; (8008da0 <lv_style_init+0x2dc>)
 8008ca0:	4841      	ldr	r0, [pc, #260]	; (8008da8 <lv_style_init+0x2e4>)
 8008ca2:	f000 f96b 	bl	8008f7c <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8008ca6:	4c40      	ldr	r4, [pc, #256]	; (8008da8 <lv_style_init+0x2e4>)
 8008ca8:	22e0      	movs	r2, #224	; 0xe0
 8008caa:	21e0      	movs	r1, #224	; 0xe0
 8008cac:	20e0      	movs	r0, #224	; 0xe0
 8008cae:	f7ff fee0 	bl	8008a72 <lv_color_make>
 8008cb2:	8420      	strh	r0, [r4, #32]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 8008cb4:	4c3c      	ldr	r4, [pc, #240]	; (8008da8 <lv_style_init+0x2e4>)
 8008cb6:	22e0      	movs	r2, #224	; 0xe0
 8008cb8:	21e0      	movs	r1, #224	; 0xe0
 8008cba:	20e0      	movs	r0, #224	; 0xe0
 8008cbc:	f7ff fed9 	bl	8008a72 <lv_color_make>
 8008cc0:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8008cc2:	4c39      	ldr	r4, [pc, #228]	; (8008da8 <lv_style_init+0x2e4>)
 8008cc4:	22c0      	movs	r2, #192	; 0xc0
 8008cc6:	21c0      	movs	r1, #192	; 0xc0
 8008cc8:	20c0      	movs	r0, #192	; 0xc0
 8008cca:	f7ff fed2 	bl	8008a72 <lv_color_make>
 8008cce:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8008cd0:	4c35      	ldr	r4, [pc, #212]	; (8008da8 <lv_style_init+0x2e4>)
 8008cd2:	22c7      	movs	r2, #199	; 0xc7
 8008cd4:	219a      	movs	r1, #154	; 0x9a
 8008cd6:	206b      	movs	r0, #107	; 0x6b
 8008cd8:	f7ff fecb 	bl	8008a72 <lv_color_make>
 8008cdc:	8060      	strh	r0, [r4, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8008cde:	4c32      	ldr	r4, [pc, #200]	; (8008da8 <lv_style_init+0x2e4>)
 8008ce0:	228b      	movs	r2, #139	; 0x8b
 8008ce2:	2159      	movs	r1, #89	; 0x59
 8008ce4:	202b      	movs	r0, #43	; 0x2b
 8008ce6:	f7ff fec4 	bl	8008a72 <lv_color_make>
 8008cea:	80a0      	strh	r0, [r4, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8008cec:	4c2e      	ldr	r4, [pc, #184]	; (8008da8 <lv_style_init+0x2e4>)
 8008cee:	2242      	movs	r2, #66	; 0x42
 8008cf0:	212c      	movs	r1, #44	; 0x2c
 8008cf2:	2015      	movs	r0, #21
 8008cf4:	f7ff febd 	bl	8008a72 <lv_color_make>
 8008cf8:	8160      	strh	r0, [r4, #10]

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8008cfa:	4927      	ldr	r1, [pc, #156]	; (8008d98 <lv_style_init+0x2d4>)
 8008cfc:	482b      	ldr	r0, [pc, #172]	; (8008dac <lv_style_init+0x2e8>)
 8008cfe:	f000 f93d 	bl	8008f7c <lv_style_copy>
    lv_style_transp.glass             = 1;
 8008d02:	4a2a      	ldr	r2, [pc, #168]	; (8008dac <lv_style_init+0x2e8>)
 8008d04:	7813      	ldrb	r3, [r2, #0]
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	7013      	strb	r3, [r2, #0]
    lv_style_transp.body.border.width = 0;
 8008d0c:	4b27      	ldr	r3, [pc, #156]	; (8008dac <lv_style_init+0x2e8>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	819a      	strh	r2, [r3, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8008d12:	4b26      	ldr	r3, [pc, #152]	; (8008dac <lv_style_init+0x2e8>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	721a      	strb	r2, [r3, #8]

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8008d18:	4924      	ldr	r1, [pc, #144]	; (8008dac <lv_style_init+0x2e8>)
 8008d1a:	4825      	ldr	r0, [pc, #148]	; (8008db0 <lv_style_init+0x2ec>)
 8008d1c:	f000 f92e 	bl	8008f7c <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 8008d20:	4b23      	ldr	r3, [pc, #140]	; (8008db0 <lv_style_init+0x2ec>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	835a      	strh	r2, [r3, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8008d26:	4b22      	ldr	r3, [pc, #136]	; (8008db0 <lv_style_init+0x2ec>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	839a      	strh	r2, [r3, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8008d2c:	4b20      	ldr	r3, [pc, #128]	; (8008db0 <lv_style_init+0x2ec>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	82da      	strh	r2, [r3, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 8008d32:	4b1f      	ldr	r3, [pc, #124]	; (8008db0 <lv_style_init+0x2ec>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	831a      	strh	r2, [r3, #24]

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8008d38:	491d      	ldr	r1, [pc, #116]	; (8008db0 <lv_style_init+0x2ec>)
 8008d3a:	481e      	ldr	r0, [pc, #120]	; (8008db4 <lv_style_init+0x2f0>)
 8008d3c:	f000 f91e 	bl	8008f7c <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
 8008d40:	4b1c      	ldr	r3, [pc, #112]	; (8008db4 <lv_style_init+0x2f0>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	83da      	strh	r2, [r3, #30]

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008d46:	4914      	ldr	r1, [pc, #80]	; (8008d98 <lv_style_init+0x2d4>)
 8008d48:	481b      	ldr	r0, [pc, #108]	; (8008db8 <lv_style_init+0x2f4>)
 8008d4a:	f000 f917 	bl	8008f7c <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8008d4e:	4c1a      	ldr	r4, [pc, #104]	; (8008db8 <lv_style_init+0x2f4>)
 8008d50:	22d0      	movs	r2, #208	; 0xd0
 8008d52:	21a2      	movs	r1, #162	; 0xa2
 8008d54:	2076      	movs	r0, #118	; 0x76
 8008d56:	f7ff fe8c 	bl	8008a72 <lv_color_make>
 8008d5a:	8060      	strh	r0, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8008d5c:	4c16      	ldr	r4, [pc, #88]	; (8008db8 <lv_style_init+0x2f4>)
 8008d5e:	225d      	movs	r2, #93	; 0x5d
 8008d60:	213a      	movs	r1, #58	; 0x3a
 8008d62:	2019      	movs	r0, #25
 8008d64:	f7ff fe85 	bl	8008a72 <lv_color_make>
 8008d68:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <lv_style_init+0x2f4>)
 8008d6c:	2206      	movs	r2, #6
 8008d6e:	80da      	strh	r2, [r3, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8008d70:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <lv_style_init+0x2f4>)
 8008d72:	2219      	movs	r2, #25
 8008d74:	835a      	strh	r2, [r3, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8008d76:	4b10      	ldr	r3, [pc, #64]	; (8008db8 <lv_style_init+0x2f4>)
 8008d78:	2219      	movs	r2, #25
 8008d7a:	839a      	strh	r2, [r3, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8008d7c:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <lv_style_init+0x2f4>)
 8008d7e:	2210      	movs	r2, #16
 8008d80:	82da      	strh	r2, [r3, #22]
 8008d82:	e01b      	b.n	8008dbc <lv_style_init+0x2f8>
 8008d84:	200095f0 	.word	0x200095f0
 8008d88:	0800c820 	.word	0x0800c820
 8008d8c:	0800c824 	.word	0x0800c824
 8008d90:	20000044 	.word	0x20000044
 8008d94:	12345678 	.word	0x12345678
 8008d98:	20009570 	.word	0x20009570
 8008d9c:	20009670 	.word	0x20009670
 8008da0:	20009470 	.word	0x20009470
 8008da4:	0800c828 	.word	0x0800c828
 8008da8:	20009370 	.word	0x20009370
 8008dac:	200093b0 	.word	0x200093b0
 8008db0:	20009530 	.word	0x20009530
 8008db4:	200094b0 	.word	0x200094b0
 8008db8:	200093f0 	.word	0x200093f0
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8008dbc:	4b69      	ldr	r3, [pc, #420]	; (8008f64 <lv_style_init+0x4a0>)
 8008dbe:	2210      	movs	r2, #16
 8008dc0:	831a      	strh	r2, [r3, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8008dc2:	4b68      	ldr	r3, [pc, #416]	; (8008f64 <lv_style_init+0x4a0>)
 8008dc4:	220a      	movs	r2, #10
 8008dc6:	83da      	strh	r2, [r3, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8008dc8:	4c66      	ldr	r4, [pc, #408]	; (8008f64 <lv_style_init+0x4a0>)
 8008dca:	2228      	movs	r2, #40	; 0x28
 8008dcc:	2119      	movs	r1, #25
 8008dce:	200b      	movs	r0, #11
 8008dd0:	f7ff fe4f 	bl	8008a72 <lv_color_make>
 8008dd4:	8160      	strh	r0, [r4, #10]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8008dd6:	4b63      	ldr	r3, [pc, #396]	; (8008f64 <lv_style_init+0x4a0>)
 8008dd8:	2202      	movs	r2, #2
 8008dda:	819a      	strh	r2, [r3, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8008ddc:	4b61      	ldr	r3, [pc, #388]	; (8008f64 <lv_style_init+0x4a0>)
 8008dde:	22b2      	movs	r2, #178	; 0xb2
 8008de0:	73da      	strb	r2, [r3, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8008de2:	4a60      	ldr	r2, [pc, #384]	; (8008f64 <lv_style_init+0x4a0>)
 8008de4:	4b60      	ldr	r3, [pc, #384]	; (8008f68 <lv_style_init+0x4a4>)
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	8213      	strh	r3, [r2, #16]
    lv_style_btn_rel.body.shadow.width   = 0;
 8008dea:	4b5e      	ldr	r3, [pc, #376]	; (8008f64 <lv_style_init+0x4a0>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	825a      	strh	r2, [r3, #18]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8008df0:	4c5c      	ldr	r4, [pc, #368]	; (8008f64 <lv_style_init+0x4a0>)
 8008df2:	22ff      	movs	r2, #255	; 0xff
 8008df4:	21ff      	movs	r1, #255	; 0xff
 8008df6:	20ff      	movs	r0, #255	; 0xff
 8008df8:	f7ff fe3b 	bl	8008a72 <lv_color_make>
 8008dfc:	8420      	strh	r0, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8008dfe:	4c59      	ldr	r4, [pc, #356]	; (8008f64 <lv_style_init+0x4a0>)
 8008e00:	22ff      	movs	r2, #255	; 0xff
 8008e02:	21ff      	movs	r1, #255	; 0xff
 8008e04:	20ff      	movs	r0, #255	; 0xff
 8008e06:	f7ff fe34 	bl	8008a72 <lv_color_make>
 8008e0a:	8620      	strh	r0, [r4, #48]	; 0x30

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8008e0c:	4955      	ldr	r1, [pc, #340]	; (8008f64 <lv_style_init+0x4a0>)
 8008e0e:	4857      	ldr	r0, [pc, #348]	; (8008f6c <lv_style_init+0x4a8>)
 8008e10:	f000 f8b4 	bl	8008f7c <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8008e14:	4c55      	ldr	r4, [pc, #340]	; (8008f6c <lv_style_init+0x4a8>)
 8008e16:	2294      	movs	r2, #148	; 0x94
 8008e18:	2162      	movs	r1, #98	; 0x62
 8008e1a:	2033      	movs	r0, #51	; 0x33
 8008e1c:	f7ff fe29 	bl	8008a72 <lv_color_make>
 8008e20:	8060      	strh	r0, [r4, #2]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8008e22:	4c52      	ldr	r4, [pc, #328]	; (8008f6c <lv_style_init+0x4a8>)
 8008e24:	223c      	movs	r2, #60	; 0x3c
 8008e26:	2126      	movs	r1, #38	; 0x26
 8008e28:	2010      	movs	r0, #16
 8008e2a:	f7ff fe22 	bl	8008a72 <lv_color_make>
 8008e2e:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008e30:	4c4e      	ldr	r4, [pc, #312]	; (8008f6c <lv_style_init+0x4a8>)
 8008e32:	22c6      	movs	r2, #198	; 0xc6
 8008e34:	21b5      	movs	r1, #181	; 0xb5
 8008e36:	20a4      	movs	r0, #164	; 0xa4
 8008e38:	f7ff fe1b 	bl	8008a72 <lv_color_make>
 8008e3c:	8420      	strh	r0, [r4, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8008e3e:	4c4b      	ldr	r4, [pc, #300]	; (8008f6c <lv_style_init+0x4a8>)
 8008e40:	22c6      	movs	r2, #198	; 0xc6
 8008e42:	21b5      	movs	r1, #181	; 0xb5
 8008e44:	20a4      	movs	r0, #164	; 0xa4
 8008e46:	f7ff fe14 	bl	8008a72 <lv_color_make>
 8008e4a:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008e4c:	4c47      	ldr	r4, [pc, #284]	; (8008f6c <lv_style_init+0x4a8>)
 8008e4e:	22c6      	movs	r2, #198	; 0xc6
 8008e50:	21b5      	movs	r1, #181	; 0xb5
 8008e52:	20a4      	movs	r0, #164	; 0xa4
 8008e54:	f7ff fe0d 	bl	8008a72 <lv_color_make>
 8008e58:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle released style*/
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8008e5a:	4942      	ldr	r1, [pc, #264]	; (8008f64 <lv_style_init+0x4a0>)
 8008e5c:	4844      	ldr	r0, [pc, #272]	; (8008f70 <lv_style_init+0x4ac>)
 8008e5e:	f000 f88d 	bl	8008f7c <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008e62:	4c43      	ldr	r4, [pc, #268]	; (8008f70 <lv_style_init+0x4ac>)
 8008e64:	2222      	movs	r2, #34	; 0x22
 8008e66:	2111      	movs	r1, #17
 8008e68:	200a      	movs	r0, #10
 8008e6a:	f7ff fe02 	bl	8008a72 <lv_color_make>
 8008e6e:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008e70:	4c3f      	ldr	r4, [pc, #252]	; (8008f70 <lv_style_init+0x4ac>)
 8008e72:	2290      	movs	r2, #144	; 0x90
 8008e74:	2162      	movs	r1, #98	; 0x62
 8008e76:	2037      	movs	r0, #55	; 0x37
 8008e78:	f7ff fdfb 	bl	8008a72 <lv_color_make>
 8008e7c:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008e7e:	4c3c      	ldr	r4, [pc, #240]	; (8008f70 <lv_style_init+0x4ac>)
 8008e80:	220d      	movs	r2, #13
 8008e82:	2107      	movs	r1, #7
 8008e84:	2001      	movs	r0, #1
 8008e86:	f7ff fdf4 	bl	8008a72 <lv_color_make>
 8008e8a:	8160      	strh	r0, [r4, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008e8c:	4c38      	ldr	r4, [pc, #224]	; (8008f70 <lv_style_init+0x4ac>)
 8008e8e:	22f4      	movs	r2, #244	; 0xf4
 8008e90:	21dd      	movs	r1, #221	; 0xdd
 8008e92:	20c8      	movs	r0, #200	; 0xc8
 8008e94:	f7ff fded 	bl	8008a72 <lv_color_make>
 8008e98:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8008e9a:	4c35      	ldr	r4, [pc, #212]	; (8008f70 <lv_style_init+0x4ac>)
 8008e9c:	22f4      	movs	r2, #244	; 0xf4
 8008e9e:	21dd      	movs	r1, #221	; 0xdd
 8008ea0:	20c8      	movs	r0, #200	; 0xc8
 8008ea2:	f7ff fde6 	bl	8008a72 <lv_color_make>
 8008ea6:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008ea8:	4c31      	ldr	r4, [pc, #196]	; (8008f70 <lv_style_init+0x4ac>)
 8008eaa:	22f4      	movs	r2, #244	; 0xf4
 8008eac:	21dd      	movs	r1, #221	; 0xdd
 8008eae:	20c8      	movs	r0, #200	; 0xc8
 8008eb0:	f7ff fddf 	bl	8008a72 <lv_color_make>
 8008eb4:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8008eb6:	492e      	ldr	r1, [pc, #184]	; (8008f70 <lv_style_init+0x4ac>)
 8008eb8:	482e      	ldr	r0, [pc, #184]	; (8008f74 <lv_style_init+0x4b0>)
 8008eba:	f000 f85f 	bl	8008f7c <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8008ebe:	4c2d      	ldr	r4, [pc, #180]	; (8008f74 <lv_style_init+0x4b0>)
 8008ec0:	2227      	movs	r2, #39	; 0x27
 8008ec2:	2114      	movs	r1, #20
 8008ec4:	2002      	movs	r0, #2
 8008ec6:	f7ff fdd4 	bl	8008a72 <lv_color_make>
 8008eca:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8008ecc:	4c29      	ldr	r4, [pc, #164]	; (8008f74 <lv_style_init+0x4b0>)
 8008ece:	2270      	movs	r2, #112	; 0x70
 8008ed0:	214c      	movs	r1, #76	; 0x4c
 8008ed2:	202b      	movs	r0, #43	; 0x2b
 8008ed4:	f7ff fdcd 	bl	8008a72 <lv_color_make>
 8008ed8:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008eda:	4c26      	ldr	r4, [pc, #152]	; (8008f74 <lv_style_init+0x4b0>)
 8008edc:	22c6      	movs	r2, #198	; 0xc6
 8008ede:	21b5      	movs	r1, #181	; 0xb5
 8008ee0:	20a4      	movs	r0, #164	; 0xa4
 8008ee2:	f7ff fdc6 	bl	8008a72 <lv_color_make>
 8008ee6:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8008ee8:	4c22      	ldr	r4, [pc, #136]	; (8008f74 <lv_style_init+0x4b0>)
 8008eea:	22c6      	movs	r2, #198	; 0xc6
 8008eec:	21b5      	movs	r1, #181	; 0xb5
 8008eee:	20a4      	movs	r0, #164	; 0xa4
 8008ef0:	f7ff fdbf 	bl	8008a72 <lv_color_make>
 8008ef4:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008ef6:	4c1f      	ldr	r4, [pc, #124]	; (8008f74 <lv_style_init+0x4b0>)
 8008ef8:	22c6      	movs	r2, #198	; 0xc6
 8008efa:	21b5      	movs	r1, #181	; 0xb5
 8008efc:	20a4      	movs	r0, #164	; 0xa4
 8008efe:	f7ff fdb8 	bl	8008a72 <lv_color_make>
 8008f02:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8008f04:	4917      	ldr	r1, [pc, #92]	; (8008f64 <lv_style_init+0x4a0>)
 8008f06:	481c      	ldr	r0, [pc, #112]	; (8008f78 <lv_style_init+0x4b4>)
 8008f08:	f000 f838 	bl	8008f7c <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008f0c:	4c1a      	ldr	r4, [pc, #104]	; (8008f78 <lv_style_init+0x4b4>)
 8008f0e:	22d8      	movs	r2, #216	; 0xd8
 8008f10:	21d8      	movs	r1, #216	; 0xd8
 8008f12:	20d8      	movs	r0, #216	; 0xd8
 8008f14:	f7ff fdad 	bl	8008a72 <lv_color_make>
 8008f18:	8060      	strh	r0, [r4, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008f1a:	4c17      	ldr	r4, [pc, #92]	; (8008f78 <lv_style_init+0x4b4>)
 8008f1c:	22d8      	movs	r2, #216	; 0xd8
 8008f1e:	21d8      	movs	r1, #216	; 0xd8
 8008f20:	20d8      	movs	r0, #216	; 0xd8
 8008f22:	f7ff fda6 	bl	8008a72 <lv_color_make>
 8008f26:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8008f28:	4c13      	ldr	r4, [pc, #76]	; (8008f78 <lv_style_init+0x4b4>)
 8008f2a:	2290      	movs	r2, #144	; 0x90
 8008f2c:	2190      	movs	r1, #144	; 0x90
 8008f2e:	2090      	movs	r0, #144	; 0x90
 8008f30:	f7ff fd9f 	bl	8008a72 <lv_color_make>
 8008f34:	8160      	strh	r0, [r4, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8008f36:	4c10      	ldr	r4, [pc, #64]	; (8008f78 <lv_style_init+0x4b4>)
 8008f38:	2270      	movs	r2, #112	; 0x70
 8008f3a:	2170      	movs	r1, #112	; 0x70
 8008f3c:	2070      	movs	r0, #112	; 0x70
 8008f3e:	f7ff fd98 	bl	8008a72 <lv_color_make>
 8008f42:	8420      	strh	r0, [r4, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8008f44:	4c0c      	ldr	r4, [pc, #48]	; (8008f78 <lv_style_init+0x4b4>)
 8008f46:	2270      	movs	r2, #112	; 0x70
 8008f48:	2170      	movs	r1, #112	; 0x70
 8008f4a:	2070      	movs	r0, #112	; 0x70
 8008f4c:	f7ff fd91 	bl	8008a72 <lv_color_make>
 8008f50:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8008f52:	4c09      	ldr	r4, [pc, #36]	; (8008f78 <lv_style_init+0x4b4>)
 8008f54:	2270      	movs	r2, #112	; 0x70
 8008f56:	2170      	movs	r1, #112	; 0x70
 8008f58:	2070      	movs	r0, #112	; 0x70
 8008f5a:	f7ff fd8a 	bl	8008a72 <lv_color_make>
 8008f5e:	86a0      	strh	r0, [r4, #52]	; 0x34
}
 8008f60:	bf00      	nop
 8008f62:	bd98      	pop	{r3, r4, r7, pc}
 8008f64:	200093f0 	.word	0x200093f0
 8008f68:	0800c824 	.word	0x0800c824
 8008f6c:	20009430 	.word	0x20009430
 8008f70:	200095b0 	.word	0x200095b0
 8008f74:	20009630 	.word	0x20009630
 8008f78:	200094f0 	.word	0x200094f0

08008f7c <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_style_t));
 8008f86:	2240      	movs	r2, #64	; 0x40
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f003 fb6c 	bl	800c668 <memcpy>
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <lv_draw_get_buf>:
 * Give a buffer with the given to use during drawing.
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
 8008f98:	b590      	push	{r4, r7, lr}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8008fa0:	4b28      	ldr	r3, [pc, #160]	; (8009044 <lv_draw_get_buf+0xac>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d802      	bhi.n	8008fb0 <lv_draw_get_buf+0x18>
 8008faa:	4b27      	ldr	r3, [pc, #156]	; (8009048 <lv_draw_get_buf+0xb0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	e044      	b.n	800903a <lv_draw_get_buf+0xa2>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 8008fb0:	4a24      	ldr	r2, [pc, #144]	; (8009044 <lv_draw_get_buf+0xac>)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6013      	str	r3, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 8008fb6:	4b24      	ldr	r3, [pc, #144]	; (8009048 <lv_draw_get_buf+0xb0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d11d      	bne.n	8008ffa <lv_draw_get_buf+0x62>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f002 fcee 	bl	800b9a0 <lv_mem_alloc>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4b20      	ldr	r3, [pc, #128]	; (8009048 <lv_draw_get_buf+0xb0>)
 8008fc8:	601a      	str	r2, [r3, #0]
        LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
 8008fca:	4b1f      	ldr	r3, [pc, #124]	; (8009048 <lv_draw_get_buf+0xb0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fc40 	bl	8008854 <lv_debug_check_null>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f083 0301 	eor.w	r3, r3, #1
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <lv_draw_get_buf+0x5c>
 8008fe0:	4b19      	ldr	r3, [pc, #100]	; (8009048 <lv_draw_get_buf+0xb0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4623      	mov	r3, r4
 8008fec:	4817      	ldr	r0, [pc, #92]	; (800904c <lv_draw_get_buf+0xb4>)
 8008fee:	f7ff fc41 	bl	8008874 <lv_debug_log_error>
 8008ff2:	e7fe      	b.n	8008ff2 <lv_draw_get_buf+0x5a>
        return LV_GC_ROOT(_lv_draw_buf);
 8008ff4:	4b14      	ldr	r3, [pc, #80]	; (8009048 <lv_draw_get_buf+0xb0>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	e01f      	b.n	800903a <lv_draw_get_buf+0xa2>
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <lv_draw_get_buf+0xb0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4618      	mov	r0, r3
 8009002:	f002 fd43 	bl	800ba8c <lv_mem_realloc>
 8009006:	4602      	mov	r2, r0
 8009008:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <lv_draw_get_buf+0xb0>)
 800900a:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <lv_draw_get_buf+0xb0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff fc1f 	bl	8008854 <lv_debug_check_null>
 8009016:	4603      	mov	r3, r0
 8009018:	f083 0301 	eor.w	r3, r3, #1
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <lv_draw_get_buf+0x9e>
 8009022:	4b09      	ldr	r3, [pc, #36]	; (8009048 <lv_draw_get_buf+0xb0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800902a:	461a      	mov	r2, r3
 800902c:	4623      	mov	r3, r4
 800902e:	4807      	ldr	r0, [pc, #28]	; (800904c <lv_draw_get_buf+0xb4>)
 8009030:	f7ff fc20 	bl	8008874 <lv_debug_log_error>
 8009034:	e7fe      	b.n	8009034 <lv_draw_get_buf+0x9c>
    return LV_GC_ROOT(_lv_draw_buf);
 8009036:	4b04      	ldr	r3, [pc, #16]	; (8009048 <lv_draw_get_buf+0xb0>)
 8009038:	681b      	ldr	r3, [r3, #0]
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bd90      	pop	{r4, r7, pc}
 8009042:	bf00      	nop
 8009044:	200010a0 	.word	0x200010a0
 8009048:	200096c8 	.word	0x200096c8
 800904c:	0800c83c 	.word	0x0800c83c

08009050 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	2b0e      	cmp	r3, #14
 8009062:	d836      	bhi.n	80090d2 <lv_img_color_format_get_px_size+0x82>
 8009064:	a201      	add	r2, pc, #4	; (adr r2, 800906c <lv_img_color_format_get_px_size+0x1c>)
 8009066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906a:	bf00      	nop
 800906c:	080090a9 	.word	0x080090a9
 8009070:	080090a9 	.word	0x080090a9
 8009074:	080090d3 	.word	0x080090d3
 8009078:	080090d3 	.word	0x080090d3
 800907c:	080090af 	.word	0x080090af
 8009080:	080090b5 	.word	0x080090b5
 8009084:	080090af 	.word	0x080090af
 8009088:	080090bb 	.word	0x080090bb
 800908c:	080090c1 	.word	0x080090c1
 8009090:	080090c7 	.word	0x080090c7
 8009094:	080090cd 	.word	0x080090cd
 8009098:	080090bb 	.word	0x080090bb
 800909c:	080090c1 	.word	0x080090c1
 80090a0:	080090c7 	.word	0x080090c7
 80090a4:	080090cd 	.word	0x080090cd
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW: px_size = 0; break;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	e014      	b.n	80090d8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED: px_size = LV_COLOR_SIZE; break;
 80090ae:	2310      	movs	r3, #16
 80090b0:	73fb      	strb	r3, [r7, #15]
 80090b2:	e011      	b.n	80090d8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA: px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3; break;
 80090b4:	2318      	movs	r3, #24
 80090b6:	73fb      	strb	r3, [r7, #15]
 80090b8:	e00e      	b.n	80090d8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT: px_size = 1; break;
 80090ba:	2301      	movs	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
 80090be:	e00b      	b.n	80090d8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT: px_size = 2; break;
 80090c0:	2302      	movs	r3, #2
 80090c2:	73fb      	strb	r3, [r7, #15]
 80090c4:	e008      	b.n	80090d8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT: px_size = 4; break;
 80090c6:	2304      	movs	r3, #4
 80090c8:	73fb      	strb	r3, [r7, #15]
 80090ca:	e005      	b.n	80090d8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
 80090cc:	2308      	movs	r3, #8
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	e002      	b.n	80090d8 <lv_img_color_format_get_px_size+0x88>
        default: px_size = 0; break;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
 80090d6:	bf00      	nop
    }

    return px_size;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop

080090e8 <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 80090f0:	2303      	movs	r3, #3
 80090f2:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <lv_img_src_get_type+0x16>
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	e018      	b.n	8009130 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b1f      	cmp	r3, #31
 8009108:	d907      	bls.n	800911a <lv_img_src_get_type+0x32>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	b25b      	sxtb	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	db02      	blt.n	800911a <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8009114:	2301      	movs	r3, #1
 8009116:	73fb      	strb	r3, [r7, #15]
 8009118:	e009      	b.n	800912e <lv_img_src_get_type+0x46>
    } else if(u8_p[0] >= 0x80) {
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b25b      	sxtb	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	da02      	bge.n	800912a <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 8009124:	2302      	movs	r3, #2
 8009126:	73fb      	strb	r3, [r7, #15]
 8009128:	e001      	b.n	800912e <lv_img_src_get_type+0x46>
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 800913c:	b590      	push	{r4, r7, lr}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8009146:	4b2f      	ldr	r3, [pc, #188]	; (8009204 <lv_img_cache_set_size+0xc8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 800914e:	2000      	movs	r0, #0
 8009150:	f000 f85e 	bl	8009210 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8009154:	4b2b      	ldr	r3, [pc, #172]	; (8009204 <lv_img_cache_set_size+0xc8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4618      	mov	r0, r3
 800915a:	f002 fc53 	bl	800ba04 <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800915e:	88fa      	ldrh	r2, [r7, #6]
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4618      	mov	r0, r3
 800916a:	f002 fc19 	bl	800b9a0 <lv_mem_alloc>
 800916e:	4602      	mov	r2, r0
 8009170:	4b24      	ldr	r3, [pc, #144]	; (8009204 <lv_img_cache_set_size+0xc8>)
 8009172:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 8009174:	4b23      	ldr	r3, [pc, #140]	; (8009204 <lv_img_cache_set_size+0xc8>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff fb6b 	bl	8008854 <lv_debug_check_null>
 800917e:	4603      	mov	r3, r0
 8009180:	f083 0301 	eor.w	r3, r3, #1
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <lv_img_cache_set_size+0x62>
 800918a:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <lv_img_cache_set_size+0xc8>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009192:	461a      	mov	r2, r3
 8009194:	4623      	mov	r3, r4
 8009196:	481c      	ldr	r0, [pc, #112]	; (8009208 <lv_img_cache_set_size+0xcc>)
 8009198:	f7ff fb6c 	bl	8008874 <lv_debug_log_error>
 800919c:	e7fe      	b.n	800919c <lv_img_cache_set_size+0x60>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 800919e:	4b19      	ldr	r3, [pc, #100]	; (8009204 <lv_img_cache_set_size+0xc8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d103      	bne.n	80091ae <lv_img_cache_set_size+0x72>
        entry_cnt = 0;
 80091a6:	4b19      	ldr	r3, [pc, #100]	; (800920c <lv_img_cache_set_size+0xd0>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	801a      	strh	r2, [r3, #0]
        return;
 80091ac:	e027      	b.n	80091fe <lv_img_cache_set_size+0xc2>
    }
    entry_cnt = new_entry_cnt;
 80091ae:	4a17      	ldr	r2, [pc, #92]	; (800920c <lv_img_cache_set_size+0xd0>)
 80091b0:	88fb      	ldrh	r3, [r7, #6]
 80091b2:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80091b4:	2300      	movs	r3, #0
 80091b6:	81fb      	strh	r3, [r7, #14]
 80091b8:	e01c      	b.n	80091f4 <lv_img_cache_set_size+0xb8>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 80091ba:	4b12      	ldr	r3, [pc, #72]	; (8009204 <lv_img_cache_set_size+0xc8>)
 80091bc:	6819      	ldr	r1, [r3, #0]
 80091be:	89fa      	ldrh	r2, [r7, #14]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	440b      	add	r3, r1
 80091ca:	2224      	movs	r2, #36	; 0x24
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f003 fa55 	bl	800c67e <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 80091d4:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <lv_img_cache_set_size+0xc8>)
 80091d6:	6819      	ldr	r1, [r3, #0]
 80091d8:	89fa      	ldrh	r2, [r7, #14]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	440b      	add	r3, r1
 80091e4:	2228      	movs	r2, #40	; 0x28
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f003 fa48 	bl	800c67e <memset>
    for(i = 0; i < entry_cnt; i++) {
 80091ee:	89fb      	ldrh	r3, [r7, #14]
 80091f0:	3301      	adds	r3, #1
 80091f2:	81fb      	strh	r3, [r7, #14]
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <lv_img_cache_set_size+0xd0>)
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	89fa      	ldrh	r2, [r7, #14]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d3dd      	bcc.n	80091ba <lv_img_cache_set_size+0x7e>
    }
}
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	bd90      	pop	{r4, r7, pc}
 8009204:	200096f4 	.word	0x200096f4
 8009208:	0800c84c 	.word	0x0800c84c
 800920c:	200010a4 	.word	0x200010a4

08009210 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8009218:	4b28      	ldr	r3, [pc, #160]	; (80092bc <lv_img_cache_invalidate_src+0xac>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800921e:	2300      	movs	r3, #0
 8009220:	81fb      	strh	r3, [r7, #14]
 8009222:	e041      	b.n	80092a8 <lv_img_cache_invalidate_src+0x98>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8009224:	89fa      	ldrh	r2, [r7, #14]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	461a      	mov	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4413      	add	r3, r2
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	429a      	cmp	r2, r3
 800923a:	d002      	beq.n	8009242 <lv_img_cache_invalidate_src+0x32>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d12f      	bne.n	80092a2 <lv_img_cache_invalidate_src+0x92>
            if(cache[i].dec_dsc.src != NULL) {
 8009242:	89fa      	ldrh	r2, [r7, #14]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	461a      	mov	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	4413      	add	r3, r2
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8009258:	89fa      	ldrh	r2, [r7, #14]
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	461a      	mov	r2, r3
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4413      	add	r3, r2
 8009268:	4618      	mov	r0, r3
 800926a:	f000 f895 	bl	8009398 <lv_img_decoder_close>
            }

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800926e:	89fa      	ldrh	r2, [r7, #14]
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	461a      	mov	r2, r3
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	4413      	add	r3, r2
 800927e:	2224      	movs	r2, #36	; 0x24
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f003 f9fb 	bl	800c67e <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 8009288:	89fa      	ldrh	r2, [r7, #14]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	461a      	mov	r2, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4413      	add	r3, r2
 8009298:	2228      	movs	r2, #40	; 0x28
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f003 f9ee 	bl	800c67e <memset>
    for(i = 0; i < entry_cnt; i++) {
 80092a2:	89fb      	ldrh	r3, [r7, #14]
 80092a4:	3301      	adds	r3, #1
 80092a6:	81fb      	strh	r3, [r7, #14]
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <lv_img_cache_invalidate_src+0xb0>)
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	89fa      	ldrh	r2, [r7, #14]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d3b8      	bcc.n	8009224 <lv_img_cache_invalidate_src+0x14>
        }
    }
}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	200096f4 	.word	0x200096f4
 80092c0:	200010a4 	.word	0x200010a4

080092c4 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80092c4:	b490      	push	{r4, r7}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	4622      	mov	r2, r4
 80092d2:	71fa      	strb	r2, [r7, #7]
 80092d4:	4602      	mov	r2, r0
 80092d6:	71ba      	strb	r2, [r7, #6]
 80092d8:	460a      	mov	r2, r1
 80092da:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 80092dc:	797a      	ldrb	r2, [r7, #5]
 80092de:	08d2      	lsrs	r2, r2, #3
 80092e0:	b2d2      	uxtb	r2, r2
 80092e2:	f002 021f 	and.w	r2, r2, #31
 80092e6:	b2d0      	uxtb	r0, r2
 80092e8:	79ba      	ldrb	r2, [r7, #6]
 80092ea:	0892      	lsrs	r2, r2, #2
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80092f2:	b2d1      	uxtb	r1, r2
 80092f4:	79fa      	ldrb	r2, [r7, #7]
 80092f6:	08d2      	lsrs	r2, r2, #3
 80092f8:	b2d2      	uxtb	r2, r2
 80092fa:	f002 021f 	and.w	r2, r2, #31
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	f360 0304 	bfi	r3, r0, #0, #5
 8009304:	f361 134a 	bfi	r3, r1, #5, #6
 8009308:	f362 23cf 	bfi	r3, r2, #11, #5
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bc90      	pop	{r4, r7}
 8009314:	4770      	bx	lr
	...

08009318 <lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void lv_img_decoder_init(void)
{
 8009318:	b590      	push	{r4, r7, lr}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800931e:	2110      	movs	r1, #16
 8009320:	4817      	ldr	r0, [pc, #92]	; (8009380 <lv_img_decoder_init+0x68>)
 8009322:	f002 f903 	bl	800b52c <lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 8009326:	f000 f85d 	bl	80093e4 <lv_img_decoder_create>
 800932a:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d111      	bne.n	8009356 <lv_img_decoder_init+0x3e>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        LV_ASSERT_MEM(decoder);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff fa8e 	bl	8008854 <lv_debug_check_null>
 8009338:	4603      	mov	r3, r0
 800933a:	f083 0301 	eor.w	r3, r3, #1
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b00      	cmp	r3, #0
 8009342:	d019      	beq.n	8009378 <lv_img_decoder_init+0x60>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800934a:	461a      	mov	r2, r3
 800934c:	4623      	mov	r3, r4
 800934e:	480d      	ldr	r0, [pc, #52]	; (8009384 <lv_img_decoder_init+0x6c>)
 8009350:	f7ff fa90 	bl	8008874 <lv_debug_log_error>
 8009354:	e7fe      	b.n	8009354 <lv_img_decoder_init+0x3c>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8009356:	490c      	ldr	r1, [pc, #48]	; (8009388 <lv_img_decoder_init+0x70>)
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f86f 	bl	800943c <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 800935e:	490b      	ldr	r1, [pc, #44]	; (800938c <lv_img_decoder_init+0x74>)
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f879 	bl	8009458 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8009366:	490a      	ldr	r1, [pc, #40]	; (8009390 <lv_img_decoder_init+0x78>)
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f883 	bl	8009474 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 800936e:	4909      	ldr	r1, [pc, #36]	; (8009394 <lv_img_decoder_init+0x7c>)
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f88d 	bl	8009490 <lv_img_decoder_set_close_cb>
 8009376:	e000      	b.n	800937a <lv_img_decoder_init+0x62>
        return;
 8009378:	bf00      	nop
}
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bd90      	pop	{r4, r7, pc}
 8009380:	200096d8 	.word	0x200096d8
 8009384:	0800c85c 	.word	0x0800c85c
 8009388:	080094ad 	.word	0x080094ad
 800938c:	080095b9 	.word	0x080095b9
 8009390:	080098f9 	.word	0x080098f9
 8009394:	08009a1d 	.word	0x08009a1d

08009398 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d018      	beq.n	80093da <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <lv_img_decoder_close+0x2a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	4610      	mov	r0, r2
 80093c0:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7b1b      	ldrb	r3, [r3, #12]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d107      	bne.n	80093da <lv_img_decoder_close+0x42>
            lv_mem_free(dsc->src);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 fb18 	bl	800ba04 <lv_mem_free>
            dsc->src = NULL;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	605a      	str	r2, [r3, #4]
        }
    }
}
 80093da:	bf00      	nop
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 80093ea:	4812      	ldr	r0, [pc, #72]	; (8009434 <lv_img_decoder_create+0x50>)
 80093ec:	f002 f8be 	bl	800b56c <lv_ll_ins_head>
 80093f0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MEM(decoder);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff fa2e 	bl	8008854 <lv_debug_check_null>
 80093f8:	4603      	mov	r3, r0
 80093fa:	f083 0301 	eor.w	r3, r3, #1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d008      	beq.n	8009416 <lv_img_decoder_create+0x32>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800940a:	461a      	mov	r2, r3
 800940c:	4623      	mov	r3, r4
 800940e:	480a      	ldr	r0, [pc, #40]	; (8009438 <lv_img_decoder_create+0x54>)
 8009410:	f7ff fa30 	bl	8008874 <lv_debug_log_error>
 8009414:	e7fe      	b.n	8009414 <lv_img_decoder_create+0x30>
    if(decoder == NULL) return NULL;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <lv_img_decoder_create+0x3c>
 800941c:	2300      	movs	r3, #0
 800941e:	e005      	b.n	800942c <lv_img_decoder_create+0x48>

    memset(decoder, 0, sizeof(lv_img_decoder_t));
 8009420:	2210      	movs	r2, #16
 8009422:	2100      	movs	r1, #0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f003 f92a 	bl	800c67e <memset>

    return decoder;
 800942a:	687b      	ldr	r3, [r7, #4]
}
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	bd90      	pop	{r4, r7, pc}
 8009434:	200096d8 	.word	0x200096d8
 8009438:	0800c85c 	.word	0x0800c85c

0800943c <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	601a      	str	r2, [r3, #0]
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	605a      	str	r2, [r3, #4]
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	609a      	str	r2, [r3, #8]
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	60da      	str	r2, [r3, #12]
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f7ff fe15 	bl	80090e8 <lv_img_src_get_type>
 80094be:	4603      	mov	r3, r0
 80094c0:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80094c2:	7ffb      	ldrb	r3, [r7, #31]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d12c      	bne.n	8009522 <lv_img_decoder_built_in_info+0x76>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	777b      	strb	r3, [r7, #29]
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80094d4:	7f7b      	ldrb	r3, [r7, #29]
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d902      	bls.n	80094e0 <lv_img_decoder_built_in_info+0x34>
 80094da:	7f7b      	ldrb	r3, [r7, #29]
 80094dc:	2b0e      	cmp	r3, #14
 80094de:	d901      	bls.n	80094e4 <lv_img_decoder_built_in_info+0x38>
 80094e0:	2300      	movs	r3, #0
 80094e2:	e065      	b.n	80095b0 <lv_img_decoder_built_in_info+0x104>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80094ec:	b299      	uxth	r1, r3
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6813      	ldr	r3, [r2, #0]
 80094f2:	f361 2394 	bfi	r3, r1, #10, #11
 80094f6:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	885b      	ldrh	r3, [r3, #2]
 80094fc:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8009500:	b299      	uxth	r1, r3
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	8853      	ldrh	r3, [r2, #2]
 8009506:	f361 134f 	bfi	r3, r1, #5, #11
 800950a:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009514:	b2d9      	uxtb	r1, r3
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	7813      	ldrb	r3, [r2, #0]
 800951a:	f361 0304 	bfi	r3, r1, #0, #5
 800951e:	7013      	strb	r3, [r2, #0]
 8009520:	e045      	b.n	80095ae <lv_img_decoder_built_in_info+0x102>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 8009522:	7ffb      	ldrb	r3, [r7, #31]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d12a      	bne.n	800957e <lv_img_decoder_built_in_info+0xd2>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 8009528:	f107 0314 	add.w	r3, r7, #20
 800952c:	2202      	movs	r2, #2
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	4618      	mov	r0, r3
 8009532:	f001 fe6f 	bl	800b214 <lv_fs_open>
 8009536:	4603      	mov	r3, r0
 8009538:	77bb      	strb	r3, [r7, #30]
        if(res == LV_FS_RES_OK) {
 800953a:	7fbb      	ldrb	r3, [r7, #30]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10e      	bne.n	800955e <lv_img_decoder_built_in_info+0xb2>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 8009540:	f107 0310 	add.w	r3, r7, #16
 8009544:	f107 0014 	add.w	r0, r7, #20
 8009548:	2204      	movs	r2, #4
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	f001 ff23 	bl	800b396 <lv_fs_read>
 8009550:	4603      	mov	r3, r0
 8009552:	77bb      	strb	r3, [r7, #30]
            lv_fs_close(&file);
 8009554:	f107 0314 	add.w	r3, r7, #20
 8009558:	4618      	mov	r0, r3
 800955a:	f001 feed 	bl	800b338 <lv_fs_close>
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b03      	cmp	r3, #3
 800956a:	d906      	bls.n	800957a <lv_img_decoder_built_in_info+0xce>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b0e      	cmp	r3, #14
 8009578:	d919      	bls.n	80095ae <lv_img_decoder_built_in_info+0x102>
 800957a:	2300      	movs	r3, #0
 800957c:	e018      	b.n	80095b0 <lv_img_decoder_built_in_info+0x104>

    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800957e:	7ffb      	ldrb	r3, [r7, #31]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d112      	bne.n	80095aa <lv_img_decoder_built_in_info+0xfe>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	6813      	ldr	r3, [r2, #0]
 8009588:	2101      	movs	r1, #1
 800958a:	f361 2394 	bfi	r3, r1, #10, #11
 800958e:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	8853      	ldrh	r3, [r2, #2]
 8009594:	2101      	movs	r1, #1
 8009596:	f361 134f 	bfi	r3, r1, #5, #11
 800959a:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	7813      	ldrb	r3, [r2, #0]
 80095a0:	210b      	movs	r1, #11
 80095a2:	f361 0304 	bfi	r3, r1, #0, #5
 80095a6:	7013      	strb	r3, [r2, #0]
 80095a8:	e001      	b.n	80095ae <lv_img_decoder_built_in_info+0x102>
    } else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e000      	b.n	80095b0 <lv_img_decoder_built_in_info+0x104>
    }
    return LV_RES_OK;
 80095ae:	2301      	movs	r3, #1
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3720      	adds	r7, #32
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80095b8:	b5b0      	push	{r4, r5, r7, lr}
 80095ba:	b08e      	sub	sp, #56	; 0x38
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	7b1b      	ldrb	r3, [r3, #12]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d173      	bne.n	80096b2 <lv_img_decoder_built_in_open+0xfa>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f001 ff5a 	bl	800b488 <lv_fs_get_ext>
 80095d4:	4603      	mov	r3, r0
 80095d6:	499f      	ldr	r1, [pc, #636]	; (8009854 <lv_img_decoder_built_in_open+0x29c>)
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f6 fe07 	bl	80001ec <strcmp>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <lv_img_decoder_built_in_open+0x30>
 80095e4:	2300      	movs	r3, #0
 80095e6:	e182      	b.n	80098ee <lv_img_decoder_built_in_open+0x336>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	6859      	ldr	r1, [r3, #4]
 80095ec:	f107 0310 	add.w	r3, r7, #16
 80095f0:	2202      	movs	r2, #2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f001 fe0e 	bl	800b214 <lv_fs_open>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 80095fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 8009606:	2300      	movs	r3, #0
 8009608:	e171      	b.n	80098ee <lv_img_decoder_built_in_open+0x336>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d125      	bne.n	800965e <lv_img_decoder_built_in_open+0xa6>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8009612:	200c      	movs	r0, #12
 8009614:	f002 f9c4 	bl	800b9a0 <lv_mem_alloc>
 8009618:	4602      	mov	r2, r0
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d114      	bne.n	8009650 <lv_img_decoder_built_in_open+0x98>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                LV_ASSERT_MEM(dsc->user_data);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff f912 	bl	8008854 <lv_debug_check_null>
 8009630:	4603      	mov	r3, r0
 8009632:	f083 0301 	eor.w	r3, r3, #1
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d009      	beq.n	8009650 <lv_img_decoder_built_in_open+0x98>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009644:	461a      	mov	r2, r3
 8009646:	4623      	mov	r3, r4
 8009648:	4883      	ldr	r0, [pc, #524]	; (8009858 <lv_img_decoder_built_in_open+0x2a0>)
 800964a:	f7ff f913 	bl	8008874 <lv_debug_log_error>
 800964e:	e7fe      	b.n	800964e <lv_img_decoder_built_in_open+0x96>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	220c      	movs	r2, #12
 8009656:	2100      	movs	r1, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f003 f810 	bl	800c67e <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	62bb      	str	r3, [r7, #40]	; 0x28
        user_data->f                               = lv_mem_alloc(sizeof(f));
 8009664:	2008      	movs	r0, #8
 8009666:	f002 f99b 	bl	800b9a0 <lv_mem_alloc>
 800966a:	4602      	mov	r2, r0
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	601a      	str	r2, [r3, #0]
        if(user_data->f == NULL) {
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d114      	bne.n	80096a2 <lv_img_decoder_built_in_open+0xea>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            LV_ASSERT_MEM(user_data->f);
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff f8e9 	bl	8008854 <lv_debug_check_null>
 8009682:	4603      	mov	r3, r0
 8009684:	f083 0301 	eor.w	r3, r3, #1
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d009      	beq.n	80096a2 <lv_img_decoder_built_in_open+0xea>
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009696:	461a      	mov	r2, r3
 8009698:	4623      	mov	r3, r4
 800969a:	486f      	ldr	r0, [pc, #444]	; (8009858 <lv_img_decoder_built_in_open+0x2a0>)
 800969c:	f7ff f8ea 	bl	8008874 <lv_debug_log_error>
 80096a0:	e7fe      	b.n	80096a0 <lv_img_decoder_built_in_open+0xe8>
        }

        memcpy(user_data->f, &f, sizeof(f));
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f107 0110 	add.w	r1, r7, #16
 80096aa:	2208      	movs	r2, #8
 80096ac:	4618      	mov	r0, r3
 80096ae:	f002 ffdb 	bl	800c668 <memcpy>
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }

    lv_img_cf_t cf = dsc->header.cf;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	7c1b      	ldrb	r3, [r3, #16]
 80096b6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80096c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d007      	beq.n	80096d8 <lv_img_decoder_built_in_open+0x120>
 80096c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096cc:	2b05      	cmp	r3, #5
 80096ce:	d003      	beq.n	80096d8 <lv_img_decoder_built_in_open+0x120>
 80096d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096d4:	2b06      	cmp	r3, #6
 80096d6:	d10f      	bne.n	80096f8 <lv_img_decoder_built_in_open+0x140>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	7b1b      	ldrb	r3, [r3, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <lv_img_decoder_built_in_open+0x136>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e0ff      	b.n	80098ee <lv_img_decoder_built_in_open+0x336>
        } else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2200      	movs	r2, #0
 80096f2:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e0fa      	b.n	80098ee <lv_img_decoder_built_in_open+0x336>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80096f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096fc:	2b07      	cmp	r3, #7
 80096fe:	d00c      	beq.n	800971a <lv_img_decoder_built_in_open+0x162>
 8009700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009704:	2b08      	cmp	r3, #8
 8009706:	d008      	beq.n	800971a <lv_img_decoder_built_in_open+0x162>
 8009708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800970c:	2b09      	cmp	r3, #9
 800970e:	d004      	beq.n	800971a <lv_img_decoder_built_in_open+0x162>
 8009710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009714:	2b0a      	cmp	r3, #10
 8009716:	f040 80d0 	bne.w	80098ba <lv_img_decoder_built_in_open+0x302>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800971a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff fc96 	bl	8009050 <lv_img_color_format_get_px_size>
 8009724:	4603      	mov	r3, r0
 8009726:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 800972a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800972e:	2201      	movs	r2, #1
 8009730:	fa02 f303 	lsl.w	r3, r2, r3
 8009734:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d125      	bne.n	800978a <lv_img_decoder_built_in_open+0x1d2>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800973e:	200c      	movs	r0, #12
 8009740:	f002 f92e 	bl	800b9a0 <lv_mem_alloc>
 8009744:	4602      	mov	r2, r0
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d114      	bne.n	800977c <lv_img_decoder_built_in_open+0x1c4>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                LV_ASSERT_MEM(dsc->user_data);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff f87c 	bl	8008854 <lv_debug_check_null>
 800975c:	4603      	mov	r3, r0
 800975e:	f083 0301 	eor.w	r3, r3, #1
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d009      	beq.n	800977c <lv_img_decoder_built_in_open+0x1c4>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009770:	461a      	mov	r2, r3
 8009772:	4623      	mov	r3, r4
 8009774:	4838      	ldr	r0, [pc, #224]	; (8009858 <lv_img_decoder_built_in_open+0x2a0>)
 8009776:	f7ff f87d 	bl	8008874 <lv_debug_log_error>
 800977a:	e7fe      	b.n	800977a <lv_img_decoder_built_in_open+0x1c2>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	220c      	movs	r2, #12
 8009782:	2100      	movs	r1, #0
 8009784:	4618      	mov	r0, r3
 8009786:	f002 ff7a 	bl	800c67e <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	4618      	mov	r0, r3
 8009796:	f002 f903 	bl	800b9a0 <lv_mem_alloc>
 800979a:	4602      	mov	r2, r0
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	605a      	str	r2, [r3, #4]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80097a0:	6a38      	ldr	r0, [r7, #32]
 80097a2:	f002 f8fd 	bl	800b9a0 <lv_mem_alloc>
 80097a6:	4602      	mov	r2, r0
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	609a      	str	r2, [r3, #8]
        if(user_data->palette == NULL || user_data->opa == NULL) {
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <lv_img_decoder_built_in_open+0x204>
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d114      	bne.n	80097e6 <lv_img_decoder_built_in_open+0x22e>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
#if LV_USE_FILESYSTEM
            LV_ASSERT_MEM(user_data->f);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff f847 	bl	8008854 <lv_debug_check_null>
 80097c6:	4603      	mov	r3, r0
 80097c8:	f083 0301 	eor.w	r3, r3, #1
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d009      	beq.n	80097e6 <lv_img_decoder_built_in_open+0x22e>
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80097da:	461a      	mov	r2, r3
 80097dc:	4623      	mov	r3, r4
 80097de:	481e      	ldr	r0, [pc, #120]	; (8009858 <lv_img_decoder_built_in_open+0x2a0>)
 80097e0:	f7ff f848 	bl	8008874 <lv_debug_log_error>
 80097e4:	e7fe      	b.n	80097e4 <lv_img_decoder_built_in_open+0x22c>
#endif
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	7b1b      	ldrb	r3, [r3, #12]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d12b      	bne.n	8009846 <lv_img_decoder_built_in_open+0x28e>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2104      	movs	r1, #4
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fe04 	bl	800b402 <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 80097fa:	2300      	movs	r3, #0
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
 80097fe:	e01d      	b.n	800983c <lv_img_decoder_built_in_open+0x284>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f107 010c 	add.w	r1, r7, #12
 8009808:	2300      	movs	r3, #0
 800980a:	2204      	movs	r2, #4
 800980c:	f001 fdc3 	bl	800b396 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8009810:	7bb8      	ldrb	r0, [r7, #14]
 8009812:	7b79      	ldrb	r1, [r7, #13]
 8009814:	7b3d      	ldrb	r5, [r7, #12]
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	18d4      	adds	r4, r2, r3
 8009820:	462a      	mov	r2, r5
 8009822:	f7ff fd4f 	bl	80092c4 <lv_color_make>
 8009826:	4603      	mov	r3, r0
 8009828:	8023      	strh	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	689a      	ldr	r2, [r3, #8]
 800982e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009830:	4413      	add	r3, r2
 8009832:	7bfa      	ldrb	r2, [r7, #15]
 8009834:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8009836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009838:	3301      	adds	r3, #1
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
 800983c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	429a      	cmp	r2, r3
 8009842:	d3dd      	bcc.n	8009800 <lv_img_decoder_built_in_open+0x248>
 8009844:	e034      	b.n	80098b0 <lv_img_decoder_built_in_open+0x2f8>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
            return LV_RES_INV;
#endif
        } else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 800984e:	2300      	movs	r3, #0
 8009850:	633b      	str	r3, [r7, #48]	; 0x30
 8009852:	e029      	b.n	80098a8 <lv_img_decoder_built_in_open+0x2f0>
 8009854:	0800c86c 	.word	0x0800c86c
 8009858:	0800c85c 	.word	0x0800c85c
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800985c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	4413      	add	r3, r2
 8009864:	7898      	ldrb	r0, [r3, #2]
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	4413      	add	r3, r2
 800986e:	7859      	ldrb	r1, [r3, #1]
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	69ba      	ldr	r2, [r7, #24]
 8009876:	4413      	add	r3, r2
 8009878:	781d      	ldrb	r5, [r3, #0]
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	18d4      	adds	r4, r2, r3
 8009884:	462a      	mov	r2, r5
 8009886:	f7ff fd1d 	bl	80092c4 <lv_color_make>
 800988a:	4603      	mov	r3, r0
 800988c:	8023      	strh	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	441a      	add	r2, r3
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	6899      	ldr	r1, [r3, #8]
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	440b      	add	r3, r1
 800989e:	78d2      	ldrb	r2, [r2, #3]
 80098a0:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	3301      	adds	r3, #1
 80098a6:	633b      	str	r3, [r7, #48]	; 0x30
 80098a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d3d5      	bcc.n	800985c <lv_img_decoder_built_in_open+0x2a4>
            }
        }

        dsc->img_data = NULL;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2200      	movs	r2, #0
 80098b4:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e019      	b.n	80098ee <lv_img_decoder_built_in_open+0x336>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 80098ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098be:	2b0b      	cmp	r3, #11
 80098c0:	d00b      	beq.n	80098da <lv_img_decoder_built_in_open+0x322>
 80098c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c6:	2b0c      	cmp	r3, #12
 80098c8:	d007      	beq.n	80098da <lv_img_decoder_built_in_open+0x322>
 80098ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ce:	2b0d      	cmp	r3, #13
 80098d0:	d003      	beq.n	80098da <lv_img_decoder_built_in_open+0x322>
 80098d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d6:	2b0e      	cmp	r3, #14
 80098d8:	d104      	bne.n	80098e4 <lv_img_decoder_built_in_open+0x32c>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2200      	movs	r2, #0
 80098de:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 80098e0:	2301      	movs	r3, #1
 80098e2:	e004      	b.n	80098ee <lv_img_decoder_built_in_open+0x336>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f898 	bl	8009a1c <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 80098ec:	2300      	movs	r3, #0
    }
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3738      	adds	r7, #56	; 0x38
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bdb0      	pop	{r4, r5, r7, pc}
 80098f6:	bf00      	nop

080098f8 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4611      	mov	r1, r2
 8009904:	461a      	mov	r2, r3
 8009906:	460b      	mov	r3, r1
 8009908:	80fb      	strh	r3, [r7, #6]
 800990a:	4613      	mov	r3, r2
 800990c:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 800990e:	2300      	movs	r3, #0
 8009910:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	7c1b      	ldrb	r3, [r3, #16]
 8009916:	f003 031f 	and.w	r3, r3, #31
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b04      	cmp	r3, #4
 800991e:	d00d      	beq.n	800993c <lv_img_decoder_built_in_read_line+0x44>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	7c1b      	ldrb	r3, [r3, #16]
 8009924:	f003 031f 	and.w	r3, r3, #31
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b05      	cmp	r3, #5
 800992c:	d006      	beq.n	800993c <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	7c1b      	ldrb	r3, [r3, #16]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8009938:	2b06      	cmp	r3, #6
 800993a:	d112      	bne.n	8009962 <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	7b1b      	ldrb	r3, [r3, #12]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d166      	bne.n	8009a12 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8009944:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8009948:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800994c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4603      	mov	r3, r0
 8009956:	68b8      	ldr	r0, [r7, #8]
 8009958:	f000 f88c 	bl	8009a74 <lv_img_decoder_built_in_line_true_color>
 800995c:	4603      	mov	r3, r0
 800995e:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009960:	e057      	b.n	8009a12 <lv_img_decoder_built_in_read_line+0x11a>
        }
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	7c1b      	ldrb	r3, [r3, #16]
 8009966:	f003 031f 	and.w	r3, r3, #31
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b0b      	cmp	r3, #11
 800996e:	d014      	beq.n	800999a <lv_img_decoder_built_in_read_line+0xa2>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	7c1b      	ldrb	r3, [r3, #16]
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b0c      	cmp	r3, #12
 800997c:	d00d      	beq.n	800999a <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	7c1b      	ldrb	r3, [r3, #16]
 8009982:	f003 031f 	and.w	r3, r3, #31
 8009986:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8009988:	2b0d      	cmp	r3, #13
 800998a:	d006      	beq.n	800999a <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	7c1b      	ldrb	r3, [r3, #16]
 8009990:	f003 031f 	and.w	r3, r3, #31
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b0e      	cmp	r3, #14
 8009998:	d10e      	bne.n	80099b8 <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 800999a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800999e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80099a2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4603      	mov	r3, r0
 80099ac:	68b8      	ldr	r0, [r7, #8]
 80099ae:	f000 f8bf 	bl	8009b30 <lv_img_decoder_built_in_line_alpha>
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]
 80099b6:	e02c      	b.n	8009a12 <lv_img_decoder_built_in_read_line+0x11a>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	7c1b      	ldrb	r3, [r3, #16]
 80099bc:	f003 031f 	and.w	r3, r3, #31
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b07      	cmp	r3, #7
 80099c4:	d014      	beq.n	80099f0 <lv_img_decoder_built_in_read_line+0xf8>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	7c1b      	ldrb	r3, [r3, #16]
 80099ca:	f003 031f 	and.w	r3, r3, #31
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d00d      	beq.n	80099f0 <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	7c1b      	ldrb	r3, [r3, #16]
 80099d8:	f003 031f 	and.w	r3, r3, #31
 80099dc:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80099de:	2b09      	cmp	r3, #9
 80099e0:	d006      	beq.n	80099f0 <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	7c1b      	ldrb	r3, [r3, #16]
 80099e6:	f003 031f 	and.w	r3, r3, #31
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b0a      	cmp	r3, #10
 80099ee:	d10e      	bne.n	8009a0e <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 80099f0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80099f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80099f8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	4603      	mov	r3, r0
 8009a02:	68b8      	ldr	r0, [r7, #8]
 8009a04:	f000 faaa 	bl	8009f5c <lv_img_decoder_built_in_line_indexed>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]
 8009a0c:	e001      	b.n	8009a12 <lv_img_decoder_built_in_read_line+0x11a>
    } else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e000      	b.n	8009a14 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d01c      	beq.n	8009a6c <lv_img_decoder_built_in_close+0x50>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d009      	beq.n	8009a4e <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 fc7a 	bl	800b338 <lv_fs_close>
            lv_mem_free(user_data->f);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f001 ffdb 	bl	800ba04 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d004      	beq.n	8009a60 <lv_img_decoder_built_in_close+0x44>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 ffd2 	bl	800ba04 <lv_mem_free>

        lv_mem_free(user_data);
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f001 ffcf 	bl	800ba04 <lv_mem_free>

        dsc->user_data = NULL;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	621a      	str	r2, [r3, #32]
    }
}
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08a      	sub	sp, #40	; 0x28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	461a      	mov	r2, r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	817b      	strh	r3, [r7, #10]
 8009a86:	460b      	mov	r3, r1
 8009a88:	813b      	strh	r3, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	7c1b      	ldrb	r3, [r3, #16]
 8009a98:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fad6 	bl	8009050 <lv_img_color_format_get_px_size>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8009aaa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	6912      	ldr	r2, [r2, #16]
 8009ab2:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8009ab6:	b292      	uxth	r2, r2
 8009ab8:	fb02 f203 	mul.w	r2, r2, r3
 8009abc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009ac6:	fb02 f303 	mul.w	r3, r2, r3
 8009aca:	10db      	asrs	r3, r3, #3
 8009acc:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	69f9      	ldr	r1, [r7, #28]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f001 fc91 	bl	800b402 <lv_fs_seek>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8009ae4:	7efb      	ldrb	r3, [r7, #27]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e01c      	b.n	8009b28 <lv_img_decoder_built_in_line_true_color+0xb4>
    }
    uint32_t btr = len * (px_size >> 3);
 8009aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009af2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009af6:	08d2      	lsrs	r2, r2, #3
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	fb02 f303 	mul.w	r3, r2, r3
 8009afe:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]
    lv_fs_read(user_data->f, buf, btr, &br);
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b10:	f001 fc41 	bl	800b396 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8009b14:	7efb      	ldrb	r3, [r7, #27]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <lv_img_decoder_built_in_line_true_color+0xae>
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d001      	beq.n	8009b26 <lv_img_decoder_built_in_line_true_color+0xb2>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e000      	b.n	8009b28 <lv_img_decoder_built_in_line_true_color+0xb4>
    }

    return LV_RES_OK;
 8009b26:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3728      	adds	r7, #40	; 0x28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8009b30:	b590      	push	{r4, r7, lr}
 8009b32:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	f107 040c 	add.w	r4, r7, #12
 8009b3c:	6020      	str	r0, [r4, #0]
 8009b3e:	460c      	mov	r4, r1
 8009b40:	4610      	mov	r0, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	f107 030a 	add.w	r3, r7, #10
 8009b48:	4622      	mov	r2, r4
 8009b4a:	801a      	strh	r2, [r3, #0]
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	4602      	mov	r2, r0
 8009b52:	801a      	strh	r2, [r3, #0]
 8009b54:	1dbb      	adds	r3, r7, #6
 8009b56:	460a      	mov	r2, r1
 8009b58:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f887 3208 	strb.w	r3, [r7, #520]	; 0x208
 8009b60:	23ff      	movs	r3, #255	; 0xff
 8009b62:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8009b66:	4bcc      	ldr	r3, [pc, #816]	; (8009e98 <lv_img_decoder_built_in_line_alpha+0x368>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8009b6e:	4bcb      	ldr	r3, [pc, #812]	; (8009e9c <lv_img_decoder_built_in_line_alpha+0x36c>)
 8009b70:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 8009b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 8009b7a:	f107 030c 	add.w	r3, r7, #12
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009b84:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8009b8e:	e022      	b.n	8009bd6 <lv_img_decoder_built_in_line_alpha+0xa6>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8009b90:	f8b7 11f0 	ldrh.w	r1, [r7, #496]	; 0x1f0
 8009b94:	f9b7 222e 	ldrsh.w	r2, [r7, #558]	; 0x22e
 8009b98:	4613      	mov	r3, r2
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	4413      	add	r3, r2
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8009ba4:	4413      	add	r3, r2
 8009ba6:	b2ca      	uxtb	r2, r1
 8009ba8:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8009baa:	f8b7 31f0 	ldrh.w	r3, [r7, #496]	; 0x1f0
 8009bae:	0a1b      	lsrs	r3, r3, #8
 8009bb0:	b299      	uxth	r1, r3
 8009bb2:	f9b7 222e 	ldrsh.w	r2, [r7, #558]	; 0x22e
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4413      	add	r3, r2
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8009bc2:	4413      	add	r3, r2
 8009bc4:	b2ca      	uxtb	r2, r1
 8009bc6:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8009bc8:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	3301      	adds	r3, #1
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8009bd6:	1dbb      	adds	r3, r7, #6
 8009bd8:	f9b7 222e 	ldrsh.w	r2, [r7, #558]	; 0x22e
 8009bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	dbd5      	blt.n	8009b90 <lv_img_decoder_built_in_line_alpha+0x60>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8009bea:	f107 030c 	add.w	r3, r7, #12
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	7c1b      	ldrb	r3, [r3, #16]
 8009bf2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fa29 	bl	8009050 <lv_img_color_format_get_px_size>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8009c04:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8009c08:	2201      	movs	r2, #1
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	3b01      	subs	r3, #1
 8009c12:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214

    lv_coord_t w = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
    uint32_t ofs = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    int8_t pos   = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
    switch(dsc->header.cf) {
 8009c28:	f107 030c 	add.w	r3, r7, #12
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	7c1b      	ldrb	r3, [r3, #16]
 8009c30:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	3b0b      	subs	r3, #11
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	f200 80ef 	bhi.w	8009e1c <lv_img_decoder_built_in_line_alpha+0x2ec>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <lv_img_decoder_built_in_line_alpha+0x114>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009c55 	.word	0x08009c55
 8009c48:	08009cd5 	.word	0x08009cd5
 8009c4c:	08009d59 	.word	0x08009d59
 8009c50:	08009ddd 	.word	0x08009ddd
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8009c54:	f107 030c 	add.w	r3, r7, #12
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	10db      	asrs	r3, r3, #3
 8009c64:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
            if(dsc->header.w & 0x7) w++;
 8009c68:	f107 030c 	add.w	r3, r7, #12
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d006      	beq.n	8009c8c <lv_img_decoder_built_in_line_alpha+0x15c>
 8009c7e:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	; 0x226
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3301      	adds	r3, #1
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
            ofs += w * y + (x >> 3); /*First pixel*/
 8009c8c:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	; 0x226
 8009c90:	f107 0208 	add.w	r2, r7, #8
 8009c94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009c98:	fb02 f303 	mul.w	r3, r2, r3
 8009c9c:	f107 020a 	add.w	r2, r7, #10
 8009ca0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009ca4:	10d2      	asrs	r2, r2, #3
 8009ca6:	b212      	sxth	r2, r2
 8009ca8:	4413      	add	r3, r2
 8009caa:	461a      	mov	r2, r3
 8009cac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            pos       = 7 - (x & 0x7);
 8009cb6:	f107 030a 	add.w	r3, r7, #10
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	43db      	mvns	r3, r3
 8009cc0:	b25b      	sxtb	r3, r3
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
            opa_table = alpha1_opa_table;
 8009cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009cce:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
            break;
 8009cd2:	e0a3      	b.n	8009e1c <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8009cd4:	f107 030c 	add.w	r3, r7, #12
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	109b      	asrs	r3, r3, #2
 8009ce4:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
            if(dsc->header.w & 0x3) w++;
 8009ce8:	f107 030c 	add.w	r3, r7, #12
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d006      	beq.n	8009d0c <lv_img_decoder_built_in_line_alpha+0x1dc>
 8009cfe:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	; 0x226
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3301      	adds	r3, #1
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
            ofs += w * y + (x >> 2); /*First pixel*/
 8009d0c:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	; 0x226
 8009d10:	f107 0208 	add.w	r2, r7, #8
 8009d14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009d18:	fb02 f303 	mul.w	r3, r2, r3
 8009d1c:	f107 020a 	add.w	r2, r7, #10
 8009d20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009d24:	1092      	asrs	r2, r2, #2
 8009d26:	b212      	sxth	r2, r2
 8009d28:	4413      	add	r3, r2
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8009d30:	4413      	add	r3, r2
 8009d32:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            pos       = 6 - ((x & 0x3) * 2);
 8009d36:	f107 030a 	add.w	r3, r7, #10
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	43db      	mvns	r3, r3
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
            opa_table = alpha2_opa_table;
 8009d4e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8009d52:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
            break;
 8009d56:	e061      	b.n	8009e1c <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8009d58:	f107 030c 	add.w	r3, r7, #12
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	105b      	asrs	r3, r3, #1
 8009d68:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
            if(dsc->header.w & 0x1) w++;
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d006      	beq.n	8009d90 <lv_img_decoder_built_in_line_alpha+0x260>
 8009d82:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	; 0x226
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	3301      	adds	r3, #1
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
            ofs += w * y + (x >> 1); /*First pixel*/
 8009d90:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	; 0x226
 8009d94:	f107 0208 	add.w	r2, r7, #8
 8009d98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009d9c:	fb02 f303 	mul.w	r3, r2, r3
 8009da0:	f107 020a 	add.w	r2, r7, #10
 8009da4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009da8:	1052      	asrs	r2, r2, #1
 8009daa:	b212      	sxth	r2, r2
 8009dac:	4413      	add	r3, r2
 8009dae:	461a      	mov	r2, r3
 8009db0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8009db4:	4413      	add	r3, r2
 8009db6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            pos       = 4 - ((x & 0x1) * 4);
 8009dba:	f107 030a 	add.w	r3, r7, #10
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <lv_img_decoder_built_in_line_alpha+0x29c>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	e000      	b.n	8009dce <lv_img_decoder_built_in_line_alpha+0x29e>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
            opa_table = alpha4_opa_table;
 8009dd2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009dd6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
            break;
 8009dda:	e01f      	b.n	8009e1c <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8009ddc:	f107 030c 	add.w	r3, r7, #12
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
            ofs += w * y + x;  /*First pixel*/
 8009dee:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	; 0x226
 8009df2:	f107 0208 	add.w	r2, r7, #8
 8009df6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009dfa:	fb02 f203 	mul.w	r2, r2, r3
 8009dfe:	f107 030a 	add.w	r3, r7, #10
 8009e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e06:	4413      	add	r3, r2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8009e0e:	4413      	add	r3, r2
 8009e10:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            pos = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
            break;
 8009e1a:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8009e1c:	f107 030c 	add.w	r3, r7, #12
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8009e2e:	f107 030c 	add.w	r3, r7, #12
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	7b1b      	ldrb	r3, [r3, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10e      	bne.n	8009e58 <lv_img_decoder_built_in_line_alpha+0x328>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8009e3a:	f107 030c 	add.w	r3, r7, #12
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

        data_tmp = img_dsc->data + ofs;
 8009e46:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8009e50:	4413      	add	r3, r2
 8009e52:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8009e56:	e017      	b.n	8009e88 <lv_img_decoder_built_in_line_alpha+0x358>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8009e58:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f001 facb 	bl	800b402 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8009e6c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f9b7 2226 	ldrsh.w	r2, [r7, #550]	; 0x226
 8009e76:	f107 0110 	add.w	r1, r7, #16
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f001 fa8b 	bl	800b396 <lv_fs_read>
        data_tmp = fs_buf;
 8009e80:	f107 0310 	add.w	r3, r7, #16
 8009e84:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
    uint8_t val_act;
    for(i = 0; i < len; i++) {
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8009e94:	e054      	b.n	8009f40 <lv_img_decoder_built_in_line_alpha+0x410>
 8009e96:	bf00      	nop
 8009e98:	0800c870 	.word	0x0800c870
 8009e9c:	0800c874 	.word	0x0800c874
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8009ea0:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8009ea4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8009ea8:	4413      	add	r3, r2
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	4619      	mov	r1, r3
 8009eae:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8009eb2:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 8009eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eba:	ea01 0203 	and.w	r2, r1, r3
 8009ebe:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 8009ec2:	fa42 f303 	asr.w	r3, r2, r3
 8009ec6:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8009eca:	f107 030c 	add.w	r3, r7, #12
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	7c1b      	ldrb	r3, [r3, #16]
 8009ed2:	f003 031f 	and.w	r3, r3, #31
 8009ed6:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8009ed8:	2b0e      	cmp	r3, #14
 8009eda:	d006      	beq.n	8009eea <lv_img_decoder_built_in_line_alpha+0x3ba>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8009edc:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8009ee0:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8009ee4:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	e001      	b.n	8009eee <lv_img_decoder_built_in_line_alpha+0x3be>
 8009eea:	f897 220a 	ldrb.w	r2, [r7, #522]	; 0x20a
 8009eee:	f9b7 122e 	ldrsh.w	r1, [r7, #558]	; 0x22e
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	440b      	add	r3, r1
 8009ef8:	3302      	adds	r3, #2
 8009efa:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8009efe:	440b      	add	r3, r1
 8009f00:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 8009f02:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8009f06:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
        if(pos < 0) {
 8009f12:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	da0b      	bge.n	8009f32 <lv_img_decoder_built_in_line_alpha+0x402>
            pos = 8 - px_size;
 8009f1a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8009f1e:	f1c3 0308 	rsb	r3, r3, #8
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
            data_tmp++;
 8009f28:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    for(i = 0; i < len; i++) {
 8009f32:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	3301      	adds	r3, #1
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8009f40:	1dbb      	adds	r3, r7, #6
 8009f42:	f9b7 222e 	ldrsh.w	r2, [r7, #558]	; 0x22e
 8009f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	dba8      	blt.n	8009ea0 <lv_img_decoder_built_in_line_alpha+0x370>
        }
    }

    return LV_RES_OK;
 8009f4e:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd90      	pop	{r4, r7, pc}
 8009f5a:	bf00      	nop

08009f5c <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8009f5c:	b590      	push	{r4, r7, lr}
 8009f5e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	f107 040c 	add.w	r4, r7, #12
 8009f68:	6020      	str	r0, [r4, #0]
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f107 030a 	add.w	r3, r7, #10
 8009f74:	4622      	mov	r2, r4
 8009f76:	801a      	strh	r2, [r3, #0]
 8009f78:	f107 0308 	add.w	r3, r7, #8
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	1dbb      	adds	r3, r7, #6
 8009f82:	460a      	mov	r2, r1
 8009f84:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8009f86:	f107 030c 	add.w	r3, r7, #12
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	7c1b      	ldrb	r3, [r3, #16]
 8009f8e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff f85b 	bl	8009050 <lv_img_color_format_get_px_size>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8009fa0:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	3b01      	subs	r3, #1
 8009fae:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206

    lv_coord_t w = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int8_t pos   = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
    uint32_t ofs = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    switch(dsc->header.cf) {
 8009fc4:	f107 030c 	add.w	r3, r7, #12
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	7c1b      	ldrb	r3, [r3, #16]
 8009fcc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	3b07      	subs	r3, #7
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	f200 80f8 	bhi.w	800a1ca <lv_img_decoder_built_in_line_indexed+0x26e>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <lv_img_decoder_built_in_line_indexed+0x84>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	08009ff1 	.word	0x08009ff1
 8009fe4:	0800a073 	.word	0x0800a073
 8009fe8:	0800a0f9 	.word	0x0800a0f9
 8009fec:	0800a17f 	.word	0x0800a17f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	10db      	asrs	r3, r3, #3
 800a000:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
            if(dsc->header.w & 0x7) w++;
 800a004:	f107 030c 	add.w	r3, r7, #12
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a010:	b29b      	uxth	r3, r3
 800a012:	f003 0307 	and.w	r3, r3, #7
 800a016:	2b00      	cmp	r3, #0
 800a018:	d006      	beq.n	800a028 <lv_img_decoder_built_in_line_indexed+0xcc>
 800a01a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800a01e:	b29b      	uxth	r3, r3
 800a020:	3301      	adds	r3, #1
 800a022:	b29b      	uxth	r3, r3
 800a024:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
            ofs += w * y + (x >> 3); /*First pixel*/
 800a028:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800a02c:	f107 0208 	add.w	r2, r7, #8
 800a030:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a034:	fb02 f303 	mul.w	r3, r2, r3
 800a038:	f107 020a 	add.w	r2, r7, #10
 800a03c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a040:	10d2      	asrs	r2, r2, #3
 800a042:	b212      	sxth	r2, r2
 800a044:	4413      	add	r3, r2
 800a046:	461a      	mov	r2, r3
 800a048:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a04c:	4413      	add	r3, r2
 800a04e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            ofs += 8;                /*Skip the palette*/
 800a052:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a056:	3308      	adds	r3, #8
 800a058:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            pos = 7 - (x & 0x7);
 800a05c:	f107 030a 	add.w	r3, r7, #10
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	b25b      	sxtb	r3, r3
 800a064:	43db      	mvns	r3, r3
 800a066:	b25b      	sxtb	r3, r3
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
            break;
 800a070:	e0ab      	b.n	800a1ca <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800a072:	f107 030c 	add.w	r3, r7, #12
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a07e:	b29b      	uxth	r3, r3
 800a080:	109b      	asrs	r3, r3, #2
 800a082:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
            if(dsc->header.w & 0x3) w++;
 800a086:	f107 030c 	add.w	r3, r7, #12
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a092:	b29b      	uxth	r3, r3
 800a094:	f003 0303 	and.w	r3, r3, #3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d006      	beq.n	800a0aa <lv_img_decoder_built_in_line_indexed+0x14e>
 800a09c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
            ofs += w * y + (x >> 2); /*First pixel*/
 800a0aa:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800a0ae:	f107 0208 	add.w	r2, r7, #8
 800a0b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ba:	f107 020a 	add.w	r2, r7, #10
 800a0be:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a0c2:	1092      	asrs	r2, r2, #2
 800a0c4:	b212      	sxth	r2, r2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            ofs += 16;               /*Skip the palette*/
 800a0d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a0d8:	3310      	adds	r3, #16
 800a0da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            pos = 6 - ((x & 0x3) * 2);
 800a0de:	f107 030a 	add.w	r3, r7, #10
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
            break;
 800a0f6:	e068      	b.n	800a1ca <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800a0f8:	f107 030c 	add.w	r3, r7, #12
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a104:	b29b      	uxth	r3, r3
 800a106:	105b      	asrs	r3, r3, #1
 800a108:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
            if(dsc->header.w & 0x1) w++;
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <lv_img_decoder_built_in_line_indexed+0x1d4>
 800a122:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800a126:	b29b      	uxth	r3, r3
 800a128:	3301      	adds	r3, #1
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
            ofs += w * y + (x >> 1); /*First pixel*/
 800a130:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800a134:	f107 0208 	add.w	r2, r7, #8
 800a138:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a13c:	fb02 f303 	mul.w	r3, r2, r3
 800a140:	f107 020a 	add.w	r2, r7, #10
 800a144:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a148:	1052      	asrs	r2, r2, #1
 800a14a:	b212      	sxth	r2, r2
 800a14c:	4413      	add	r3, r2
 800a14e:	461a      	mov	r2, r3
 800a150:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a154:	4413      	add	r3, r2
 800a156:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            ofs += 64;               /*Skip the palette*/
 800a15a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a15e:	3340      	adds	r3, #64	; 0x40
 800a160:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            pos = 4 - ((x & 0x1) * 4);
 800a164:	f107 030a 	add.w	r3, r7, #10
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <lv_img_decoder_built_in_line_indexed+0x21a>
 800a172:	2304      	movs	r3, #4
 800a174:	e000      	b.n	800a178 <lv_img_decoder_built_in_line_indexed+0x21c>
 800a176:	2300      	movs	r3, #0
 800a178:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
            break;
 800a17c:	e025      	b.n	800a1ca <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800a17e:	f107 030c 	add.w	r3, r7, #12
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
            ofs += w * y + x;  /*First pixel*/
 800a190:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800a194:	f107 0208 	add.w	r2, r7, #8
 800a198:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a19c:	fb02 f203 	mul.w	r2, r2, r3
 800a1a0:	f107 030a 	add.w	r3, r7, #10
 800a1a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            ofs += 1024;       /*Skip the palette*/
 800a1b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a1ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1be:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            pos = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
            break;
 800a1c8:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800a1ca:	f107 030c 	add.w	r3, r7, #12
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	7b1b      	ldrb	r3, [r3, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10e      	bne.n	800a206 <lv_img_decoder_built_in_line_indexed+0x2aa>
        const lv_img_dsc_t * img_dsc = dsc->src;
 800a1e8:	f107 030c 	add.w	r3, r7, #12
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        data_tmp                     = img_dsc->data + ofs;
 800a1f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a1f8:	689a      	ldr	r2, [r3, #8]
 800a1fa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a1fe:	4413      	add	r3, r2
 800a200:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800a204:	e017      	b.n	800a236 <lv_img_decoder_built_in_line_indexed+0x2da>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800a206:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800a210:	3304      	adds	r3, #4
 800a212:	4619      	mov	r1, r3
 800a214:	4610      	mov	r0, r2
 800a216:	f001 f8f4 	bl	800b402 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800a21a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	f9b7 2216 	ldrsh.w	r2, [r7, #534]	; 0x216
 800a224:	f107 0118 	add.w	r1, r7, #24
 800a228:	2300      	movs	r3, #0
 800a22a:	f001 f8b4 	bl	800b396 <lv_fs_read>
        data_tmp = fs_buf;
 800a22e:	f107 0318 	add.w	r3, r7, #24
 800a232:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
#endif
    }

    uint8_t val_act;
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800a236:	2300      	movs	r3, #0
 800a238:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
 800a23c:	e06a      	b.n	800a314 <lv_img_decoder_built_in_line_indexed+0x3b8>
        val_act = (*data_tmp & (mask << pos)) >> pos;
 800a23e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	4619      	mov	r1, r3
 800a246:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 800a24a:	f997 3215 	ldrsb.w	r3, [r7, #533]	; 0x215
 800a24e:	fa02 f303 	lsl.w	r3, r2, r3
 800a252:	ea01 0203 	and.w	r2, r1, r3
 800a256:	f997 3215 	ldrsb.w	r3, [r7, #533]	; 0x215
 800a25a:	fa42 f303 	asr.w	r3, r2, r3
 800a25e:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb

        lv_color_t color = user_data->palette[val_act];
 800a262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a266:	685a      	ldr	r2, [r3, #4]
 800a268:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	441a      	add	r2, r3
 800a270:	f107 0314 	add.w	r3, r7, #20
 800a274:	8812      	ldrh	r2, [r2, #0]
 800a276:	801a      	strh	r2, [r3, #0]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 800a278:	f107 0314 	add.w	r3, r7, #20
 800a27c:	8819      	ldrh	r1, [r3, #0]
 800a27e:	f9b7 220a 	ldrsh.w	r2, [r7, #522]	; 0x20a
 800a282:	4613      	mov	r3, r2
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	4413      	add	r3, r2
 800a288:	461a      	mov	r2, r3
 800a28a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a28e:	4413      	add	r3, r2
 800a290:	b2ca      	uxtb	r2, r1
 800a292:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800a294:	f107 0314 	add.w	r3, r7, #20
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	0a1b      	lsrs	r3, r3, #8
 800a29c:	b299      	uxth	r1, r3
 800a29e:	f9b7 220a 	ldrsh.w	r2, [r7, #522]	; 0x20a
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800a2ae:	4413      	add	r3, r2
 800a2b0:	b2ca      	uxtb	r2, r1
 800a2b2:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800a2b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 800a2be:	18d1      	adds	r1, r2, r3
 800a2c0:	f9b7 220a 	ldrsh.w	r2, [r7, #522]	; 0x20a
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3302      	adds	r3, #2
 800a2cc:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800a2d0:	4413      	add	r3, r2
 800a2d2:	780a      	ldrb	r2, [r1, #0]
 800a2d4:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 800a2d6:	f897 2215 	ldrb.w	r2, [r7, #533]	; 0x215
 800a2da:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
        if(pos < 0) {
 800a2e6:	f997 3215 	ldrsb.w	r3, [r7, #533]	; 0x215
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	da0b      	bge.n	800a306 <lv_img_decoder_built_in_line_indexed+0x3aa>
            pos = 8 - px_size;
 800a2ee:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 800a2f2:	f1c3 0308 	rsb	r3, r3, #8
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
            data_tmp++;
 800a2fc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a300:	3301      	adds	r3, #1
 800a302:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    for(i = 0; i < len; i++) {
 800a306:	f9b7 320a 	ldrsh.w	r3, [r7, #522]	; 0x20a
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	3301      	adds	r3, #1
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
 800a314:	1dbb      	adds	r3, r7, #6
 800a316:	f9b7 220a 	ldrsh.w	r2, [r7, #522]	; 0x20a
 800a31a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a31e:	429a      	cmp	r2, r3
 800a320:	db8d      	blt.n	800a23e <lv_img_decoder_built_in_line_indexed+0x2e2>
        }
    }

    return LV_RES_OK;
 800a322:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800a324:	4618      	mov	r0, r3
 800a326:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd90      	pop	{r4, r7, pc}
 800a32e:	bf00      	nop

0800a330 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b08b      	sub	sp, #44	; 0x2c
 800a334:	af02      	add	r7, sp, #8
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	61bb      	str	r3, [r7, #24]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f90e 	bl	800a564 <get_glyph_dsc_id>
 800a348:	6178      	str	r0, [r7, #20]
    if(!gid) return NULL;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <lv_font_get_bitmap_fmt_txt+0x24>
 800a350:	2300      	movs	r3, #0
 800a352:	e094      	b.n	800a47e <lv_font_get_bitmap_fmt_txt+0x14e>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4413      	add	r3, r2
 800a35e:	613b      	str	r3, [r7, #16]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	7cdb      	ldrb	r3, [r3, #19]
 800a364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10b      	bne.n	800a386 <lv_font_get_bitmap_fmt_txt+0x56>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8083 	beq.w	800a47c <lv_font_get_bitmap_fmt_txt+0x14c>
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	6812      	ldr	r2, [r2, #0]
 800a37e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a382:	4413      	add	r3, r2
 800a384:	e07b      	b.n	800a47e <lv_font_get_bitmap_fmt_txt+0x14e>
    /*Handle compressed bitmap*/
    else
    {
        static uint8_t * buf = NULL;

        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	791b      	ldrb	r3, [r3, #4]
 800a38a:	461a      	mov	r2, r3
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	795b      	ldrb	r3, [r3, #5]
 800a390:	fb03 f302 	mul.w	r3, r3, r2
 800a394:	60fb      	str	r3, [r7, #12]
        if(gsize == 0) return NULL;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <lv_font_get_bitmap_fmt_txt+0x70>
 800a39c:	2300      	movs	r3, #0
 800a39e:	e06e      	b.n	800a47e <lv_font_get_bitmap_fmt_txt+0x14e>

        uint32_t buf_size = gsize;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	61fb      	str	r3, [r7, #28]
        switch(fdsc->bpp) {
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	7cdb      	ldrb	r3, [r3, #19]
 800a3a8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d81b      	bhi.n	800a3ec <lv_font_get_bitmap_fmt_txt+0xbc>
 800a3b4:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <lv_font_get_bitmap_fmt_txt+0x8c>)
 800a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ba:	bf00      	nop
 800a3bc:	0800a3cd 	.word	0x0800a3cd
 800a3c0:	0800a3d5 	.word	0x0800a3d5
 800a3c4:	0800a3dd 	.word	0x0800a3dd
 800a3c8:	0800a3e5 	.word	0x0800a3e5
        case 1: buf_size = gsize >> 3;  break;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	08db      	lsrs	r3, r3, #3
 800a3d0:	61fb      	str	r3, [r7, #28]
 800a3d2:	e00b      	b.n	800a3ec <lv_font_get_bitmap_fmt_txt+0xbc>
        case 2: buf_size = gsize >> 2;  break;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	089b      	lsrs	r3, r3, #2
 800a3d8:	61fb      	str	r3, [r7, #28]
 800a3da:	e007      	b.n	800a3ec <lv_font_get_bitmap_fmt_txt+0xbc>
        case 3: buf_size = gsize >> 1;  break;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	085b      	lsrs	r3, r3, #1
 800a3e0:	61fb      	str	r3, [r7, #28]
 800a3e2:	e003      	b.n	800a3ec <lv_font_get_bitmap_fmt_txt+0xbc>
        case 4: buf_size = gsize >> 1;  break;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	085b      	lsrs	r3, r3, #1
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	bf00      	nop
        }

        if(lv_mem_get_size(buf) < buf_size) {
 800a3ec:	4b26      	ldr	r3, [pc, #152]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 fb97 	bl	800bb24 <lv_mem_get_size>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d923      	bls.n	800a446 <lv_font_get_bitmap_fmt_txt+0x116>
            buf = lv_mem_realloc(buf, buf_size);
 800a3fe:	4b22      	ldr	r3, [pc, #136]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69f9      	ldr	r1, [r7, #28]
 800a404:	4618      	mov	r0, r3
 800a406:	f001 fb41 	bl	800ba8c <lv_mem_realloc>
 800a40a:	4602      	mov	r2, r0
 800a40c:	4b1e      	ldr	r3, [pc, #120]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a40e:	601a      	str	r2, [r3, #0]
            LV_ASSERT_MEM(buf);
 800a410:	4b1d      	ldr	r3, [pc, #116]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	f7fe fa1d 	bl	8008854 <lv_debug_check_null>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f083 0301 	eor.w	r3, r3, #1
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d009      	beq.n	800a43a <lv_font_get_bitmap_fmt_txt+0x10a>
 800a426:	4b18      	ldr	r3, [pc, #96]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a42e:	461a      	mov	r2, r3
 800a430:	4623      	mov	r3, r4
 800a432:	4816      	ldr	r0, [pc, #88]	; (800a48c <lv_font_get_bitmap_fmt_txt+0x15c>)
 800a434:	f7fe fa1e 	bl	8008874 <lv_debug_log_error>
 800a438:	e7fe      	b.n	800a438 <lv_font_get_bitmap_fmt_txt+0x108>
            if(buf == NULL) return NULL;
 800a43a:	4b13      	ldr	r3, [pc, #76]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <lv_font_get_bitmap_fmt_txt+0x116>
 800a442:	2300      	movs	r3, #0
 800a444:	e01b      	b.n	800a47e <lv_font_get_bitmap_fmt_txt+0x14e>
        }

        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], buf, gdsc->box_w , gdsc->box_h, (uint8_t)fdsc->bpp);
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	6812      	ldr	r2, [r2, #0]
 800a44e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a452:	1898      	adds	r0, r3, r2
 800a454:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a456:	6819      	ldr	r1, [r3, #0]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	791b      	ldrb	r3, [r3, #4]
 800a45c:	b21a      	sxth	r2, r3
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	795b      	ldrb	r3, [r3, #5]
 800a462:	b21c      	sxth	r4, r3
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	7cdb      	ldrb	r3, [r3, #19]
 800a468:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	4623      	mov	r3, r4
 800a472:	f000 fa9b 	bl	800a9ac <decompress>
        return buf;
 800a476:	4b04      	ldr	r3, [pc, #16]	; (800a488 <lv_font_get_bitmap_fmt_txt+0x158>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	e000      	b.n	800a47e <lv_font_get_bitmap_fmt_txt+0x14e>
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3724      	adds	r7, #36	; 0x24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd90      	pop	{r4, r7, pc}
 800a486:	bf00      	nop
 800a488:	200010b4 	.word	0x200010b4
 800a48c:	0800c884 	.word	0x0800c884

0800a490 <lv_font_get_glyph_dsc_fmt_txt>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08c      	sub	sp, #48	; 0x30
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f85c 	bl	800a564 <get_glyph_dsc_id>
 800a4ac:	6278      	str	r0, [r7, #36]	; 0x24
    if(!gid) return false;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <lv_font_get_glyph_dsc_fmt_txt+0x28>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e050      	b.n	800a55a <lv_font_get_glyph_dsc_fmt_txt+0xca>

    int8_t kvalue = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(fdsc->kern_dsc) {
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00f      	beq.n	800a4e6 <lv_font_get_glyph_dsc_fmt_txt+0x56>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 f84b 	bl	800a564 <get_glyph_dsc_id>
 800a4ce:	6238      	str	r0, [r7, #32]
        if(gid_next) {
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d007      	beq.n	800a4e6 <lv_font_get_glyph_dsc_fmt_txt+0x56>
            kvalue = get_kern_value(font, gid, gid_next);
 800a4d6:	6a3a      	ldr	r2, [r7, #32]
 800a4d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 f972 	bl	800a7c4 <get_kern_value>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	4413      	add	r3, r2
 800a4f0:	61fb      	str	r3, [r7, #28]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800a4f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a4f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4f8:	8a12      	ldrh	r2, [r2, #16]
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	111b      	asrs	r3, r3, #4
 800a500:	61bb      	str	r3, [r7, #24]

    uint32_t adv_w = gdsc->adv_w + kv;
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	885b      	ldrh	r3, [r3, #2]
 800a506:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	461a      	mov	r2, r3
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	4413      	add	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	3308      	adds	r3, #8
 800a518:	091b      	lsrs	r3, r3, #4
 800a51a:	617b      	str	r3, [r7, #20]

    dsc_out->adv_w = adv_w;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	b29a      	uxth	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	795a      	ldrb	r2, [r3, #5]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	70da      	strb	r2, [r3, #3]
    dsc_out->box_w = gdsc->box_w;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	791a      	ldrb	r2, [r3, #4]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	709a      	strb	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	711a      	strb	r2, [r3, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	f993 2007 	ldrsb.w	r2, [r3, #7]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	715a      	strb	r2, [r3, #5]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	7cdb      	ldrb	r3, [r3, #19]
 800a54c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800a550:	b2db      	uxtb	r3, r3
 800a552:	461a      	mov	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	719a      	strb	r2, [r3, #6]

    return true;
 800a558:	2301      	movs	r3, #1
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3730      	adds	r7, #48	; 0x30
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b08f      	sub	sp, #60	; 0x3c
 800a568:	af02      	add	r7, sp, #8
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <get_glyph_dsc_id+0x14>
 800a574:	2300      	movs	r3, #0
 800a576:	e11e      	b.n	800a7b6 <get_glyph_dsc_id+0x252>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d102      	bne.n	800a58e <get_glyph_dsc_id+0x2a>
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	e113      	b.n	800a7b6 <get_glyph_dsc_id+0x252>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 800a58e:	2300      	movs	r3, #0
 800a590:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a592:	e0ff      	b.n	800a794 <get_glyph_dsc_id+0x230>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	6899      	ldr	r1, [r3, #8]
 800a598:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	60bb      	str	r3, [r7, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	6899      	ldr	r1, [r3, #8]
 800a5b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	889b      	ldrh	r3, [r3, #4]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d203      	bcs.n	800a5ce <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800a5c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a5cc:	e0e2      	b.n	800a794 <get_glyph_dsc_id+0x230>
        uint32_t glyph_id = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	6899      	ldr	r1, [r3, #8]
 800a5d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	7c9b      	ldrb	r3, [r3, #18]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10d      	bne.n	800a604 <get_glyph_dsc_id+0xa0>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	6899      	ldr	r1, [r3, #8]
 800a5ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	440b      	add	r3, r1
 800a5f8:	88db      	ldrh	r3, [r3, #6]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4413      	add	r3, r2
 800a600:	62bb      	str	r3, [r7, #40]	; 0x28
 800a602:	e0bf      	b.n	800a784 <get_glyph_dsc_id+0x220>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	6899      	ldr	r1, [r3, #8]
 800a608:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a60a:	4613      	mov	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4413      	add	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	440b      	add	r3, r1
 800a614:	7c9b      	ldrb	r3, [r3, #18]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d11a      	bne.n	800a650 <get_glyph_dsc_id+0xec>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	6899      	ldr	r1, [r3, #8]
 800a61e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	60fb      	str	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a630:	6899      	ldr	r1, [r3, #8]
 800a632:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	440b      	add	r3, r1
 800a63e:	88db      	ldrh	r3, [r3, #6]
 800a640:	4619      	mov	r1, r3
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	440b      	add	r3, r1
 800a64c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a64e:	e099      	b.n	800a784 <get_glyph_dsc_id+0x220>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	6899      	ldr	r1, [r3, #8]
 800a654:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	7c9b      	ldrb	r3, [r3, #18]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d13b      	bne.n	800a6de <get_glyph_dsc_id+0x17a>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	6899      	ldr	r1, [r3, #8]
 800a66a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	440b      	add	r3, r1
 800a676:	689c      	ldr	r4, [r3, #8]
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	6899      	ldr	r1, [r3, #8]
 800a67c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	440b      	add	r3, r1
 800a688:	8a1b      	ldrh	r3, [r3, #16]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f107 0008 	add.w	r0, r7, #8
 800a690:	4b4b      	ldr	r3, [pc, #300]	; (800a7c0 <get_glyph_dsc_id+0x25c>)
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2302      	movs	r3, #2
 800a696:	4621      	mov	r1, r4
 800a698:	f001 fc5e 	bl	800bf58 <lv_utils_bsearch>
 800a69c:	6178      	str	r0, [r7, #20]

            if(p) {
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d06f      	beq.n	800a784 <get_glyph_dsc_id+0x220>
                lv_uintptr_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800a6a4:	6979      	ldr	r1, [r7, #20]
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	6898      	ldr	r0, [r3, #8]
 800a6aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4403      	add	r3, r0
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	1acb      	subs	r3, r1, r3
 800a6ba:	613b      	str	r3, [r7, #16]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	085b      	lsrs	r3, r3, #1
 800a6c0:	613b      	str	r3, [r7, #16]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	6899      	ldr	r1, [r3, #8]
 800a6c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	88db      	ldrh	r3, [r3, #6]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	4413      	add	r3, r2
 800a6da:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6dc:	e052      	b.n	800a784 <get_glyph_dsc_id+0x220>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	6899      	ldr	r1, [r3, #8]
 800a6e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	440b      	add	r3, r1
 800a6ee:	7c9b      	ldrb	r3, [r3, #18]
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d147      	bne.n	800a784 <get_glyph_dsc_id+0x220>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	6899      	ldr	r1, [r3, #8]
 800a6f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	689c      	ldr	r4, [r3, #8]
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	6899      	ldr	r1, [r3, #8]
 800a70a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	8a1b      	ldrh	r3, [r3, #16]
 800a718:	461a      	mov	r2, r3
 800a71a:	f107 0008 	add.w	r0, r7, #8
 800a71e:	4b28      	ldr	r3, [pc, #160]	; (800a7c0 <get_glyph_dsc_id+0x25c>)
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	2302      	movs	r3, #2
 800a724:	4621      	mov	r1, r4
 800a726:	f001 fc17 	bl	800bf58 <lv_utils_bsearch>
 800a72a:	6238      	str	r0, [r7, #32]

            if(p) {
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d028      	beq.n	800a784 <get_glyph_dsc_id+0x220>
                lv_uintptr_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800a732:	6a39      	ldr	r1, [r7, #32]
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	6898      	ldr	r0, [r3, #8]
 800a738:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4403      	add	r3, r0
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	1acb      	subs	r3, r1, r3
 800a748:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	085b      	lsrs	r3, r3, #1
 800a74e:	61fb      	str	r3, [r7, #28]
                const uint8_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	6899      	ldr	r1, [r3, #8]
 800a754:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	440b      	add	r3, r1
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	61bb      	str	r3, [r7, #24]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	6899      	ldr	r1, [r3, #8]
 800a768:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a76a:	4613      	mov	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	440b      	add	r3, r1
 800a774:	88db      	ldrh	r3, [r3, #6]
 800a776:	4619      	mov	r1, r3
 800a778:	69ba      	ldr	r2, [r7, #24]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	440b      	add	r3, r1
 800a782:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a78e:	619a      	str	r2, [r3, #24]
        return glyph_id;
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	e010      	b.n	800a7b6 <get_glyph_dsc_id+0x252>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	8a5b      	ldrh	r3, [r3, #18]
 800a798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	461a      	mov	r2, r3
 800a7a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	f4ff aef6 	bcc.w	800a594 <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	619a      	str	r2, [r3, #24]
    return 0;
 800a7b4:	2300      	movs	r3, #0

}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3734      	adds	r7, #52	; 0x34
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd90      	pop	{r4, r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	0800ae9d 	.word	0x0800ae9d

0800a7c4 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b094      	sub	sp, #80	; 0x50
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7de:	7cdb      	ldrb	r3, [r3, #19]
 800a7e0:	f003 0320 	and.w	r3, r3, #32
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d164      	bne.n	800a8b4 <get_kern_value+0xf0>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 800a7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f2:	7adb      	ldrb	r3, [r3, #11]
 800a7f4:	f003 0303 	and.w	r3, r3, #3
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d12b      	bne.n	800a856 <get_kern_value+0x92>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	b29b      	uxth	r3, r3
 800a808:	021b      	lsls	r3, r3, #8
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	4413      	add	r3, r2
 800a812:	b29b      	uxth	r3, r3
 800a814:	837b      	strh	r3, [r7, #26]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800a81e:	461a      	mov	r2, r3
 800a820:	f107 001a 	add.w	r0, r7, #26
 800a824:	4b3b      	ldr	r3, [pc, #236]	; (800a914 <get_kern_value+0x150>)
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2302      	movs	r3, #2
 800a82a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a82c:	f001 fb94 	bl	800bf58 <lv_utils_bsearch>
 800a830:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d067      	beq.n	800a908 <get_kern_value+0x144>
                lv_uintptr_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800a838:	6a3a      	ldr	r2, [r7, #32]
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	085b      	lsrs	r3, r3, #1
 800a844:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 800a846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	4413      	add	r3, r2
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a854:	e058      	b.n	800a908 <get_kern_value+0x144>
            }
        } else if(kdsc->glyph_ids_size == 1) {
 800a856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a858:	7adb      	ldrb	r3, [r3, #11]
 800a85a:	f003 0303 	and.w	r3, r3, #3
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b01      	cmp	r3, #1
 800a862:	d151      	bne.n	800a908 <get_kern_value+0x144>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 800a864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	633b      	str	r3, [r7, #48]	; 0x30
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	021a      	lsls	r2, r3, #8
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	4413      	add	r3, r2
 800a872:	617b      	str	r3, [r7, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800a87c:	461a      	mov	r2, r3
 800a87e:	f107 0014 	add.w	r0, r7, #20
 800a882:	4b25      	ldr	r3, [pc, #148]	; (800a918 <get_kern_value+0x154>)
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	2304      	movs	r3, #4
 800a888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a88a:	f001 fb65 	bl	800bf58 <lv_utils_bsearch>
 800a88e:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d038      	beq.n	800a908 <get_kern_value+0x144>
                lv_uintptr_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800a896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	62bb      	str	r3, [r7, #40]	; 0x28
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	091b      	lsrs	r3, r3, #4
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	4413      	add	r3, r2
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a8b2:	e029      	b.n	800a908 <get_kern_value+0x144>
        } else {
            /*Invalid value*/
        }
    } else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 800a8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800a8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800a8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 800a8d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d014      	beq.n	800a908 <get_kern_value+0x144>
 800a8de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d010      	beq.n	800a908 <get_kern_value+0x144>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800a8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800a8ee:	3a01      	subs	r2, #1
 800a8f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8f2:	7b49      	ldrb	r1, [r1, #13]
 800a8f4:	fb01 f102 	mul.w	r1, r1, r2
 800a8f8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800a8fc:	3a01      	subs	r2, #1
 800a8fe:	440a      	add	r2, r1
 800a900:	4413      	add	r3, r2
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 800a908:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3748      	adds	r7, #72	; 0x48
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	0800a91d 	.word	0x0800a91d
 800a918:	0800a965 	.word	0x0800a965

0800a91c <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	781a      	ldrb	r2, [r3, #0]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d006      	beq.n	800a948 <kern_pair_8_compare+0x2c>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	e007      	b.n	800a958 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3301      	adds	r3, #1
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	3301      	adds	r3, #1
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	1ad3      	subs	r3, r2, r3

}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	881a      	ldrh	r2, [r3, #0]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d006      	beq.n	800a990 <kern_pair_16_compare+0x2c>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	e007      	b.n	800a9a0 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3302      	adds	r3, #2
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	3302      	adds	r3, #2
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	1ad3      	subs	r3, r2, r3
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <decompress>:
 * @param out buffer to store the result
 * @param px_num number of pixels in the glyph (width * height)
 * @param bpp bit per pixel (bpp = 3 will be converted to bpp = 4)
 */
static void decompress(const uint8_t * in, uint8_t * out, lv_coord_t w, lv_coord_t h, uint8_t bpp)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	80fb      	strh	r3, [r7, #6]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	80bb      	strh	r3, [r7, #4]
    uint32_t wrp = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t wr_size = bpp;
 800a9c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a9ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(bpp == 3) wr_size = 4;
 800a9ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d102      	bne.n	800a9dc <decompress+0x30>
 800a9d6:	2304      	movs	r3, #4
 800a9d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    rle_init(in, bpp);
 800a9dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 f954 	bl	800ac90 <rle_init>

    uint8_t * line_buf = lv_draw_get_buf(w * 2);
 800a9e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fad2 	bl	8008f98 <lv_draw_get_buf>
 800a9f4:	61b8      	str	r0, [r7, #24]
    uint8_t * line_buf1 = line_buf;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	617b      	str	r3, [r7, #20]
    uint8_t * line_buf2 = line_buf + w;
 800a9fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	4413      	add	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]

    decompress_line(line_buf1, w);
 800aa04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6978      	ldr	r0, [r7, #20]
 800aa0c:	f000 f868 	bl	800aae0 <decompress_line>

    lv_coord_t y;
    lv_coord_t x;
    for(x = 0; x < w; x++) {
 800aa10:	2300      	movs	r3, #0
 800aa12:	83fb      	strh	r3, [r7, #30]
 800aa14:	e015      	b.n	800aa42 <decompress+0x96>
        bits_write(out,wrp, line_buf1[x], bpp);
 800aa16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800aa24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa26:	68b8      	ldr	r0, [r7, #8]
 800aa28:	f000 f8b6 	bl	800ab98 <bits_write>
        wrp += wr_size;
 800aa2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa32:	4413      	add	r3, r2
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
    for(x = 0; x < w; x++) {
 800aa36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	83fb      	strh	r3, [r7, #30]
 800aa42:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800aa46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	dbe3      	blt.n	800aa16 <decompress+0x6a>
    }

    for(y = 1; y < h; y++) {
 800aa4e:	2301      	movs	r3, #1
 800aa50:	843b      	strh	r3, [r7, #32]
 800aa52:	e03b      	b.n	800aacc <decompress+0x120>
        decompress_line(line_buf2, w);
 800aa54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6938      	ldr	r0, [r7, #16]
 800aa5c:	f000 f840 	bl	800aae0 <decompress_line>

        for(x = 0; x < w; x++) {
 800aa60:	2300      	movs	r3, #0
 800aa62:	83fb      	strh	r3, [r7, #30]
 800aa64:	e026      	b.n	800aab4 <decompress+0x108>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800aa66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aa6a:	693a      	ldr	r2, [r7, #16]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	7819      	ldrb	r1, [r3, #0]
 800aa70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	4413      	add	r3, r2
 800aa78:	781a      	ldrb	r2, [r3, #0]
 800aa7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	4403      	add	r3, r0
 800aa82:	404a      	eors	r2, r1
 800aa84:	b2d2      	uxtb	r2, r2
 800aa86:	701a      	strb	r2, [r3, #0]
            bits_write(out,wrp, line_buf1[x], bpp);
 800aa88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4413      	add	r3, r2
 800aa90:	781a      	ldrb	r2, [r3, #0]
 800aa92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800aa96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa98:	68b8      	ldr	r0, [r7, #8]
 800aa9a:	f000 f87d 	bl	800ab98 <bits_write>
            wrp += wr_size;
 800aa9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa4:	4413      	add	r3, r2
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
        for(x = 0; x < w; x++) {
 800aaa8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	3301      	adds	r3, #1
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	83fb      	strh	r3, [r7, #30]
 800aab4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800aab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	dbd2      	blt.n	800aa66 <decompress+0xba>
    for(y = 1; y < h; y++) {
 800aac0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	3301      	adds	r3, #1
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	843b      	strh	r3, [r7, #32]
 800aacc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aad0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	dbbd      	blt.n	800aa54 <decompress+0xa8>
        }
    }
}
 800aad8:	bf00      	nop
 800aada:	3728      	adds	r7, #40	; 0x28
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <decompress_line>:
 * Decompress one line. Store one pixel per byte
 * @param out output buffer
 * @param w width of the line in pixel count
 */
static void decompress_line(uint8_t * out, lv_coord_t w)
{
 800aae0:	b590      	push	{r4, r7, lr}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	807b      	strh	r3, [r7, #2]
    lv_coord_t i;
    for(i = 0; i < w; i++) {
 800aaec:	2300      	movs	r3, #0
 800aaee:	81fb      	strh	r3, [r7, #14]
 800aaf0:	e00d      	b.n	800ab0e <decompress_line+0x2e>
        out[i] = rle_next();
 800aaf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	18d4      	adds	r4, r2, r3
 800aafa:	f000 f8f3 	bl	800ace4 <rle_next>
 800aafe:	4603      	mov	r3, r0
 800ab00:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < w; i++) {
 800ab02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	3301      	adds	r3, #1
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	81fb      	strh	r3, [r7, #14]
 800ab0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ab12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	dbeb      	blt.n	800aaf2 <decompress_line+0x12>
    }
}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd90      	pop	{r4, r7, pc}

0800ab22 <get_bits>:
 * @param bit_pos index of teh first bit to read.
 * @param len number of bits to read (must be <= 8).
 * @return the read bits
 */
static uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b089      	sub	sp, #36	; 0x24
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	77fb      	strb	r3, [r7, #31]
    uint32_t byte_pos = bit_pos >> 3;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	08db      	lsrs	r3, r3, #3
 800ab38:	61bb      	str	r3, [r7, #24]
    bit_pos = bit_pos & 0x7;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f003 0307 	and.w	r3, r3, #7
 800ab40:	60bb      	str	r3, [r7, #8]
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800ab42:	79fb      	ldrb	r3, [r7, #7]
 800ab44:	2201      	movs	r2, #1
 800ab46:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	75fb      	strb	r3, [r7, #23]
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	4413      	add	r3, r2
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	021b      	lsls	r3, r3, #8
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	3301      	adds	r3, #1
 800ab62:	68f9      	ldr	r1, [r7, #12]
 800ab64:	440b      	add	r3, r1
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	4413      	add	r3, r2
 800ab6c:	82bb      	strh	r3, [r7, #20]

    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
 800ab6e:	8aba      	ldrh	r2, [r7, #20]
 800ab70:	79fb      	ldrb	r3, [r7, #7]
 800ab72:	4259      	negs	r1, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	1acb      	subs	r3, r1, r3
 800ab78:	3310      	adds	r3, #16
 800ab7a:	fa42 f303 	asr.w	r3, r2, r3
 800ab7e:	b25a      	sxtb	r2, r3
 800ab80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab84:	4013      	ands	r3, r2
 800ab86:	b25b      	sxtb	r3, r3
 800ab88:	77fb      	strb	r3, [r7, #31]
    return res;
 800ab8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3724      	adds	r7, #36	; 0x24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <bits_write>:
 * @param val value to write
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	4611      	mov	r1, r2
 800aba4:	461a      	mov	r2, r3
 800aba6:	460b      	mov	r3, r1
 800aba8:	71fb      	strb	r3, [r7, #7]
 800abaa:	4613      	mov	r3, r2
 800abac:	71bb      	strb	r3, [r7, #6]
    if(len == 3) {
 800abae:	79bb      	ldrb	r3, [r7, #6]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d12f      	bne.n	800ac14 <bits_write+0x7c>
        len = 4;
 800abb4:	2304      	movs	r3, #4
 800abb6:	71bb      	strb	r3, [r7, #6]
        switch(val) {
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	2b07      	cmp	r3, #7
 800abbc:	d82a      	bhi.n	800ac14 <bits_write+0x7c>
 800abbe:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <bits_write+0x2c>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800abe5 	.word	0x0800abe5
 800abc8:	0800abeb 	.word	0x0800abeb
 800abcc:	0800abf1 	.word	0x0800abf1
 800abd0:	0800abf7 	.word	0x0800abf7
 800abd4:	0800abfd 	.word	0x0800abfd
 800abd8:	0800ac03 	.word	0x0800ac03
 800abdc:	0800ac09 	.word	0x0800ac09
 800abe0:	0800ac0f 	.word	0x0800ac0f
        case 0: val = 0; break;
 800abe4:	2300      	movs	r3, #0
 800abe6:	71fb      	strb	r3, [r7, #7]
 800abe8:	e014      	b.n	800ac14 <bits_write+0x7c>
        case 1: val = 2; break;
 800abea:	2302      	movs	r3, #2
 800abec:	71fb      	strb	r3, [r7, #7]
 800abee:	e011      	b.n	800ac14 <bits_write+0x7c>
        case 2: val = 4; break;
 800abf0:	2304      	movs	r3, #4
 800abf2:	71fb      	strb	r3, [r7, #7]
 800abf4:	e00e      	b.n	800ac14 <bits_write+0x7c>
        case 3: val = 6; break;
 800abf6:	2306      	movs	r3, #6
 800abf8:	71fb      	strb	r3, [r7, #7]
 800abfa:	e00b      	b.n	800ac14 <bits_write+0x7c>
        case 4: val = 9; break;
 800abfc:	2309      	movs	r3, #9
 800abfe:	71fb      	strb	r3, [r7, #7]
 800ac00:	e008      	b.n	800ac14 <bits_write+0x7c>
        case 5: val = 11; break;
 800ac02:	230b      	movs	r3, #11
 800ac04:	71fb      	strb	r3, [r7, #7]
 800ac06:	e005      	b.n	800ac14 <bits_write+0x7c>
        case 6: val = 13; break;
 800ac08:	230d      	movs	r3, #13
 800ac0a:	71fb      	strb	r3, [r7, #7]
 800ac0c:	e002      	b.n	800ac14 <bits_write+0x7c>
        case 7: val = 15; break;
 800ac0e:	230f      	movs	r3, #15
 800ac10:	71fb      	strb	r3, [r7, #7]
 800ac12:	bf00      	nop
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	08db      	lsrs	r3, r3, #3
 800ac18:	82fb      	strh	r3, [r7, #22]
    bit_pos = bit_pos & 0x7;
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f003 0307 	and.w	r3, r3, #7
 800ac20:	60bb      	str	r3, [r7, #8]
    bit_pos = 8 - bit_pos - len;
 800ac22:	79bb      	ldrb	r3, [r7, #6]
 800ac24:	425a      	negs	r2, r3
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	60bb      	str	r3, [r7, #8]

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800ac2e:	79bb      	ldrb	r3, [r7, #6]
 800ac30:	2201      	movs	r2, #1
 800ac32:	fa02 f303 	lsl.w	r3, r2, r3
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	757b      	strb	r3, [r7, #21]
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800ac3c:	8afb      	ldrh	r3, [r7, #22]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	b25a      	sxtb	r2, r3
 800ac46:	7d7b      	ldrb	r3, [r7, #21]
 800ac48:	43d9      	mvns	r1, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac50:	b25b      	sxtb	r3, r3
 800ac52:	4013      	ands	r3, r2
 800ac54:	b259      	sxtb	r1, r3
 800ac56:	8afb      	ldrh	r3, [r7, #22]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	b2ca      	uxtb	r2, r1
 800ac5e:	701a      	strb	r2, [r3, #0]
    out[byte_pos] |= (val << bit_pos);
 800ac60:	8afb      	ldrh	r3, [r7, #22]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	4413      	add	r3, r2
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	b25a      	sxtb	r2, r3
 800ac6a:	79f9      	ldrb	r1, [r7, #7]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac72:	b25b      	sxtb	r3, r3
 800ac74:	4313      	orrs	r3, r2
 800ac76:	b259      	sxtb	r1, r3
 800ac78:	8afb      	ldrh	r3, [r7, #22]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	b2ca      	uxtb	r2, r1
 800ac80:	701a      	strb	r2, [r3, #0]
}
 800ac82:	bf00      	nop
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop

0800ac90 <rle_init>:

static void rle_init(const uint8_t * in,  uint8_t bpp)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
    rle_in = in;
 800ac9c:	4a0b      	ldr	r2, [pc, #44]	; (800accc <rle_init+0x3c>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6013      	str	r3, [r2, #0]
    rle_bpp = bpp;
 800aca2:	4a0b      	ldr	r2, [pc, #44]	; (800acd0 <rle_init+0x40>)
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
 800aca8:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <rle_init+0x44>)
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
    rle_rdp = 0;
 800acae:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <rle_init+0x48>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]
    rle_prev_v = 0;
 800acb4:	4b09      	ldr	r3, [pc, #36]	; (800acdc <rle_init+0x4c>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]
    rle_cnt = 0;
 800acba:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <rle_init+0x50>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	701a      	strb	r2, [r3, #0]
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	200010ac 	.word	0x200010ac
 800acd0:	200010b0 	.word	0x200010b0
 800acd4:	200010b3 	.word	0x200010b3
 800acd8:	200010a8 	.word	0x200010a8
 800acdc:	200010b1 	.word	0x200010b1
 800ace0:	200010b2 	.word	0x200010b2

0800ace4 <rle_next>:

static uint8_t rle_next(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
    uint8_t v = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	71bb      	strb	r3, [r7, #6]
    uint8_t ret = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	71fb      	strb	r3, [r7, #7]

    if(rle_state == RLE_STATE_SINGLE) {
 800acf2:	4b64      	ldr	r3, [pc, #400]	; (800ae84 <rle_next+0x1a0>)
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d125      	bne.n	800ad46 <rle_next+0x62>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800acfa:	4b63      	ldr	r3, [pc, #396]	; (800ae88 <rle_next+0x1a4>)
 800acfc:	6818      	ldr	r0, [r3, #0]
 800acfe:	4b63      	ldr	r3, [pc, #396]	; (800ae8c <rle_next+0x1a8>)
 800ad00:	6819      	ldr	r1, [r3, #0]
 800ad02:	4b63      	ldr	r3, [pc, #396]	; (800ae90 <rle_next+0x1ac>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	f7ff ff0b 	bl	800ab22 <get_bits>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	71fb      	strb	r3, [r7, #7]
        if(rle_rdp != 0 && rle_prev_v == ret) {
 800ad10:	4b5e      	ldr	r3, [pc, #376]	; (800ae8c <rle_next+0x1a8>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00a      	beq.n	800ad2e <rle_next+0x4a>
 800ad18:	4b5e      	ldr	r3, [pc, #376]	; (800ae94 <rle_next+0x1b0>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	79fa      	ldrb	r2, [r7, #7]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d105      	bne.n	800ad2e <rle_next+0x4a>
            rle_cnt = 0;
 800ad22:	4b5d      	ldr	r3, [pc, #372]	; (800ae98 <rle_next+0x1b4>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
            rle_state = RLE_STATE_REPEATE;
 800ad28:	4b56      	ldr	r3, [pc, #344]	; (800ae84 <rle_next+0x1a0>)
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	701a      	strb	r2, [r3, #0]
        }

        rle_prev_v = ret;
 800ad2e:	4a59      	ldr	r2, [pc, #356]	; (800ae94 <rle_next+0x1b0>)
 800ad30:	79fb      	ldrb	r3, [r7, #7]
 800ad32:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
 800ad34:	4b56      	ldr	r3, [pc, #344]	; (800ae90 <rle_next+0x1ac>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4b54      	ldr	r3, [pc, #336]	; (800ae8c <rle_next+0x1a8>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4413      	add	r3, r2
 800ad40:	4a52      	ldr	r2, [pc, #328]	; (800ae8c <rle_next+0x1a8>)
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	e099      	b.n	800ae7a <rle_next+0x196>
    }
    else if(rle_state == RLE_STATE_REPEATE) {
 800ad46:	4b4f      	ldr	r3, [pc, #316]	; (800ae84 <rle_next+0x1a0>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d16b      	bne.n	800ae26 <rle_next+0x142>
        v = get_bits(rle_in, rle_rdp, 1);
 800ad4e:	4b4e      	ldr	r3, [pc, #312]	; (800ae88 <rle_next+0x1a4>)
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	4b4e      	ldr	r3, [pc, #312]	; (800ae8c <rle_next+0x1a8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2201      	movs	r2, #1
 800ad58:	4619      	mov	r1, r3
 800ad5a:	f7ff fee2 	bl	800ab22 <get_bits>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71bb      	strb	r3, [r7, #6]
        rle_cnt++;
 800ad62:	4b4d      	ldr	r3, [pc, #308]	; (800ae98 <rle_next+0x1b4>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	3301      	adds	r3, #1
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	4b4b      	ldr	r3, [pc, #300]	; (800ae98 <rle_next+0x1b4>)
 800ad6c:	701a      	strb	r2, [r3, #0]
        rle_rdp += 1;
 800ad6e:	4b47      	ldr	r3, [pc, #284]	; (800ae8c <rle_next+0x1a8>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	4a45      	ldr	r2, [pc, #276]	; (800ae8c <rle_next+0x1a8>)
 800ad76:	6013      	str	r3, [r2, #0]
        if(v == 1) {
 800ad78:	79bb      	ldrb	r3, [r7, #6]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d139      	bne.n	800adf2 <rle_next+0x10e>
            ret = rle_prev_v;
 800ad7e:	4b45      	ldr	r3, [pc, #276]	; (800ae94 <rle_next+0x1b0>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
            if(rle_cnt == 11) {
 800ad84:	4b44      	ldr	r3, [pc, #272]	; (800ae98 <rle_next+0x1b4>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b0b      	cmp	r3, #11
 800ad8a:	d176      	bne.n	800ae7a <rle_next+0x196>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 800ad8c:	4b3e      	ldr	r3, [pc, #248]	; (800ae88 <rle_next+0x1a4>)
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	4b3e      	ldr	r3, [pc, #248]	; (800ae8c <rle_next+0x1a8>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2206      	movs	r2, #6
 800ad96:	4619      	mov	r1, r3
 800ad98:	f7ff fec3 	bl	800ab22 <get_bits>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	461a      	mov	r2, r3
 800ada0:	4b3d      	ldr	r3, [pc, #244]	; (800ae98 <rle_next+0x1b4>)
 800ada2:	701a      	strb	r2, [r3, #0]
                rle_rdp += 6;
 800ada4:	4b39      	ldr	r3, [pc, #228]	; (800ae8c <rle_next+0x1a8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3306      	adds	r3, #6
 800adaa:	4a38      	ldr	r2, [pc, #224]	; (800ae8c <rle_next+0x1a8>)
 800adac:	6013      	str	r3, [r2, #0]
                if(rle_cnt != 0) {
 800adae:	4b3a      	ldr	r3, [pc, #232]	; (800ae98 <rle_next+0x1b4>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <rle_next+0xda>
                    rle_state = RLE_STATE_COUNTER;
 800adb6:	4b33      	ldr	r3, [pc, #204]	; (800ae84 <rle_next+0x1a0>)
 800adb8:	2202      	movs	r2, #2
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	e05d      	b.n	800ae7a <rle_next+0x196>
                } else {
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800adbe:	4b32      	ldr	r3, [pc, #200]	; (800ae88 <rle_next+0x1a4>)
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	4b32      	ldr	r3, [pc, #200]	; (800ae8c <rle_next+0x1a8>)
 800adc4:	6819      	ldr	r1, [r3, #0]
 800adc6:	4b32      	ldr	r3, [pc, #200]	; (800ae90 <rle_next+0x1ac>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	f7ff fea9 	bl	800ab22 <get_bits>
 800add0:	4603      	mov	r3, r0
 800add2:	71fb      	strb	r3, [r7, #7]
                    rle_prev_v = ret;
 800add4:	4a2f      	ldr	r2, [pc, #188]	; (800ae94 <rle_next+0x1b0>)
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	7013      	strb	r3, [r2, #0]
                    rle_rdp += rle_bpp;
 800adda:	4b2d      	ldr	r3, [pc, #180]	; (800ae90 <rle_next+0x1ac>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	4b2a      	ldr	r3, [pc, #168]	; (800ae8c <rle_next+0x1a8>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4413      	add	r3, r2
 800ade6:	4a29      	ldr	r2, [pc, #164]	; (800ae8c <rle_next+0x1a8>)
 800ade8:	6013      	str	r3, [r2, #0]
                    rle_state = RLE_STATE_SINGLE;
 800adea:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <rle_next+0x1a0>)
 800adec:	2200      	movs	r2, #0
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	e043      	b.n	800ae7a <rle_next+0x196>
                }
            }
        } else {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800adf2:	4b25      	ldr	r3, [pc, #148]	; (800ae88 <rle_next+0x1a4>)
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	4b25      	ldr	r3, [pc, #148]	; (800ae8c <rle_next+0x1a8>)
 800adf8:	6819      	ldr	r1, [r3, #0]
 800adfa:	4b25      	ldr	r3, [pc, #148]	; (800ae90 <rle_next+0x1ac>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7ff fe8f 	bl	800ab22 <get_bits>
 800ae04:	4603      	mov	r3, r0
 800ae06:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 800ae08:	4a22      	ldr	r2, [pc, #136]	; (800ae94 <rle_next+0x1b0>)
 800ae0a:	79fb      	ldrb	r3, [r7, #7]
 800ae0c:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 800ae0e:	4b20      	ldr	r3, [pc, #128]	; (800ae90 <rle_next+0x1ac>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	4b1d      	ldr	r3, [pc, #116]	; (800ae8c <rle_next+0x1a8>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4413      	add	r3, r2
 800ae1a:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <rle_next+0x1a8>)
 800ae1c:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 800ae1e:	4b19      	ldr	r3, [pc, #100]	; (800ae84 <rle_next+0x1a0>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
 800ae24:	e029      	b.n	800ae7a <rle_next+0x196>
        }


    }
    else if(rle_state == RLE_STATE_COUNTER) {
 800ae26:	4b17      	ldr	r3, [pc, #92]	; (800ae84 <rle_next+0x1a0>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d125      	bne.n	800ae7a <rle_next+0x196>
        ret = rle_prev_v;
 800ae2e:	4b19      	ldr	r3, [pc, #100]	; (800ae94 <rle_next+0x1b0>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	71fb      	strb	r3, [r7, #7]
        rle_cnt--;
 800ae34:	4b18      	ldr	r3, [pc, #96]	; (800ae98 <rle_next+0x1b4>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	4b16      	ldr	r3, [pc, #88]	; (800ae98 <rle_next+0x1b4>)
 800ae3e:	701a      	strb	r2, [r3, #0]
        if(rle_cnt == 0) {
 800ae40:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <rle_next+0x1b4>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d118      	bne.n	800ae7a <rle_next+0x196>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800ae48:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <rle_next+0x1a4>)
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <rle_next+0x1a8>)
 800ae4e:	6819      	ldr	r1, [r3, #0]
 800ae50:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <rle_next+0x1ac>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	f7ff fe64 	bl	800ab22 <get_bits>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 800ae5e:	4a0d      	ldr	r2, [pc, #52]	; (800ae94 <rle_next+0x1b0>)
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <rle_next+0x1ac>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4b08      	ldr	r3, [pc, #32]	; (800ae8c <rle_next+0x1a8>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4413      	add	r3, r2
 800ae70:	4a06      	ldr	r2, [pc, #24]	; (800ae8c <rle_next+0x1a8>)
 800ae72:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 800ae74:	4b03      	ldr	r3, [pc, #12]	; (800ae84 <rle_next+0x1a0>)
 800ae76:	2200      	movs	r2, #0
 800ae78:	701a      	strb	r2, [r3, #0]
        }
    }

    return ret;
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	200010b3 	.word	0x200010b3
 800ae88:	200010ac 	.word	0x200010ac
 800ae8c:	200010a8 	.word	0x200010a8
 800ae90:	200010b0 	.word	0x200010b0
 800ae94:	200010b1 	.word	0x200010b1
 800ae98:	200010b2 	.word	0x200010b2

0800ae9c <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	1ad3      	subs	r3, r2, r3
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
 800aeca:	603b      	str	r3, [r7, #0]
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800aecc:	221c      	movs	r2, #28
 800aece:	2100      	movs	r1, #0
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f001 fbd4 	bl	800c67e <memset>

    disp_buf->buf1    = buf1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	60da      	str	r2, [r3, #12]
}
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d104      	bne.n	800af10 <lv_indev_get_next+0x18>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800af06:	4807      	ldr	r0, [pc, #28]	; (800af24 <lv_indev_get_next+0x2c>)
 800af08:	f000 fc3d 	bl	800b786 <lv_ll_get_head>
 800af0c:	4603      	mov	r3, r0
 800af0e:	e004      	b.n	800af1a <lv_indev_get_next+0x22>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4804      	ldr	r0, [pc, #16]	; (800af24 <lv_indev_get_next+0x2c>)
 800af14:	f000 fc5d 	bl	800b7d2 <lv_ll_get_next>
 800af18:	4603      	mov	r3, r0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	200096bc 	.word	0x200096bc

0800af28 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800af2e:	4b09      	ldr	r3, [pc, #36]	; (800af54 <lv_tick_get+0x2c>)
 800af30:	2201      	movs	r2, #1
 800af32:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 800af34:	4b08      	ldr	r3, [pc, #32]	; (800af58 <lv_tick_get+0x30>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800af3a:	4b06      	ldr	r3, [pc, #24]	; (800af54 <lv_tick_get+0x2c>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0f4      	beq.n	800af2e <lv_tick_get+0x6>
                                Continue until make a non interrupted cycle */

    return result;
 800af44:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800af46:	4618      	mov	r0, r3
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	200010bc 	.word	0x200010bc
 800af58:	200010b8 	.word	0x200010b8

0800af5c <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 800af64:	f7ff ffe0 	bl	800af28 <lv_tick_get>
 800af68:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d304      	bcc.n	800af7c <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	607b      	str	r3, [r7, #4]
 800af7a:	e006      	b.n	800af8a <lv_tick_elaps+0x2e>
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	425b      	negs	r3, r3
 800af80:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 800af8a:	687b      	ldr	r3, [r7, #4]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <lv_anim_core_init>:

/**
 * Init. the animation module
 */
void lv_anim_core_init(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800af98:	2124      	movs	r1, #36	; 0x24
 800af9a:	4808      	ldr	r0, [pc, #32]	; (800afbc <lv_anim_core_init+0x28>)
 800af9c:	f000 fac6 	bl	800b52c <lv_ll_init>
    last_task_run = lv_tick_get();
 800afa0:	f7ff ffc2 	bl	800af28 <lv_tick_get>
 800afa4:	4602      	mov	r2, r0
 800afa6:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <lv_anim_core_init+0x2c>)
 800afa8:	601a      	str	r2, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800afaa:	2300      	movs	r3, #0
 800afac:	2203      	movs	r2, #3
 800afae:	211e      	movs	r1, #30
 800afb0:	4804      	ldr	r0, [pc, #16]	; (800afc4 <lv_anim_core_init+0x30>)
 800afb2:	f000 ff21 	bl	800bdf8 <lv_task_create>
}
 800afb6:	bf00      	nop
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	200096f8 	.word	0x200096f8
 800afc0:	200010c0 	.word	0x200010c0
 800afc4:	0800afc9 	.word	0x0800afc9

0800afc8 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800afd0:	4842      	ldr	r0, [pc, #264]	; (800b0dc <anim_task+0x114>)
 800afd2:	f000 fbd8 	bl	800b786 <lv_ll_get_head>
 800afd6:	6178      	str	r0, [r7, #20]
 800afd8:	e00b      	b.n	800aff2 <anim_task+0x2a>
    {
        a->has_run = 0;
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	f892 3020 	ldrb.w	r3, [r2, #32]
 800afe0:	f36f 03c3 	bfc	r3, #3, #1
 800afe4:	f882 3020 	strb.w	r3, [r2, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800afe8:	6979      	ldr	r1, [r7, #20]
 800afea:	483c      	ldr	r0, [pc, #240]	; (800b0dc <anim_task+0x114>)
 800afec:	f000 fbf1 	bl	800b7d2 <lv_ll_get_next>
 800aff0:	6178      	str	r0, [r7, #20]
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1f0      	bne.n	800afda <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800aff8:	4b39      	ldr	r3, [pc, #228]	; (800b0e0 <anim_task+0x118>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4618      	mov	r0, r3
 800affe:	f7ff ffad 	bl	800af5c <lv_tick_elaps>
 800b002:	6138      	str	r0, [r7, #16]

    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800b004:	4835      	ldr	r0, [pc, #212]	; (800b0dc <anim_task+0x114>)
 800b006:	f000 fbbe 	bl	800b786 <lv_ll_get_head>
 800b00a:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 800b00c:	e059      	b.n	800b0c2 <anim_task+0xfa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 800b00e:	4b35      	ldr	r3, [pc, #212]	; (800b0e4 <anim_task+0x11c>)
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b01a:	f003 0308 	and.w	r3, r3, #8
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	d140      	bne.n	800b0a6 <anim_task+0xde>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b02a:	f043 0308 	orr.w	r3, r3, #8
 800b02e:	f882 3020 	strb.w	r3, [r2, #32]
            a->act_time += elaps;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b038:	b29a      	uxth	r2, r3
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4413      	add	r3, r2
 800b040:	b29b      	uxth	r3, r3
 800b042:	b21a      	sxth	r2, r3
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	835a      	strh	r2, [r3, #26]
            if(a->act_time >= 0) {
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	db29      	blt.n	800b0a6 <anim_task+0xde>
                if(a->act_time > a->time) a->act_time = a->time;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b058:	461a      	mov	r2, r3
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	8b1b      	ldrh	r3, [r3, #24]
 800b05e:	429a      	cmp	r2, r3
 800b060:	dd04      	ble.n	800b06c <anim_task+0xa4>
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	8b1b      	ldrh	r3, [r3, #24]
 800b066:	b21a      	sxth	r2, r3
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	835a      	strh	r2, [r3, #26]

                int32_t new_value;
                new_value = a->path_cb(a);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	6978      	ldr	r0, [r7, #20]
 800b072:	4798      	blx	r3
 800b074:	4603      	mov	r3, r0
 800b076:	60fb      	str	r3, [r7, #12]

                /*Apply the calculated value*/
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d007      	beq.n	800b090 <anim_task+0xc8>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	6812      	ldr	r2, [r2, #0]
 800b088:	68f9      	ldr	r1, [r7, #12]
 800b08a:	b209      	sxth	r1, r1
 800b08c:	4610      	mov	r0, r2
 800b08e:	4798      	blx	r3

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b096:	461a      	mov	r2, r3
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	8b1b      	ldrh	r3, [r3, #24]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	db02      	blt.n	800b0a6 <anim_task+0xde>
                    anim_ready_handler(a);
 800b0a0:	6978      	ldr	r0, [r7, #20]
 800b0a2:	f000 f821 	bl	800b0e8 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 800b0a6:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <anim_task+0x11c>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d004      	beq.n	800b0b8 <anim_task+0xf0>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800b0ae:	480b      	ldr	r0, [pc, #44]	; (800b0dc <anim_task+0x114>)
 800b0b0:	f000 fb69 	bl	800b786 <lv_ll_get_head>
 800b0b4:	6178      	str	r0, [r7, #20]
 800b0b6:	e004      	b.n	800b0c2 <anim_task+0xfa>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800b0b8:	6979      	ldr	r1, [r7, #20]
 800b0ba:	4808      	ldr	r0, [pc, #32]	; (800b0dc <anim_task+0x114>)
 800b0bc:	f000 fb89 	bl	800b7d2 <lv_ll_get_next>
 800b0c0:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1a2      	bne.n	800b00e <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 800b0c8:	f7ff ff2e 	bl	800af28 <lv_tick_get>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	4b04      	ldr	r3, [pc, #16]	; (800b0e0 <anim_task+0x118>)
 800b0d0:	601a      	str	r2, [r3, #0]
}
 800b0d2:	bf00      	nop
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	200096f8 	.word	0x200096f8
 800b0e0:	200010c0 	.word	0x200010c0
 800b0e4:	200010c4 	.word	0x200010c4

0800b0e8 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred nnd the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08c      	sub	sp, #48	; 0x30
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <anim_ready_handler+0x28>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b106:	f003 0301 	and.w	r3, r3, #1
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d017      	beq.n	800b140 <anim_ready_handler+0x58>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b116:	f003 0302 	and.w	r3, r3, #2
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d129      	bne.n	800b174 <anim_ready_handler+0x8c>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d021      	beq.n	800b174 <anim_ready_handler+0x8c>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d019      	beq.n	800b174 <anim_ready_handler+0x8c>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800b140:	f107 0308 	add.w	r3, r7, #8
 800b144:	2224      	movs	r2, #36	; 0x24
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	f001 fa8d 	bl	800c668 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4829      	ldr	r0, [pc, #164]	; (800b1f8 <anim_ready_handler+0x110>)
 800b152:	f000 fabf 	bl	800b6d4 <lv_ll_rem>
        lv_mem_free(a);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fc54 	bl	800ba04 <lv_mem_free>
        anim_list_changed = true;
 800b15c:	4b27      	ldr	r3, [pc, #156]	; (800b1fc <anim_ready_handler+0x114>)
 800b15e:	2201      	movs	r2, #1
 800b160:	701a      	strb	r2, [r3, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d040      	beq.n	800b1ea <anim_ready_handler+0x102>
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	f107 0208 	add.w	r2, r7, #8
 800b16e:	4610      	mov	r0, r2
 800b170:	4798      	blx	r3
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800b172:	e03a      	b.n	800b1ea <anim_ready_handler+0x102>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	8bdb      	ldrh	r3, [r3, #30]
 800b178:	425b      	negs	r3, r3
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	b21a      	sxth	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	835a      	strh	r2, [r3, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d02c      	beq.n	800b1ec <anim_ready_handler+0x104>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d106      	bne.n	800b1b0 <anim_ready_handler+0xc8>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	8b9b      	ldrh	r3, [r3, #28]
 800b1a6:	425b      	negs	r3, r3
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	b21a      	sxth	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	835a      	strh	r2, [r3, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1b6:	f003 0304 	and.w	r3, r3, #4
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	bf0c      	ite	eq
 800b1c0:	2301      	moveq	r3, #1
 800b1c2:	2300      	movne	r3, #0
 800b1c4:	b2d9      	uxtb	r1, r3
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b1cc:	f361 0382 	bfi	r3, r1, #2, #1
 800b1d0:	f882 3020 	strb.w	r3, [r2, #32]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            a->start = a->end;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	695a      	ldr	r2, [r3, #20]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	611a      	str	r2, [r3, #16]
            a->end   = tmp;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1e6:	615a      	str	r2, [r3, #20]
 800b1e8:	e000      	b.n	800b1ec <anim_ready_handler+0x104>
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800b1ea:	bf00      	nop
        }
    }

    return anim_list_changed;
 800b1ec:	4b03      	ldr	r3, [pc, #12]	; (800b1fc <anim_ready_handler+0x114>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3730      	adds	r7, #48	; 0x30
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	200096f8 	.word	0x200096f8
 800b1fc:	200010c4 	.word	0x200010c4

0800b200 <lv_fs_init>:

/**
 * Initialize the File system interface
 */
void lv_fs_init(void)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800b204:	2144      	movs	r1, #68	; 0x44
 800b206:	4802      	ldr	r0, [pc, #8]	; (800b210 <lv_fs_init+0x10>)
 800b208:	f000 f990 	bl	800b52c <lv_ll_init>
}
 800b20c:	bf00      	nop
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	200096e4 	.word	0x200096e4

0800b214 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 800b214:	b590      	push	{r4, r7, lr}
 800b216:	b089      	sub	sp, #36	; 0x24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <lv_fs_open+0x24>
 800b234:	230b      	movs	r3, #11
 800b236:	e079      	b.n	800b32c <lv_fs_open+0x118>

    char letter = path[0];
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 800b23e:	7ffb      	ldrb	r3, [r7, #31]
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f901 	bl	800b448 <lv_fs_get_drv>
 800b246:	4602      	mov	r2, r0
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d104      	bne.n	800b25e <lv_fs_open+0x4a>
        file_p->file_d = NULL;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_NOT_EX;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e066      	b.n	800b32c <lv_fs_open+0x118>
    }

    if(file_p->drv->ready_cb != NULL) {
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d014      	beq.n	800b292 <lv_fs_open+0x7e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	6852      	ldr	r2, [r2, #4]
 800b272:	4610      	mov	r0, r2
 800b274:	4798      	blx	r3
 800b276:	4603      	mov	r3, r0
 800b278:	f083 0301 	eor.w	r3, r3, #1
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d007      	beq.n	800b292 <lv_fs_open+0x7e>
            file_p->drv    = NULL;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	605a      	str	r2, [r3, #4]
            file_p->file_d = NULL;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
            return LV_FS_RES_HW_ERR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e04c      	b.n	800b32c <lv_fs_open+0x118>
        }
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	885b      	ldrh	r3, [r3, #2]
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fb81 	bl	800b9a0 <lv_mem_alloc>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(file_p->file_d);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fd fad3 	bl	8008854 <lv_debug_check_null>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f083 0301 	eor.w	r3, r3, #1
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <lv_fs_open+0xba>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	4623      	mov	r3, r4
 800b2c6:	481b      	ldr	r0, [pc, #108]	; (800b334 <lv_fs_open+0x120>)
 800b2c8:	f7fd fad4 	bl	8008874 <lv_debug_log_error>
 800b2cc:	e7fe      	b.n	800b2cc <lv_fs_open+0xb8>
    if(file_p->file_d == NULL) {
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d104      	bne.n	800b2e0 <lv_fs_open+0xcc>
        file_p->drv = NULL;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 800b2dc:	230a      	movs	r3, #10
 800b2de:	e025      	b.n	800b32c <lv_fs_open+0x118>
    }

    if(file_p->drv->open_cb == NULL) {
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <lv_fs_open+0xda>
        return LV_FS_RES_NOT_IMP;
 800b2ea:	2309      	movs	r3, #9
 800b2ec:	e01e      	b.n	800b32c <lv_fs_open+0x118>
    }

    const char * real_path = lv_fs_get_real_path(path);
 800b2ee:	68b8      	ldr	r0, [r7, #8]
 800b2f0:	f000 f8fa 	bl	800b4e8 <lv_fs_get_real_path>
 800b2f4:	61b8      	str	r0, [r7, #24]
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	68dc      	ldr	r4, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6858      	ldr	r0, [r3, #4]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6819      	ldr	r1, [r3, #0]
 800b304:	79fb      	ldrb	r3, [r7, #7]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	47a0      	blx	r4
 800b30a:	4603      	mov	r3, r0
 800b30c:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00a      	beq.n	800b32a <lv_fs_open+0x116>
        lv_mem_free(file_p->file_d);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 fb73 	bl	800ba04 <lv_mem_free>
        file_p->file_d = NULL;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	605a      	str	r2, [r3, #4]
    }

    return res;
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3724      	adds	r7, #36	; 0x24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd90      	pop	{r4, r7, pc}
 800b334:	0800c894 	.word	0x0800c894

0800b338 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return  LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 800b348:	230b      	movs	r3, #11
 800b34a:	e020      	b.n	800b38e <lv_fs_close+0x56>
    }

    if(file_p->drv->close_cb == NULL) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 800b356:	2309      	movs	r3, #9
 800b358:	e019      	b.n	800b38e <lv_fs_close+0x56>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	6850      	ldr	r0, [r2, #4]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	4611      	mov	r1, r2
 800b36a:	4798      	blx	r3
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4618      	mov	r0, r3
 800b376:	f000 fb45 	bl	800ba04 <lv_mem_free>
    file_p->file_d = NULL;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]

    return res;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 800b396:	b590      	push	{r4, r7, lr}
 800b398:	b089      	sub	sp, #36	; 0x24
 800b39a:	af02      	add	r7, sp, #8
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <lv_fs_read+0x1a>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <lv_fs_read+0x26>
 800b3b8:	230b      	movs	r3, #11
 800b3ba:	e01e      	b.n	800b3fa <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <lv_fs_read+0x34>
 800b3c6:	2309      	movs	r3, #9
 800b3c8:	e017      	b.n	800b3fa <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	699c      	ldr	r4, [r3, #24]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6858      	ldr	r0, [r3, #4]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6819      	ldr	r1, [r3, #0]
 800b3dc:	f107 0310 	add.w	r3, r7, #16
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	47a0      	blx	r4
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <lv_fs_read+0x62>
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	601a      	str	r2, [r3, #0]

    return res;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd90      	pop	{r4, r7, pc}

0800b402 <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 800b414:	230b      	movs	r3, #11
 800b416:	e012      	b.n	800b43e <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 800b422:	2309      	movs	r3, #9
 800b424:	e00b      	b.n	800b43e <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6850      	ldr	r0, [r2, #4]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	6811      	ldr	r1, [r2, #0]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	4798      	blx	r3
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]

    return res;
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800b452:	480c      	ldr	r0, [pc, #48]	; (800b484 <lv_fs_get_drv+0x3c>)
 800b454:	f000 f997 	bl	800b786 <lv_ll_get_head>
 800b458:	60f8      	str	r0, [r7, #12]
 800b45a:	e00b      	b.n	800b474 <lv_fs_get_drv+0x2c>
    {
        if(drv->letter == letter) {
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	79fa      	ldrb	r2, [r7, #7]
 800b462:	429a      	cmp	r2, r3
 800b464:	d101      	bne.n	800b46a <lv_fs_get_drv+0x22>
            return drv;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	e008      	b.n	800b47c <lv_fs_get_drv+0x34>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800b46a:	68f9      	ldr	r1, [r7, #12]
 800b46c:	4805      	ldr	r0, [pc, #20]	; (800b484 <lv_fs_get_drv+0x3c>)
 800b46e:	f000 f9b0 	bl	800b7d2 <lv_ll_get_next>
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1f0      	bne.n	800b45c <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	200096e4 	.word	0x200096e4

0800b488 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7f4 feb5 	bl	8000200 <strlen>
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	e01b      	b.n	800b4d2 <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b4a4:	d104      	bne.n	800b4b0 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	e014      	b.n	800b4da <lv_fs_get_ext+0x52>
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b2f      	cmp	r3, #47	; 0x2f
 800b4ba:	d005      	beq.n	800b4c8 <lv_fs_get_ext+0x40>
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b5c      	cmp	r3, #92	; 0x5c
 800b4c6:	d101      	bne.n	800b4cc <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 800b4c8:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <lv_fs_get_ext+0x5c>)
 800b4ca:	e006      	b.n	800b4da <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e0      	bne.n	800b49a <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 800b4d8:	4b02      	ldr	r3, [pc, #8]	; (800b4e4 <lv_fs_get_ext+0x5c>)
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	0800c8a4 	.word	0x0800c8a4

0800b4e8 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 800b4f6:	e00e      	b.n	800b516 <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b3a      	cmp	r3, #58	; 0x3a
 800b4fe:	d007      	beq.n	800b510 <lv_fs_get_real_path+0x28>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b5c      	cmp	r3, #92	; 0x5c
 800b506:	d003      	beq.n	800b510 <lv_fs_get_real_path+0x28>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b2f      	cmp	r3, #47	; 0x2f
 800b50e:	d106      	bne.n	800b51e <lv_fs_get_real_path+0x36>
            path++;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3301      	adds	r3, #1
 800b514:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1ec      	bne.n	800b4f8 <lv_fs_get_real_path+0x10>
        } else {
            break;
        }
    }

    return path;
 800b51e:	687b      	ldr	r3, [r7, #4]
}
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	609a      	str	r2, [r3, #8]
        node_size = node_size & (~0x7);
        node_size += 8;
    }
#else
    /*Round the size up to 4*/
    if(node_size & 0x3) {
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	f003 0303 	and.w	r3, r3, #3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d006      	beq.n	800b55a <lv_ll_init+0x2e>
        node_size = node_size & (~0x3);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	603b      	str	r3, [r7, #0]
        node_size += 4;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	3304      	adds	r3, #4
 800b558:	603b      	str	r3, [r7, #0]
    }
#endif

    ll_p->n_size = node_size;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	601a      	str	r2, [r3, #0]
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * lv_ll_ins_head(lv_ll_t * ll_p)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3308      	adds	r3, #8
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fa10 	bl	800b9a0 <lv_mem_alloc>
 800b580:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d020      	beq.n	800b5ca <lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800b588:	2200      	movs	r2, #0
 800b58a:	68f9      	ldr	r1, [r7, #12]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f999 	bl	800b8c4 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	461a      	mov	r2, r3
 800b598:	68f9      	ldr	r1, [r7, #12]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f9b8 	bl	800b910 <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d006      	beq.n	800b5b6 <lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f987 	bl	800b8c4 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;
    lv_ll_node_t * n_prev;

    if(NULL == ll_p || NULL == n_act) return NULL;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <lv_ll_ins_prev+0x16>
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <lv_ll_ins_prev+0x1a>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	e035      	b.n	800b65a <lv_ll_ins_prev+0x86>

    if(lv_ll_get_head(ll_p) == n_act) {
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f8c9 	bl	800b786 <lv_ll_get_head>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d108      	bne.n	800b60e <lv_ll_ins_prev+0x3a>
        n_new = lv_ll_ins_head(ll_p);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff ffb5 	bl	800b56c <lv_ll_ins_head>
 800b602:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d126      	bne.n	800b658 <lv_ll_ins_prev+0x84>
 800b60a:	2300      	movs	r3, #0
 800b60c:	e025      	b.n	800b65a <lv_ll_ins_prev+0x86>
    } else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3308      	adds	r3, #8
 800b614:	4618      	mov	r0, r3
 800b616:	f000 f9c3 	bl	800b9a0 <lv_mem_alloc>
 800b61a:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <lv_ll_ins_prev+0x52>
 800b622:	2300      	movs	r3, #0
 800b624:	e019      	b.n	800b65a <lv_ll_ins_prev+0x86>

        n_prev = lv_ll_get_prev(ll_p, n_act);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f8ec 	bl	800b806 <lv_ll_get_prev>
 800b62e:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f96b 	bl	800b910 <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	68f9      	ldr	r1, [r7, #12]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f940 	bl	800b8c4 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f93b 	bl	800b8c4 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	68f9      	ldr	r1, [r7, #12]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f95c 	bl	800b910 <node_set_next>
    }

    return n_new;
 800b658:	68fb      	ldr	r3, [r7, #12]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * lv_ll_ins_tail(lv_ll_t * ll_p)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3308      	adds	r3, #8
 800b670:	4618      	mov	r0, r3
 800b672:	f000 f995 	bl	800b9a0 <lv_mem_alloc>
 800b676:	60f8      	str	r0, [r7, #12]
    if(n_new == NULL) return NULL;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <lv_ll_ins_tail+0x20>
 800b67e:	2300      	movs	r3, #0
 800b680:	e024      	b.n	800b6cc <lv_ll_ins_tail+0x6a>

    if(n_new != NULL) {
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d020      	beq.n	800b6ca <lv_ll_ins_tail+0x68>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800b688:	2200      	movs	r2, #0
 800b68a:	68f9      	ldr	r1, [r7, #12]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f93f 	bl	800b910 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	461a      	mov	r2, r3
 800b698:	68f9      	ldr	r1, [r7, #12]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f912 	bl	800b8c4 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d006      	beq.n	800b6b6 <lv_ll_ins_tail+0x54>
            node_set_next(ll_p, ll_p->tail, n_new);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f92d 	bl	800b910 <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <lv_ll_ins_tail+0x68>
            ll_p->head = n_new;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <lv_ll_rem>:
 * It does not free the the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void lv_ll_rem(lv_ll_t * ll_p, void * node_p)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
    if(lv_ll_get_head(ll_p) == node_p) {
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f851 	bl	800b786 <lv_ll_get_head>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d116      	bne.n	800b71a <lv_ll_rem+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f86f 	bl	800b7d2 <lv_ll_get_next>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d103      	bne.n	800b70a <lv_ll_rem+0x36>
            ll_p->tail = NULL;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 800b708:	e039      	b.n	800b77e <lv_ll_rem+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f8d6 	bl	800b8c4 <node_set_prev>
}
 800b718:	e031      	b.n	800b77e <lv_ll_rem+0xaa>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f846 	bl	800b7ac <lv_ll_get_tail>
 800b720:	4602      	mov	r2, r0
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	4293      	cmp	r3, r2
 800b726:	d116      	bne.n	800b756 <lv_ll_rem+0x82>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f86b 	bl	800b806 <lv_ll_get_prev>
 800b730:	4602      	mov	r2, r0
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d103      	bne.n	800b746 <lv_ll_rem+0x72>
            ll_p->head = NULL;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	605a      	str	r2, [r3, #4]
}
 800b744:	e01b      	b.n	800b77e <lv_ll_rem+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	2200      	movs	r2, #0
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f8de 	bl	800b910 <node_set_next>
}
 800b754:	e013      	b.n	800b77e <lv_ll_rem+0xaa>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f854 	bl	800b806 <lv_ll_get_prev>
 800b75e:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f835 	bl	800b7d2 <lv_ll_get_next>
 800b768:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	68f9      	ldr	r1, [r7, #12]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f8ce 	bl	800b910 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f8a3 	bl	800b8c4 <node_set_prev>
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_head(const lv_ll_t * ll_p)
{
 800b786:	b480      	push	{r7}
 800b788:	b085      	sub	sp, #20
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <lv_ll_get_head+0x18>
        head = ll_p->head;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	60fb      	str	r3, [r7, #12]
    }

    return head;
 800b79e:	68fb      	ldr	r3, [r7, #12]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_tail(const lv_ll_t * ll_p)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b085      	sub	sp, #20
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
    void * next = NULL;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d008      	beq.n	800b7f8 <lv_ll_get_next+0x26>
        const lv_ll_node_t * n_act_d = n_act;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	60bb      	str	r3, [r7, #8]
    }

    return next;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 800b806:	b480      	push	{r7}
 800b808:	b085      	sub	sp, #20
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
    void * prev = NULL;
 800b810:	2300      	movs	r3, #0
 800b812:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d007      	beq.n	800b82a <lv_ll_get_prev+0x24>
        const lv_ll_node_t * n_act_d = n_act;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	60fb      	str	r3, [r7, #12]
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	4413      	add	r3, r2
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	60bb      	str	r3, [r7, #8]
    }

    return prev;
 800b82a:	68bb      	ldr	r3, [r7, #8]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d035      	beq.n	800b8b8 <lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d005      	beq.n	800b85e <lv_ll_move_before+0x26>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f7ff ffd6 	bl	800b806 <lv_ll_get_prev>
 800b85a:	6178      	str	r0, [r7, #20]
 800b85c:	e003      	b.n	800b866 <lv_ll_move_before+0x2e>
    else
        n_before = lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f7ff ffa4 	bl	800b7ac <lv_ll_get_tail>
 800b864:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d026      	beq.n	800b8bc <lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    lv_ll_rem(ll_p, n_act);
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff ff2f 	bl	800b6d4 <lv_ll_rem>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	6979      	ldr	r1, [r7, #20]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f848 	bl	800b910 <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	68b9      	ldr	r1, [r7, #8]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 f81d 	bl	800b8c4 <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f000 f818 	bl	800b8c4 <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 f839 	bl	800b910 <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <lv_ll_move_before+0x72>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d106      	bne.n	800b8be <lv_ll_move_before+0x86>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	605a      	str	r2, [r3, #4]
 800b8b6:	e002      	b.n	800b8be <lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 800b8b8:	bf00      	nop
 800b8ba:	e000      	b.n	800b8be <lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 800b8bc:	bf00      	nop
}
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d018      	beq.n	800b908 <node_set_prev+0x44>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 800b8d6:	2304      	movs	r3, #4
 800b8d8:	617b      	str	r3, [r7, #20]
    if(prev)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d009      	beq.n	800b8f4 <node_set_prev+0x30>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	1d39      	adds	r1, r7, #4
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 febb 	bl	800c668 <memcpy>
 800b8f2:	e00a      	b.n	800b90a <node_set_prev+0x46>
    else
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	2100      	movs	r1, #0
 800b900:	4618      	mov	r0, r3
 800b902:	f000 febc 	bl	800c67e <memset>
 800b906:	e000      	b.n	800b90a <node_set_prev+0x46>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800b908:	bf00      	nop
}
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d01a      	beq.n	800b958 <node_set_next+0x48>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 800b922:	2304      	movs	r3, #4
 800b924:	617b      	str	r3, [r7, #20]
    if(next)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00a      	beq.n	800b942 <node_set_next+0x32>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3304      	adds	r3, #4
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	4413      	add	r3, r2
 800b936:	1d39      	adds	r1, r7, #4
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 fe94 	bl	800c668 <memcpy>
 800b940:	e00b      	b.n	800b95a <node_set_next+0x4a>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3304      	adds	r3, #4
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	4413      	add	r3, r2
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	2100      	movs	r1, #0
 800b950:	4618      	mov	r0, r3
 800b952:	f000 fe94 	bl	800c67e <memset>
 800b956:	e000      	b.n	800b95a <node_set_next+0x4a>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800b958:	bf00      	nop
}
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <lv_mem_init>:

/**
 * Initiaiize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0

#if LV_MEM_ADR == 0
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_MEM_ATTR MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    work_mem = (uint8_t *)work_mem_int;
 800b966:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <lv_mem_init+0x38>)
 800b968:	4a0c      	ldr	r2, [pc, #48]	; (800b99c <lv_mem_init+0x3c>)
 800b96a:	601a      	str	r2, [r3, #0]
#else
    work_mem = (uint8_t *)LV_MEM_ADR;
#endif

    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
 800b96c:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <lv_mem_init+0x38>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	607b      	str	r3, [r7, #4]
    full->header.s.used = 0;
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	7813      	ldrb	r3, [r2, #0]
 800b976:	f36f 0300 	bfc	r3, #0, #1
 800b97a:	7013      	strb	r3, [r2, #0]
    /*The total mem size id reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6813      	ldr	r3, [r2, #0]
 800b980:	f647 71fc 	movw	r1, #32764	; 0x7ffc
 800b984:	f361 035f 	bfi	r3, r1, #1, #31
 800b988:	6013      	str	r3, [r2, #0]
#endif
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	200010c8 	.word	0x200010c8
 800b99c:	200010d0 	.word	0x200010d0

0800b9a0 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <lv_mem_alloc+0x12>
        return &zero_mem;
 800b9ae:	4b14      	ldr	r3, [pc, #80]	; (800ba00 <lv_mem_alloc+0x60>)
 800b9b0:	e022      	b.n	800b9f8 <lv_mem_alloc+0x58>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f003 0303 	and.w	r3, r3, #3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d006      	beq.n	800b9ca <lv_mem_alloc+0x2a>
        size = size & (~0x3);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f023 0303 	bic.w	r3, r3, #3
 800b9c2:	607b      	str	r3, [r7, #4]
        size += 4;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	607b      	str	r3, [r7, #4]
    }
#endif
    void * alloc = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]

#if LV_MEM_CUSTOM == 0
    /*Use the built-in allocators*/
    lv_mem_ent_t * e = NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60bb      	str	r3, [r7, #8]

    /* Search for a appropriate entry*/
    do {
        /* Get the next entry*/
        e = ent_get_next(e);
 800b9d2:	68b8      	ldr	r0, [r7, #8]
 800b9d4:	f000 f8c4 	bl	800bb60 <ent_get_next>
 800b9d8:	60b8      	str	r0, [r7, #8]

        /*If there is next entry then try to allocate there*/
        if(e != NULL) {
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d004      	beq.n	800b9ea <lv_mem_alloc+0x4a>
            alloc = ent_alloc(e, size);
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	68b8      	ldr	r0, [r7, #8]
 800b9e4:	f000 f8e8 	bl	800bbb8 <ent_alloc>
 800b9e8:	60f8      	str	r0, [r7, #12]
        }
        /* End if there is not next entry OR the alloc. is successful*/
    } while(e != NULL && alloc == NULL);
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <lv_mem_alloc+0x56>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0ed      	beq.n	800b9d2 <lv_mem_alloc+0x32>
    if(alloc != NULL) memset(alloc, 0xaa, size);
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	200010cc 	.word	0x200010cc

0800ba04 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a1e      	ldr	r2, [pc, #120]	; (800ba88 <lv_mem_free+0x84>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d030      	beq.n	800ba76 <lv_mem_free+0x72>
    if(data == NULL) return;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02f      	beq.n	800ba7a <lv_mem_free+0x76>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	3b04      	subs	r3, #4
 800ba1e:	60bb      	str	r3, [r7, #8]
    e->header.s.used = 0;
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	7813      	ldrb	r3, [r2, #0]
 800ba24:	f36f 0300 	bfc	r3, #0, #1
 800ba28:	7013      	strb	r3, [r2, #0]
#if LV_MEM_CUSTOM == 0
#if LV_MEM_AUTO_DEFRAG
    /* Make a simple defrag.
     * Join the following free entries after this*/
    lv_mem_ent_t * e_next;
    e_next = ent_get_next(e);
 800ba2a:	68b8      	ldr	r0, [r7, #8]
 800ba2c:	f000 f898 	bl	800bb60 <ent_get_next>
 800ba30:	60f8      	str	r0, [r7, #12]
    while(e_next != NULL) {
 800ba32:	e01c      	b.n	800ba6e <lv_mem_free+0x6a>
        if(e_next->header.s.used == 0) {
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d11d      	bne.n	800ba7e <lv_mem_free+0x7a>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800ba54:	4413      	add	r3, r2
 800ba56:	3304      	adds	r3, #4
 800ba58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	6813      	ldr	r3, [r2, #0]
 800ba60:	f361 035f 	bfi	r3, r1, #1, #31
 800ba64:	6013      	str	r3, [r2, #0]
        } else {
            break;
        }
        e_next = ent_get_next(e_next);
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f000 f87a 	bl	800bb60 <ent_get_next>
 800ba6c:	60f8      	str	r0, [r7, #12]
    while(e_next != NULL) {
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1df      	bne.n	800ba34 <lv_mem_free+0x30>
 800ba74:	e004      	b.n	800ba80 <lv_mem_free+0x7c>
    if(data == &zero_mem) return;
 800ba76:	bf00      	nop
 800ba78:	e002      	b.n	800ba80 <lv_mem_free+0x7c>
    if(data == NULL) return;
 800ba7a:	bf00      	nop
 800ba7c:	e000      	b.n	800ba80 <lv_mem_free+0x7c>
            break;
 800ba7e:	bf00      	nop
    LV_MEM_CUSTOM_FREE(e);
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	200010cc 	.word	0x200010cc

0800ba8c <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, size_t new_size)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00b      	beq.n	800bab4 <lv_mem_realloc+0x28>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3b04      	subs	r3, #4
 800baa0:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <lv_mem_realloc+0x28>
            data_p = NULL;
 800bab0:	2300      	movs	r3, #0
 800bab2:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = lv_mem_get_size(data_p);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f835 	bl	800bb24 <lv_mem_get_size>
 800baba:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d101      	bne.n	800bac8 <lv_mem_realloc+0x3c>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	e028      	b.n	800bb1a <lv_mem_realloc+0x8e>

#if LV_MEM_CUSTOM == 0
    /* Truncate the memory if the new size is smaller. */
    if(new_size < old_size) {
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d209      	bcs.n	800bae4 <lv_mem_realloc+0x58>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3b04      	subs	r3, #4
 800bad4:	60bb      	str	r3, [r7, #8]
        ent_trunc(e, new_size);
 800bad6:	6839      	ldr	r1, [r7, #0]
 800bad8:	68b8      	ldr	r0, [r7, #8]
 800bada:	f000 f894 	bl	800bc06 <ent_trunc>
        return &e->first_data;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	3304      	adds	r3, #4
 800bae2:	e01a      	b.n	800bb1a <lv_mem_realloc+0x8e>
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 800bae4:	6838      	ldr	r0, [r7, #0]
 800bae6:	f7ff ff5b 	bl	800b9a0 <lv_mem_alloc>
 800baea:	60f8      	str	r0, [r7, #12]

    if(new_p != NULL && data_p != NULL) {
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d012      	beq.n	800bb18 <lv_mem_realloc+0x8c>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00f      	beq.n	800bb18 <lv_mem_realloc+0x8c>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0) {
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00c      	beq.n	800bb18 <lv_mem_realloc+0x8c>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	4293      	cmp	r3, r2
 800bb04:	bf28      	it	cs
 800bb06:	4613      	movcs	r3, r2
 800bb08:	461a      	mov	r2, r3
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 fdab 	bl	800c668 <memcpy>
            lv_mem_free(data_p);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff ff76 	bl	800ba04 <lv_mem_free>
        }
    }

    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return new_p;
 800bb18:	68fb      	ldr	r3, [r7, #12]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <lv_mem_get_size+0x12>
 800bb32:	2300      	movs	r3, #0
 800bb34:	e00c      	b.n	800bb50 <lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a08      	ldr	r2, [pc, #32]	; (800bb5c <lv_mem_get_size+0x38>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d101      	bne.n	800bb42 <lv_mem_get_size+0x1e>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	e006      	b.n	800bb50 <lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3b04      	subs	r3, #4
 800bb46:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	200010cc 	.word	0x200010cc

0800bb60 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
    lv_mem_ent_t * next_e = NULL;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	60fb      	str	r3, [r7, #12]

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d103      	bne.n	800bb7a <ent_get_next+0x1a>
        next_e = (lv_mem_ent_t *)work_mem;
 800bb72:	4b10      	ldr	r3, [pc, #64]	; (800bbb4 <ent_get_next+0x54>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	60fb      	str	r3, [r7, #12]
 800bb78:	e014      	b.n	800bba4 <ent_get_next+0x44>
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	60bb      	str	r3, [r7, #8]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800bb88:	461a      	mov	r2, r3
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	1d1a      	adds	r2, r3, #4
 800bb94:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <ent_get_next+0x54>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d301      	bcc.n	800bba4 <ent_get_next+0x44>
 800bba0:	2300      	movs	r3, #0
 800bba2:	60fb      	str	r3, [r7, #12]
    }

    return next_e;
 800bba4:	68fb      	ldr	r3, [r7, #12]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	200010c8 	.word	0x200010c8

0800bbb8 <ent_alloc>:
 * @param e try to allocate to this entry
 * @param size size of the new memory in bytes
 * @return pointer to the allocated memory or NULL if not enough memory in the entry
 */
static void * ent_alloc(lv_mem_ent_t * e, uint32_t size)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
    void * alloc = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60fb      	str	r3, [r7, #12]

    /*If the memory is free and big enough then use it */
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d113      	bne.n	800bbfc <ent_alloc+0x44>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800bbdc:	461a      	mov	r2, r3
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d80b      	bhi.n	800bbfc <ent_alloc+0x44>
        /*Truncate the entry to the desired size */
        ent_trunc(e, size),
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f80d 	bl	800bc06 <ent_trunc>

            e->header.s.used = 1;
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	7813      	ldrb	r3, [r2, #0]
 800bbf0:	f043 0301 	orr.w	r3, r3, #1
 800bbf4:	7013      	strb	r3, [r2, #0]

        /*Save the allocated data*/
        alloc = &e->first_data;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	60fb      	str	r3, [r7, #12]
    }

    return alloc;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <ent_trunc>:
 * Truncate the data of entry to the given size
 * @param e Pointer to an entry
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, uint32_t size)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	f003 0303 	and.w	r3, r3, #3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d006      	beq.n	800bc28 <ent_trunc+0x22>
        size = size & (~0x3);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	f023 0303 	bic.w	r3, r3, #3
 800bc20:	603b      	str	r3, [r7, #0]
        size += 4;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	3304      	adds	r3, #4
 800bc26:	603b      	str	r3, [r7, #0]
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800bc30:	461a      	mov	r2, r3
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	3304      	adds	r3, #4
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d104      	bne.n	800bc44 <ent_trunc+0x3e>
        size = e->header.s.d_size;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800bc42:	603b      	str	r3, [r7, #0]
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d01a      	beq.n	800bc8a <ent_trunc+0x84>
        uint8_t * e_data             = &e->first_data;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3304      	adds	r3, #4
 800bc58:	60fb      	str	r3, [r7, #12]
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	4413      	add	r3, r2
 800bc60:	60bb      	str	r3, [r7, #8]
        after_new_e->header.s.used   = 0;
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	7813      	ldrb	r3, [r2, #0]
 800bc66:	f36f 0300 	bfc	r3, #0, #1
 800bc6a:	7013      	strb	r3, [r2, #0]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800bc74:	461a      	mov	r2, r3
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	3b04      	subs	r3, #4
 800bc7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	6813      	ldr	r3, [r2, #0]
 800bc84:	f361 035f 	bfi	r3, r1, #1, #31
 800bc88:	6013      	str	r3, [r2, #0]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	f361 035f 	bfi	r3, r1, #1, #31
 800bc98:	6013      	str	r3, [r2, #0]
}
 800bc9a:	bf00      	nop
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
	...

0800bca8 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800bcac:	2114      	movs	r1, #20
 800bcae:	4804      	ldr	r0, [pc, #16]	; (800bcc0 <lv_task_core_init+0x18>)
 800bcb0:	f7ff fc3c 	bl	800b52c <lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f000 f93f 	bl	800bf38 <lv_task_enable>
}
 800bcba:	bf00      	nop
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	200096b0 	.word	0x200096b0

0800bcc4 <lv_task_create_basic>:
 * Create an "empty" task. It needs to initialzed with at least
 * `lv_task_set_cb` and `lv_task_set_period`
 * @return pointer to the craeted task
 */
lv_task_t * lv_task_create_basic(void)
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
    lv_task_t * new_task = NULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	607b      	str	r3, [r7, #4]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800bcce:	4847      	ldr	r0, [pc, #284]	; (800bdec <lv_task_create_basic+0x128>)
 800bcd0:	f7ff fd59 	bl	800b786 <lv_ll_get_head>
 800bcd4:	6038      	str	r0, [r7, #0]

    /*It's the first task*/
    if(NULL == tmp) {
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d11a      	bne.n	800bd12 <lv_task_create_basic+0x4e>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800bcdc:	4843      	ldr	r0, [pc, #268]	; (800bdec <lv_task_create_basic+0x128>)
 800bcde:	f7ff fc45 	bl	800b56c <lv_ll_ins_head>
 800bce2:	6078      	str	r0, [r7, #4]
        LV_ASSERT_MEM(new_task);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7fc fdb5 	bl	8008854 <lv_debug_check_null>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f083 0301 	eor.w	r3, r3, #1
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d008      	beq.n	800bd08 <lv_task_create_basic+0x44>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4623      	mov	r3, r4
 800bd00:	483b      	ldr	r0, [pc, #236]	; (800bdf0 <lv_task_create_basic+0x12c>)
 800bd02:	f7fc fdb7 	bl	8008874 <lv_debug_log_error>
 800bd06:	e7fe      	b.n	800bd06 <lv_task_create_basic+0x42>
        if(new_task == NULL) return NULL;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d14c      	bne.n	800bda8 <lv_task_create_basic+0xe4>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e068      	b.n	800bde4 <lv_task_create_basic+0x120>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= DEF_PRIO) {
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	7c1b      	ldrb	r3, [r3, #16]
 800bd16:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d81b      	bhi.n	800bd58 <lv_task_create_basic+0x94>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	4832      	ldr	r0, [pc, #200]	; (800bdec <lv_task_create_basic+0x128>)
 800bd24:	f7ff fc56 	bl	800b5d4 <lv_ll_ins_prev>
 800bd28:	6078      	str	r0, [r7, #4]
                LV_ASSERT_MEM(new_task);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7fc fd92 	bl	8008854 <lv_debug_check_null>
 800bd30:	4603      	mov	r3, r0
 800bd32:	f083 0301 	eor.w	r3, r3, #1
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d008      	beq.n	800bd4e <lv_task_create_basic+0x8a>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800bd42:	461a      	mov	r2, r3
 800bd44:	4623      	mov	r3, r4
 800bd46:	482a      	ldr	r0, [pc, #168]	; (800bdf0 <lv_task_create_basic+0x12c>)
 800bd48:	f7fc fd94 	bl	8008874 <lv_debug_log_error>
 800bd4c:	e7fe      	b.n	800bd4c <lv_task_create_basic+0x88>
                if(new_task == NULL) return NULL;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <lv_task_create_basic+0xa6>
 800bd54:	2300      	movs	r3, #0
 800bd56:	e045      	b.n	800bde4 <lv_task_create_basic+0x120>
                break;
            }
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	4824      	ldr	r0, [pc, #144]	; (800bdec <lv_task_create_basic+0x128>)
 800bd5c:	f7ff fd39 	bl	800b7d2 <lv_ll_get_next>
 800bd60:	6038      	str	r0, [r7, #0]
        } while(tmp != NULL);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1d4      	bne.n	800bd12 <lv_task_create_basic+0x4e>
 800bd68:	e000      	b.n	800bd6c <lv_task_create_basic+0xa8>
                break;
 800bd6a:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d11a      	bne.n	800bda8 <lv_task_create_basic+0xe4>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800bd72:	481e      	ldr	r0, [pc, #120]	; (800bdec <lv_task_create_basic+0x128>)
 800bd74:	f7ff fc75 	bl	800b662 <lv_ll_ins_tail>
 800bd78:	6078      	str	r0, [r7, #4]
            LV_ASSERT_MEM(new_task);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7fc fd6a 	bl	8008854 <lv_debug_check_null>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f083 0301 	eor.w	r3, r3, #1
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d008      	beq.n	800bd9e <lv_task_create_basic+0xda>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800bd92:	461a      	mov	r2, r3
 800bd94:	4623      	mov	r3, r4
 800bd96:	4816      	ldr	r0, [pc, #88]	; (800bdf0 <lv_task_create_basic+0x12c>)
 800bd98:	f7fc fd6c 	bl	8008874 <lv_debug_log_error>
 800bd9c:	e7fe      	b.n	800bd9c <lv_task_create_basic+0xd8>
            if(new_task == NULL) return NULL;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <lv_task_create_basic+0xe4>
 800bda4:	2300      	movs	r3, #0
 800bda6:	e01d      	b.n	800bde4 <lv_task_create_basic+0x120>
        }
    }

    new_task->period  = DEF_PERIOD;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bdae:	601a      	str	r2, [r3, #0]
    new_task->task_cb = NULL;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	609a      	str	r2, [r3, #8]
    new_task->prio    = DEF_PRIO;
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	7c13      	ldrb	r3, [r2, #16]
 800bdba:	2103      	movs	r1, #3
 800bdbc:	f361 0302 	bfi	r3, r1, #0, #3
 800bdc0:	7413      	strb	r3, [r2, #16]

    new_task->once     = 0;
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	7c13      	ldrb	r3, [r2, #16]
 800bdc6:	f36f 03c3 	bfc	r3, #3, #1
 800bdca:	7413      	strb	r3, [r2, #16]
    new_task->last_run = lv_tick_get();
 800bdcc:	f7ff f8ac 	bl	800af28 <lv_tick_get>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	605a      	str	r2, [r3, #4]

    new_task->user_data = NULL;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	60da      	str	r2, [r3, #12]

    task_created = true;
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <lv_task_create_basic+0x130>)
 800bdde:	2201      	movs	r2, #1
 800bde0:	701a      	strb	r2, [r3, #0]

    return new_task;
 800bde2:	687b      	ldr	r3, [r7, #4]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd90      	pop	{r4, r7, pc}
 800bdec:	200096b0 	.word	0x200096b0
 800bdf0:	0800c8a8 	.word	0x0800c8a8
 800bdf4:	200090d1 	.word	0x200090d1

0800bdf8 <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_cb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 800bdf8:	b590      	push	{r4, r7, lr}
 800bdfa:	b087      	sub	sp, #28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	603b      	str	r3, [r7, #0]
 800be04:	4613      	mov	r3, r2
 800be06:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = lv_task_create_basic();
 800be08:	f7ff ff5c 	bl	800bcc4 <lv_task_create_basic>
 800be0c:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MEM(new_task);
 800be0e:	6978      	ldr	r0, [r7, #20]
 800be10:	f7fc fd20 	bl	8008854 <lv_debug_check_null>
 800be14:	4603      	mov	r3, r0
 800be16:	f083 0301 	eor.w	r3, r3, #1
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d008      	beq.n	800be32 <lv_task_create+0x3a>
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800be26:	461a      	mov	r2, r3
 800be28:	4623      	mov	r3, r4
 800be2a:	480f      	ldr	r0, [pc, #60]	; (800be68 <lv_task_create+0x70>)
 800be2c:	f7fc fd22 	bl	8008874 <lv_debug_log_error>
 800be30:	e7fe      	b.n	800be30 <lv_task_create+0x38>
    if(new_task == NULL) return NULL;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <lv_task_create+0x44>
 800be38:	2300      	movs	r3, #0
 800be3a:	e010      	b.n	800be5e <lv_task_create+0x66>

    lv_task_set_cb(new_task, task_cb);
 800be3c:	68f9      	ldr	r1, [r7, #12]
 800be3e:	6978      	ldr	r0, [r7, #20]
 800be40:	f000 f814 	bl	800be6c <lv_task_set_cb>
    lv_task_set_period(new_task, period);
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	6978      	ldr	r0, [r7, #20]
 800be48:	f000 f868 	bl	800bf1c <lv_task_set_period>
    lv_task_set_prio(new_task, prio);
 800be4c:	79fb      	ldrb	r3, [r7, #7]
 800be4e:	4619      	mov	r1, r3
 800be50:	6978      	ldr	r0, [r7, #20]
 800be52:	f000 f819 	bl	800be88 <lv_task_set_prio>
    new_task->user_data = user_data;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	60da      	str	r2, [r3, #12]

    return new_task;
 800be5c:	697b      	ldr	r3, [r7, #20]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	371c      	adds	r7, #28
 800be62:	46bd      	mov	sp, r7
 800be64:	bd90      	pop	{r4, r7, pc}
 800be66:	bf00      	nop
 800be68:	0800c8a8 	.word	0x0800c8a8

0800be6c <lv_task_set_cb>:
 * Set the callback the task (the function to call periodically)
 * @param task pointer to a task
 * @param task_cb teh function to call periodically
 */
void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
    task->task_cb = task_cb;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	609a      	str	r2, [r3, #8]
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7c1b      	ldrb	r3, [r3, #16]
 800be98:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	461a      	mov	r2, r3
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d033      	beq.n	800bf0e <lv_task_set_prio+0x86>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800bea6:	481c      	ldr	r0, [pc, #112]	; (800bf18 <lv_task_set_prio+0x90>)
 800bea8:	f7ff fc6d 	bl	800b786 <lv_ll_get_head>
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	e017      	b.n	800bee0 <lv_task_set_prio+0x58>
    {
        if(i->prio <= prio) {
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	7c1b      	ldrb	r3, [r3, #16]
 800beb4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	461a      	mov	r2, r3
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	dc09      	bgt.n	800bed6 <lv_task_set_prio+0x4e>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d00e      	beq.n	800bee8 <lv_task_set_prio+0x60>
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	6879      	ldr	r1, [r7, #4]
 800bece:	4812      	ldr	r0, [pc, #72]	; (800bf18 <lv_task_set_prio+0x90>)
 800bed0:	f7ff fcb2 	bl	800b838 <lv_ll_move_before>
            break;
 800bed4:	e008      	b.n	800bee8 <lv_task_set_prio+0x60>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	480f      	ldr	r0, [pc, #60]	; (800bf18 <lv_task_set_prio+0x90>)
 800beda:	f7ff fc7a 	bl	800b7d2 <lv_ll_get_next>
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e4      	bne.n	800beb0 <lv_task_set_prio+0x28>
 800bee6:	e000      	b.n	800beea <lv_task_set_prio+0x62>
            break;
 800bee8:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d104      	bne.n	800befa <lv_task_set_prio+0x72>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800bef0:	2200      	movs	r2, #0
 800bef2:	6879      	ldr	r1, [r7, #4]
 800bef4:	4808      	ldr	r0, [pc, #32]	; (800bf18 <lv_task_set_prio+0x90>)
 800bef6:	f7ff fc9f 	bl	800b838 <lv_ll_move_before>
    }

    task->prio = prio;
 800befa:	78fb      	ldrb	r3, [r7, #3]
 800befc:	f003 0307 	and.w	r3, r3, #7
 800bf00:	b2d9      	uxtb	r1, r3
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	7c13      	ldrb	r3, [r2, #16]
 800bf06:	f361 0302 	bfi	r3, r1, #0, #3
 800bf0a:	7413      	strb	r3, [r2, #16]
 800bf0c:	e000      	b.n	800bf10 <lv_task_set_prio+0x88>
    if(task->prio == prio) return;
 800bf0e:	bf00      	nop
}
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	200096b0 	.word	0x200096b0

0800bf1c <lv_task_set_period>:
 * Set new period for a lv_task
 * @param task pointer to a lv_task
 * @param period the new period
 */
void lv_task_set_period(lv_task_t * task, uint32_t period)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
    task->period = period;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	601a      	str	r2, [r3, #0]
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 800bf42:	4a04      	ldr	r2, [pc, #16]	; (800bf54 <lv_task_enable+0x1c>)
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	7013      	strb	r3, [r2, #0]
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	200090d0 	.word	0x200090d0

0800bf58 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
 800bf64:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	e02d      	b.n	800bfc8 <lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	085b      	lsrs	r3, r3, #1
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	fb02 f303 	mul.w	r3, r2, r3
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	4413      	add	r3, r2
 800bf7a:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
 800bf7e:	6979      	ldr	r1, [r7, #20]
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	4798      	blx	r3
 800bf84:	6138      	str	r0, [r7, #16]
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dd12      	ble.n	800bfb2 <lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	085b      	lsrs	r3, r3, #1
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	f002 0201 	and.w	r2, r2, #1
 800bf96:	2a00      	cmp	r2, #0
 800bf98:	bf0c      	ite	eq
 800bf9a:	2201      	moveq	r2, #1
 800bf9c:	2200      	movne	r2, #0
 800bf9e:	b2d2      	uxtb	r2, r2
 800bfa0:	1a9b      	subs	r3, r3, r2
 800bfa2:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	60bb      	str	r3, [r7, #8]
 800bfb0:	e00a      	b.n	800bfc8 <lv_utils_bsearch+0x70>
        } else if(c < 0) {
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	da05      	bge.n	800bfc4 <lv_utils_bsearch+0x6c>
            n /= 2;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	085b      	lsrs	r3, r3, #1
 800bfbc:	607b      	str	r3, [r7, #4]
            middle = base;
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	e001      	b.n	800bfc8 <lv_utils_bsearch+0x70>
        } else {
            return (char *)middle;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	e003      	b.n	800bfd0 <lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1ce      	bne.n	800bf6c <lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3718      	adds	r7, #24
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	490e      	ldr	r1, [pc, #56]	; (800c018 <MX_USB_HOST_Init+0x40>)
 800bfe0:	480e      	ldr	r0, [pc, #56]	; (800c01c <MX_USB_HOST_Init+0x44>)
 800bfe2:	f7fb f9f9 	bl	80073d8 <USBH_Init>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bfec:	f7f4 fe68 	bl	8000cc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800bff0:	490b      	ldr	r1, [pc, #44]	; (800c020 <MX_USB_HOST_Init+0x48>)
 800bff2:	480a      	ldr	r0, [pc, #40]	; (800c01c <MX_USB_HOST_Init+0x44>)
 800bff4:	f7fb fa63 	bl	80074be <USBH_RegisterClass>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bffe:	f7f4 fe5f 	bl	8000cc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c002:	4806      	ldr	r0, [pc, #24]	; (800c01c <MX_USB_HOST_Init+0x44>)
 800c004:	f7fb fae8 	bl	80075d8 <USBH_Start>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c00e:	f7f4 fe57 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c012:	bf00      	nop
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	0800c039 	.word	0x0800c039
 800c01c:	2000971c 	.word	0x2000971c
 800c020:	20000008 	.word	0x20000008

0800c024 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800c028:	4802      	ldr	r0, [pc, #8]	; (800c034 <MX_USB_HOST_Process+0x10>)
 800c02a:	f7fb fae5 	bl	80075f8 <USBH_Process>
}
 800c02e:	bf00      	nop
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	2000971c 	.word	0x2000971c

0800c038 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	3b01      	subs	r3, #1
 800c048:	2b04      	cmp	r3, #4
 800c04a:	d819      	bhi.n	800c080 <USBH_UserProcess+0x48>
 800c04c:	a201      	add	r2, pc, #4	; (adr r2, 800c054 <USBH_UserProcess+0x1c>)
 800c04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c052:	bf00      	nop
 800c054:	0800c081 	.word	0x0800c081
 800c058:	0800c071 	.word	0x0800c071
 800c05c:	0800c081 	.word	0x0800c081
 800c060:	0800c079 	.word	0x0800c079
 800c064:	0800c069 	.word	0x0800c069
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c068:	4b09      	ldr	r3, [pc, #36]	; (800c090 <USBH_UserProcess+0x58>)
 800c06a:	2203      	movs	r2, #3
 800c06c:	701a      	strb	r2, [r3, #0]
  break;
 800c06e:	e008      	b.n	800c082 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <USBH_UserProcess+0x58>)
 800c072:	2202      	movs	r2, #2
 800c074:	701a      	strb	r2, [r3, #0]
  break;
 800c076:	e004      	b.n	800c082 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c078:	4b05      	ldr	r3, [pc, #20]	; (800c090 <USBH_UserProcess+0x58>)
 800c07a:	2201      	movs	r2, #1
 800c07c:	701a      	strb	r2, [r3, #0]
  break;
 800c07e:	e000      	b.n	800c082 <USBH_UserProcess+0x4a>

  default:
  break;
 800c080:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c082:	bf00      	nop
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	200090d2 	.word	0x200090d2

0800c094 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08a      	sub	sp, #40	; 0x28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c09c:	f107 0314 	add.w	r3, r7, #20
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	605a      	str	r2, [r3, #4]
 800c0a6:	609a      	str	r2, [r3, #8]
 800c0a8:	60da      	str	r2, [r3, #12]
 800c0aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a24      	ldr	r2, [pc, #144]	; (800c144 <HAL_HCD_MspInit+0xb0>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d141      	bne.n	800c13a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	613b      	str	r3, [r7, #16]
 800c0ba:	4b23      	ldr	r3, [pc, #140]	; (800c148 <HAL_HCD_MspInit+0xb4>)
 800c0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0be:	4a22      	ldr	r2, [pc, #136]	; (800c148 <HAL_HCD_MspInit+0xb4>)
 800c0c0:	f043 0302 	orr.w	r3, r3, #2
 800c0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800c0c6:	4b20      	ldr	r3, [pc, #128]	; (800c148 <HAL_HCD_MspInit+0xb4>)
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ca:	f003 0302 	and.w	r3, r3, #2
 800c0ce:	613b      	str	r3, [r7, #16]
 800c0d0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800c0d2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800c0d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d8:	2302      	movs	r3, #2
 800c0da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c0e4:	230c      	movs	r3, #12
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0e8:	f107 0314 	add.w	r3, r7, #20
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4817      	ldr	r0, [pc, #92]	; (800c14c <HAL_HCD_MspInit+0xb8>)
 800c0f0:	f7f5 fdb4 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800c0f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800c102:	f107 0314 	add.w	r3, r7, #20
 800c106:	4619      	mov	r1, r3
 800c108:	4810      	ldr	r0, [pc, #64]	; (800c14c <HAL_HCD_MspInit+0xb8>)
 800c10a:	f7f5 fda7 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <HAL_HCD_MspInit+0xb4>)
 800c114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c116:	4a0c      	ldr	r2, [pc, #48]	; (800c148 <HAL_HCD_MspInit+0xb4>)
 800c118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c11c:	6313      	str	r3, [r2, #48]	; 0x30
 800c11e:	4b0a      	ldr	r3, [pc, #40]	; (800c148 <HAL_HCD_MspInit+0xb4>)
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800c12a:	2200      	movs	r2, #0
 800c12c:	2100      	movs	r1, #0
 800c12e:	204d      	movs	r0, #77	; 0x4d
 800c130:	f7f5 fb60 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c134:	204d      	movs	r0, #77	; 0x4d
 800c136:	f7f5 fb79 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c13a:	bf00      	nop
 800c13c:	3728      	adds	r7, #40	; 0x28
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	40040000 	.word	0x40040000
 800c148:	40023800 	.word	0x40023800
 800c14c:	40020400 	.word	0x40020400

0800c150 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fb fcfb 	bl	8007b5a <USBH_LL_IncTimer>
}
 800c164:	bf00      	nop
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fb fd40 	bl	8007c00 <USBH_LL_Connect>
}
 800c180:	bf00      	nop
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c196:	4618      	mov	r0, r3
 800c198:	f7fb fd58 	bl	8007c4c <USBH_LL_Disconnect>
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c1b4:	bf00      	nop
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fb fced 	bl	8007bae <USBH_LL_PortEnabled>
} 
 800c1d4:	bf00      	nop
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fb fced 	bl	8007bca <USBH_LL_PortDisabled>
} 
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d132      	bne.n	800c270 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c20a:	4a1c      	ldr	r2, [pc, #112]	; (800c27c <USBH_LL_Init+0x84>)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a19      	ldr	r2, [pc, #100]	; (800c27c <USBH_LL_Init+0x84>)
 800c216:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c21a:	4b18      	ldr	r3, [pc, #96]	; (800c27c <USBH_LL_Init+0x84>)
 800c21c:	4a18      	ldr	r2, [pc, #96]	; (800c280 <USBH_LL_Init+0x88>)
 800c21e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800c220:	4b16      	ldr	r3, [pc, #88]	; (800c27c <USBH_LL_Init+0x84>)
 800c222:	220c      	movs	r2, #12
 800c224:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c226:	4b15      	ldr	r3, [pc, #84]	; (800c27c <USBH_LL_Init+0x84>)
 800c228:	2201      	movs	r2, #1
 800c22a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c22c:	4b13      	ldr	r3, [pc, #76]	; (800c27c <USBH_LL_Init+0x84>)
 800c22e:	2200      	movs	r2, #0
 800c230:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c232:	4b12      	ldr	r3, [pc, #72]	; (800c27c <USBH_LL_Init+0x84>)
 800c234:	2202      	movs	r2, #2
 800c236:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c238:	4b10      	ldr	r3, [pc, #64]	; (800c27c <USBH_LL_Init+0x84>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c23e:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <USBH_LL_Init+0x84>)
 800c240:	2200      	movs	r2, #0
 800c242:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c244:	4b0d      	ldr	r3, [pc, #52]	; (800c27c <USBH_LL_Init+0x84>)
 800c246:	2200      	movs	r2, #0
 800c248:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c24a:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <USBH_LL_Init+0x84>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c250:	480a      	ldr	r0, [pc, #40]	; (800c27c <USBH_LL_Init+0x84>)
 800c252:	f7f5 fec6 	bl	8001fe2 <HAL_HCD_Init>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800c25c:	f7f4 fd30 	bl	8000cc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c260:	4806      	ldr	r0, [pc, #24]	; (800c27c <USBH_LL_Init+0x84>)
 800c262:	f7f6 fac1 	bl	80027e8 <HAL_HCD_GetCurrentFrame>
 800c266:	4603      	mov	r3, r0
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7fb fc66 	bl	8007b3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20009ae8 	.word	0x20009ae8
 800c280:	40040000 	.word	0x40040000

0800c284 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f6 fa2c 	bl	80026f8 <HAL_HCD_Start>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 f95c 	bl	800c564 <USBH_Get_USB_Status>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7f6 fa34 	bl	800273e <HAL_HCD_Stop>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 f941 	bl	800c564 <USBH_Get_USB_Status>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c302:	4618      	mov	r0, r3
 800c304:	f7f6 fa7e 	bl	8002804 <HAL_HCD_GetCurrentSpeed>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d007      	beq.n	800c31e <USBH_LL_GetSpeed+0x2e>
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d302      	bcc.n	800c318 <USBH_LL_GetSpeed+0x28>
 800c312:	2b02      	cmp	r3, #2
 800c314:	d006      	beq.n	800c324 <USBH_LL_GetSpeed+0x34>
 800c316:	e008      	b.n	800c32a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
    break;
 800c31c:	e008      	b.n	800c330 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c31e:	2301      	movs	r3, #1
 800c320:	73fb      	strb	r3, [r7, #15]
    break;
 800c322:	e005      	b.n	800c330 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c324:	2302      	movs	r3, #2
 800c326:	73fb      	strb	r3, [r7, #15]
    break;
 800c328:	e002      	b.n	800c330 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c32a:	2301      	movs	r3, #1
 800c32c:	73fb      	strb	r3, [r7, #15]
    break;
 800c32e:	bf00      	nop
  }
  return  speed;
 800c330:	7bfb      	ldrb	r3, [r7, #15]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c350:	4618      	mov	r0, r3
 800c352:	f7f6 fa11 	bl	8002778 <HAL_HCD_ResetPort>
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 f901 	bl	800c564 <USBH_Get_USB_Status>
 800c362:	4603      	mov	r3, r0
 800c364:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c366:	7bbb      	ldrb	r3, [r7, #14]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f7f6 fa19 	bl	80027be <HAL_HCD_HC_GetXferCount>
 800c38c:	4603      	mov	r3, r0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c396:	b590      	push	{r4, r7, lr}
 800c398:	b089      	sub	sp, #36	; 0x24
 800c39a:	af04      	add	r7, sp, #16
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	70fb      	strb	r3, [r7, #3]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70bb      	strb	r3, [r7, #2]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c3be:	787c      	ldrb	r4, [r7, #1]
 800c3c0:	78ba      	ldrb	r2, [r7, #2]
 800c3c2:	78f9      	ldrb	r1, [r7, #3]
 800c3c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3c6:	9302      	str	r3, [sp, #8]
 800c3c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	4623      	mov	r3, r4
 800c3d6:	f7f5 fe66 	bl	80020a6 <HAL_HCD_HC_Init>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 f8bf 	bl	800c564 <USBH_Get_USB_Status>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd90      	pop	{r4, r7, pc}

0800c3f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c40e:	78fa      	ldrb	r2, [r7, #3]
 800c410:	4611      	mov	r1, r2
 800c412:	4618      	mov	r0, r3
 800c414:	f7f5 fedf 	bl	80021d6 <HAL_HCD_HC_Halt>
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 f8a0 	bl	800c564 <USBH_Get_USB_Status>
 800c424:	4603      	mov	r3, r0
 800c426:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c428:	7bbb      	ldrb	r3, [r7, #14]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c432:	b590      	push	{r4, r7, lr}
 800c434:	b089      	sub	sp, #36	; 0x24
 800c436:	af04      	add	r7, sp, #16
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	4608      	mov	r0, r1
 800c43c:	4611      	mov	r1, r2
 800c43e:	461a      	mov	r2, r3
 800c440:	4603      	mov	r3, r0
 800c442:	70fb      	strb	r3, [r7, #3]
 800c444:	460b      	mov	r3, r1
 800c446:	70bb      	strb	r3, [r7, #2]
 800c448:	4613      	mov	r3, r2
 800c44a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c45a:	787c      	ldrb	r4, [r7, #1]
 800c45c:	78ba      	ldrb	r2, [r7, #2]
 800c45e:	78f9      	ldrb	r1, [r7, #3]
 800c460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c464:	9303      	str	r3, [sp, #12]
 800c466:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c468:	9302      	str	r3, [sp, #8]
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	4623      	mov	r3, r4
 800c476:	f7f5 fed1 	bl	800221c <HAL_HCD_HC_SubmitRequest>
 800c47a:	4603      	mov	r3, r0
 800c47c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	4618      	mov	r0, r3
 800c482:	f000 f86f 	bl	800c564 <USBH_Get_USB_Status>
 800c486:	4603      	mov	r3, r0
 800c488:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	bd90      	pop	{r4, r7, pc}

0800c494 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c4a6:	78fa      	ldrb	r2, [r7, #3]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f6 f972 	bl	8002794 <HAL_HCD_HC_GetURBState>
 800c4b0:	4603      	mov	r3, r0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b082      	sub	sp, #8
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d103      	bne.n	800c4d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 f872 	bl	800c5bc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c4d8:	20c8      	movs	r0, #200	; 0xc8
 800c4da:	f7f5 f8b1 	bl	8001640 <HAL_Delay>
  return USBH_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	70fb      	strb	r3, [r7, #3]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c4fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c500:	78fa      	ldrb	r2, [r7, #3]
 800c502:	68f9      	ldr	r1, [r7, #12]
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	440b      	add	r3, r1
 800c50e:	333b      	adds	r3, #59	; 0x3b
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c516:	78fa      	ldrb	r2, [r7, #3]
 800c518:	68f9      	ldr	r1, [r7, #12]
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	440b      	add	r3, r1
 800c524:	3350      	adds	r3, #80	; 0x50
 800c526:	78ba      	ldrb	r2, [r7, #2]
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	e009      	b.n	800c540 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c52c:	78fa      	ldrb	r2, [r7, #3]
 800c52e:	68f9      	ldr	r1, [r7, #12]
 800c530:	4613      	mov	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	00db      	lsls	r3, r3, #3
 800c538:	440b      	add	r3, r1
 800c53a:	3351      	adds	r3, #81	; 0x51
 800c53c:	78ba      	ldrb	r2, [r7, #2]
 800c53e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7f5 f872 	bl	8001640 <HAL_Delay>
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	2b03      	cmp	r3, #3
 800c576:	d817      	bhi.n	800c5a8 <USBH_Get_USB_Status+0x44>
 800c578:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <USBH_Get_USB_Status+0x1c>)
 800c57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57e:	bf00      	nop
 800c580:	0800c591 	.word	0x0800c591
 800c584:	0800c597 	.word	0x0800c597
 800c588:	0800c59d 	.word	0x0800c59d
 800c58c:	0800c5a3 	.word	0x0800c5a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
    break;
 800c594:	e00b      	b.n	800c5ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c596:	2302      	movs	r3, #2
 800c598:	73fb      	strb	r3, [r7, #15]
    break;
 800c59a:	e008      	b.n	800c5ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c59c:	2301      	movs	r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a0:	e005      	b.n	800c5ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a6:	e002      	b.n	800c5ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ac:	bf00      	nop
  }
  return usb_status;
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{ 
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800c5c6:	79fb      	ldrb	r3, [r7, #7]
 800c5c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d102      	bne.n	800c5d6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	73fb      	strb	r3, [r7, #15]
 800c5d4:	e001      	b.n	800c5da <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	2110      	movs	r1, #16
 800c5e0:	4803      	ldr	r0, [pc, #12]	; (800c5f0 <MX_DriverVbusHS+0x34>)
 800c5e2:	f7f5 fce5 	bl	8001fb0 <HAL_GPIO_WritePin>
}
 800c5e6:	bf00      	nop
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	40020800 	.word	0x40020800

0800c5f4 <__errno>:
 800c5f4:	4b01      	ldr	r3, [pc, #4]	; (800c5fc <__errno+0x8>)
 800c5f6:	6818      	ldr	r0, [r3, #0]
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	20000054 	.word	0x20000054

0800c600 <__libc_init_array>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	4e0d      	ldr	r6, [pc, #52]	; (800c638 <__libc_init_array+0x38>)
 800c604:	4c0d      	ldr	r4, [pc, #52]	; (800c63c <__libc_init_array+0x3c>)
 800c606:	1ba4      	subs	r4, r4, r6
 800c608:	10a4      	asrs	r4, r4, #2
 800c60a:	2500      	movs	r5, #0
 800c60c:	42a5      	cmp	r5, r4
 800c60e:	d109      	bne.n	800c624 <__libc_init_array+0x24>
 800c610:	4e0b      	ldr	r6, [pc, #44]	; (800c640 <__libc_init_array+0x40>)
 800c612:	4c0c      	ldr	r4, [pc, #48]	; (800c644 <__libc_init_array+0x44>)
 800c614:	f000 f8f6 	bl	800c804 <_init>
 800c618:	1ba4      	subs	r4, r4, r6
 800c61a:	10a4      	asrs	r4, r4, #2
 800c61c:	2500      	movs	r5, #0
 800c61e:	42a5      	cmp	r5, r4
 800c620:	d105      	bne.n	800c62e <__libc_init_array+0x2e>
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c628:	4798      	blx	r3
 800c62a:	3501      	adds	r5, #1
 800c62c:	e7ee      	b.n	800c60c <__libc_init_array+0xc>
 800c62e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c632:	4798      	blx	r3
 800c634:	3501      	adds	r5, #1
 800c636:	e7f2      	b.n	800c61e <__libc_init_array+0x1e>
 800c638:	0800fcd8 	.word	0x0800fcd8
 800c63c:	0800fcd8 	.word	0x0800fcd8
 800c640:	0800fcd8 	.word	0x0800fcd8
 800c644:	0800fcdc 	.word	0x0800fcdc

0800c648 <malloc>:
 800c648:	4b02      	ldr	r3, [pc, #8]	; (800c654 <malloc+0xc>)
 800c64a:	4601      	mov	r1, r0
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	f000 b86d 	b.w	800c72c <_malloc_r>
 800c652:	bf00      	nop
 800c654:	20000054 	.word	0x20000054

0800c658 <free>:
 800c658:	4b02      	ldr	r3, [pc, #8]	; (800c664 <free+0xc>)
 800c65a:	4601      	mov	r1, r0
 800c65c:	6818      	ldr	r0, [r3, #0]
 800c65e:	f000 b817 	b.w	800c690 <_free_r>
 800c662:	bf00      	nop
 800c664:	20000054 	.word	0x20000054

0800c668 <memcpy>:
 800c668:	b510      	push	{r4, lr}
 800c66a:	1e43      	subs	r3, r0, #1
 800c66c:	440a      	add	r2, r1
 800c66e:	4291      	cmp	r1, r2
 800c670:	d100      	bne.n	800c674 <memcpy+0xc>
 800c672:	bd10      	pop	{r4, pc}
 800c674:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c67c:	e7f7      	b.n	800c66e <memcpy+0x6>

0800c67e <memset>:
 800c67e:	4402      	add	r2, r0
 800c680:	4603      	mov	r3, r0
 800c682:	4293      	cmp	r3, r2
 800c684:	d100      	bne.n	800c688 <memset+0xa>
 800c686:	4770      	bx	lr
 800c688:	f803 1b01 	strb.w	r1, [r3], #1
 800c68c:	e7f9      	b.n	800c682 <memset+0x4>
	...

0800c690 <_free_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4605      	mov	r5, r0
 800c694:	2900      	cmp	r1, #0
 800c696:	d045      	beq.n	800c724 <_free_r+0x94>
 800c698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c69c:	1f0c      	subs	r4, r1, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bfb8      	it	lt
 800c6a2:	18e4      	addlt	r4, r4, r3
 800c6a4:	f000 f8ac 	bl	800c800 <__malloc_lock>
 800c6a8:	4a1f      	ldr	r2, [pc, #124]	; (800c728 <_free_r+0x98>)
 800c6aa:	6813      	ldr	r3, [r2, #0]
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	b933      	cbnz	r3, 800c6be <_free_r+0x2e>
 800c6b0:	6063      	str	r3, [r4, #4]
 800c6b2:	6014      	str	r4, [r2, #0]
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ba:	f000 b8a2 	b.w	800c802 <__malloc_unlock>
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	d90c      	bls.n	800c6dc <_free_r+0x4c>
 800c6c2:	6821      	ldr	r1, [r4, #0]
 800c6c4:	1862      	adds	r2, r4, r1
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	bf04      	itt	eq
 800c6ca:	681a      	ldreq	r2, [r3, #0]
 800c6cc:	685b      	ldreq	r3, [r3, #4]
 800c6ce:	6063      	str	r3, [r4, #4]
 800c6d0:	bf04      	itt	eq
 800c6d2:	1852      	addeq	r2, r2, r1
 800c6d4:	6022      	streq	r2, [r4, #0]
 800c6d6:	6004      	str	r4, [r0, #0]
 800c6d8:	e7ec      	b.n	800c6b4 <_free_r+0x24>
 800c6da:	4613      	mov	r3, r2
 800c6dc:	685a      	ldr	r2, [r3, #4]
 800c6de:	b10a      	cbz	r2, 800c6e4 <_free_r+0x54>
 800c6e0:	42a2      	cmp	r2, r4
 800c6e2:	d9fa      	bls.n	800c6da <_free_r+0x4a>
 800c6e4:	6819      	ldr	r1, [r3, #0]
 800c6e6:	1858      	adds	r0, r3, r1
 800c6e8:	42a0      	cmp	r0, r4
 800c6ea:	d10b      	bne.n	800c704 <_free_r+0x74>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	4401      	add	r1, r0
 800c6f0:	1858      	adds	r0, r3, r1
 800c6f2:	4282      	cmp	r2, r0
 800c6f4:	6019      	str	r1, [r3, #0]
 800c6f6:	d1dd      	bne.n	800c6b4 <_free_r+0x24>
 800c6f8:	6810      	ldr	r0, [r2, #0]
 800c6fa:	6852      	ldr	r2, [r2, #4]
 800c6fc:	605a      	str	r2, [r3, #4]
 800c6fe:	4401      	add	r1, r0
 800c700:	6019      	str	r1, [r3, #0]
 800c702:	e7d7      	b.n	800c6b4 <_free_r+0x24>
 800c704:	d902      	bls.n	800c70c <_free_r+0x7c>
 800c706:	230c      	movs	r3, #12
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	e7d3      	b.n	800c6b4 <_free_r+0x24>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	1821      	adds	r1, r4, r0
 800c710:	428a      	cmp	r2, r1
 800c712:	bf04      	itt	eq
 800c714:	6811      	ldreq	r1, [r2, #0]
 800c716:	6852      	ldreq	r2, [r2, #4]
 800c718:	6062      	str	r2, [r4, #4]
 800c71a:	bf04      	itt	eq
 800c71c:	1809      	addeq	r1, r1, r0
 800c71e:	6021      	streq	r1, [r4, #0]
 800c720:	605c      	str	r4, [r3, #4]
 800c722:	e7c7      	b.n	800c6b4 <_free_r+0x24>
 800c724:	bd38      	pop	{r3, r4, r5, pc}
 800c726:	bf00      	nop
 800c728:	200090d4 	.word	0x200090d4

0800c72c <_malloc_r>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	1ccd      	adds	r5, r1, #3
 800c730:	f025 0503 	bic.w	r5, r5, #3
 800c734:	3508      	adds	r5, #8
 800c736:	2d0c      	cmp	r5, #12
 800c738:	bf38      	it	cc
 800c73a:	250c      	movcc	r5, #12
 800c73c:	2d00      	cmp	r5, #0
 800c73e:	4606      	mov	r6, r0
 800c740:	db01      	blt.n	800c746 <_malloc_r+0x1a>
 800c742:	42a9      	cmp	r1, r5
 800c744:	d903      	bls.n	800c74e <_malloc_r+0x22>
 800c746:	230c      	movs	r3, #12
 800c748:	6033      	str	r3, [r6, #0]
 800c74a:	2000      	movs	r0, #0
 800c74c:	bd70      	pop	{r4, r5, r6, pc}
 800c74e:	f000 f857 	bl	800c800 <__malloc_lock>
 800c752:	4a21      	ldr	r2, [pc, #132]	; (800c7d8 <_malloc_r+0xac>)
 800c754:	6814      	ldr	r4, [r2, #0]
 800c756:	4621      	mov	r1, r4
 800c758:	b991      	cbnz	r1, 800c780 <_malloc_r+0x54>
 800c75a:	4c20      	ldr	r4, [pc, #128]	; (800c7dc <_malloc_r+0xb0>)
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	b91b      	cbnz	r3, 800c768 <_malloc_r+0x3c>
 800c760:	4630      	mov	r0, r6
 800c762:	f000 f83d 	bl	800c7e0 <_sbrk_r>
 800c766:	6020      	str	r0, [r4, #0]
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f000 f838 	bl	800c7e0 <_sbrk_r>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d124      	bne.n	800c7be <_malloc_r+0x92>
 800c774:	230c      	movs	r3, #12
 800c776:	6033      	str	r3, [r6, #0]
 800c778:	4630      	mov	r0, r6
 800c77a:	f000 f842 	bl	800c802 <__malloc_unlock>
 800c77e:	e7e4      	b.n	800c74a <_malloc_r+0x1e>
 800c780:	680b      	ldr	r3, [r1, #0]
 800c782:	1b5b      	subs	r3, r3, r5
 800c784:	d418      	bmi.n	800c7b8 <_malloc_r+0x8c>
 800c786:	2b0b      	cmp	r3, #11
 800c788:	d90f      	bls.n	800c7aa <_malloc_r+0x7e>
 800c78a:	600b      	str	r3, [r1, #0]
 800c78c:	50cd      	str	r5, [r1, r3]
 800c78e:	18cc      	adds	r4, r1, r3
 800c790:	4630      	mov	r0, r6
 800c792:	f000 f836 	bl	800c802 <__malloc_unlock>
 800c796:	f104 000b 	add.w	r0, r4, #11
 800c79a:	1d23      	adds	r3, r4, #4
 800c79c:	f020 0007 	bic.w	r0, r0, #7
 800c7a0:	1ac3      	subs	r3, r0, r3
 800c7a2:	d0d3      	beq.n	800c74c <_malloc_r+0x20>
 800c7a4:	425a      	negs	r2, r3
 800c7a6:	50e2      	str	r2, [r4, r3]
 800c7a8:	e7d0      	b.n	800c74c <_malloc_r+0x20>
 800c7aa:	428c      	cmp	r4, r1
 800c7ac:	684b      	ldr	r3, [r1, #4]
 800c7ae:	bf16      	itet	ne
 800c7b0:	6063      	strne	r3, [r4, #4]
 800c7b2:	6013      	streq	r3, [r2, #0]
 800c7b4:	460c      	movne	r4, r1
 800c7b6:	e7eb      	b.n	800c790 <_malloc_r+0x64>
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	6849      	ldr	r1, [r1, #4]
 800c7bc:	e7cc      	b.n	800c758 <_malloc_r+0x2c>
 800c7be:	1cc4      	adds	r4, r0, #3
 800c7c0:	f024 0403 	bic.w	r4, r4, #3
 800c7c4:	42a0      	cmp	r0, r4
 800c7c6:	d005      	beq.n	800c7d4 <_malloc_r+0xa8>
 800c7c8:	1a21      	subs	r1, r4, r0
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f000 f808 	bl	800c7e0 <_sbrk_r>
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d0cf      	beq.n	800c774 <_malloc_r+0x48>
 800c7d4:	6025      	str	r5, [r4, #0]
 800c7d6:	e7db      	b.n	800c790 <_malloc_r+0x64>
 800c7d8:	200090d4 	.word	0x200090d4
 800c7dc:	200090d8 	.word	0x200090d8

0800c7e0 <_sbrk_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4c06      	ldr	r4, [pc, #24]	; (800c7fc <_sbrk_r+0x1c>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	f7f4 fe5a 	bl	80014a4 <_sbrk>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_sbrk_r+0x1a>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_sbrk_r+0x1a>
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	20009dac 	.word	0x20009dac

0800c800 <__malloc_lock>:
 800c800:	4770      	bx	lr

0800c802 <__malloc_unlock>:
 800c802:	4770      	bx	lr

0800c804 <_init>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	bf00      	nop
 800c808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80a:	bc08      	pop	{r3}
 800c80c:	469e      	mov	lr, r3
 800c80e:	4770      	bx	lr

0800c810 <_fini>:
 800c810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c812:	bf00      	nop
 800c814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c816:	bc08      	pop	{r3}
 800c818:	469e      	mov	lr, r3
 800c81a:	4770      	bx	lr
